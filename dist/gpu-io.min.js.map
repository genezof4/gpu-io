{"version":3,"file":"gpu-io.min.js","mappings":"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","sources":["webpack://GPUIO/webpack/universalModuleDefinition","webpack://GPUIO/./node_modules/@amandaghassaei/type-checks/dist/type-checks.js","webpack://GPUIO/./node_modules/changedpi/dist/index.js","webpack://GPUIO/./node_modules/file-saver/dist/FileSaver.min.js","webpack://GPUIO/./src/GPUComposer.ts","webpack://GPUIO/./src/GPULayer.ts","webpack://GPUIO/./src/GPULayerHelpers.ts","webpack://GPUIO/./src/GPUProgram.ts","webpack://GPUIO/./src/Programs.ts","webpack://GPUIO/./src/Vector4.ts","webpack://GPUIO/./src/checks.ts","webpack://GPUIO/./src/constants.ts","webpack://GPUIO/./src/conversions.ts","webpack://GPUIO/./src/extensions.ts","webpack://GPUIO/./src/framebuffers.ts","webpack://GPUIO/./src/glsl/common/precision.ts","webpack://GPUIO/./src/glsl/vertex/DefaultVertexShader.ts","webpack://GPUIO/./src/glsl/vertex/LayerLinesVertexShader.ts","webpack://GPUIO/./src/glsl/vertex/LayerPointsVertexShader.ts","webpack://GPUIO/./src/glsl/vertex/LayerVectorFieldVertexShader.ts","webpack://GPUIO/./src/glsl/vertex/SegmentVertexShader.ts","webpack://GPUIO/./src/glsl/vertex/VertexShaderHelpers.ts","webpack://GPUIO/./src/index.ts","webpack://GPUIO/./src/polyfills.ts","webpack://GPUIO/./src/regex.ts","webpack://GPUIO/./src/utils.ts","webpack://GPUIO/./node_modules/@petamoriken/float16/lib/DataView.cjs","webpack://GPUIO/./node_modules/@petamoriken/float16/lib/Float16Array.cjs","webpack://GPUIO/./node_modules/@petamoriken/float16/lib/_util/arrayIterator.cjs","webpack://GPUIO/./node_modules/@petamoriken/float16/lib/_util/brand.cjs","webpack://GPUIO/./node_modules/@petamoriken/float16/lib/_util/converter.cjs","webpack://GPUIO/./node_modules/@petamoriken/float16/lib/_util/is.cjs","webpack://GPUIO/./node_modules/@petamoriken/float16/lib/_util/messages.cjs","webpack://GPUIO/./node_modules/@petamoriken/float16/lib/_util/primordials.cjs","webpack://GPUIO/./node_modules/@petamoriken/float16/lib/_util/spec.cjs","webpack://GPUIO/./node_modules/@petamoriken/float16/lib/hfround.cjs","webpack://GPUIO/./node_modules/@petamoriken/float16/lib/index.cjs","webpack://GPUIO/./node_modules/@petamoriken/float16/lib/isTypedArray.cjs","webpack://GPUIO/webpack/bootstrap","webpack://GPUIO/webpack/runtime/global","webpack://GPUIO/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GPUIO\"] = factory();\n\telse\n\t\troot[\"GPUIO\"] = factory();\n})(self, () => {\nreturn ","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.TypeChecks = {}));\n})(this, (function (exports) { 'use strict';\n\n\t/**\n\t * Checks if value is a number (including Infinity).\n\t */\n\tfunction isNumber(value) {\n\t    return !Number.isNaN(value) && typeof value === 'number';\n\t}\n\t/**\n\t * Checks if value is finite number.\n\t */\n\tfunction isFiniteNumber(value) {\n\t    return isNumber(value) && Number.isFinite(value);\n\t}\n\t/**\n\t * Checks if value is integer.\n\t */\n\tfunction isInteger(value) {\n\t    return isFiniteNumber(value) && (value % 1 === 0);\n\t}\n\t/**\n\t * Checks if value is positive number (> 0).\n\t */\n\tfunction isPositiveNumber(value) {\n\t    return isNumber(value) && value > 0;\n\t}\n\t/**\n\t * Checks if value is positive integer (> 0).\n\t */\n\tfunction isPositiveInteger(value) {\n\t    return isInteger(value) && value > 0;\n\t}\n\t/**\n\t * Checks if value is negative number (< 0).\n\t */\n\tfunction isNegativeNumber(value) {\n\t    return isNumber(value) && value < 0;\n\t}\n\t/**\n\t * Checks if value is negative integer (< 0).\n\t */\n\tfunction isNegativeInteger(value) {\n\t    return isInteger(value) && value < 0;\n\t}\n\t/**\n\t * Checks if value is non-negative number (>= 0).\n\t */\n\tfunction isNonNegativeNumber(value) {\n\t    return isNumber(value) && value >= 0;\n\t}\n\t/**\n\t * Checks if value is non-negative integer (>= 0).\n\t */\n\tfunction isNonNegativeInteger(value) {\n\t    return isInteger(value) && value >= 0;\n\t}\n\t/**\n\t * Checks if value is non-positive number (<= 0).\n\t */\n\tfunction isNonPositiveNumber(value) {\n\t    return isNumber(value) && value <= 0;\n\t}\n\t/**\n\t * Checks if value is non-positive integer (<= 0).\n\t */\n\tfunction isNonPositiveInteger(value) {\n\t    return isInteger(value) && value <= 0;\n\t}\n\t/**\n\t * Checks if value is number in range [min, max].\n\t */\n\tfunction isNumberInRange(value, min, max) {\n\t    return isNumber(value) && value >= min && value <= max;\n\t}\n\t/**\n\t * Checks if value is integer in range [min, max].\n\t */\n\tfunction isIntegerInRange(value, min, max) {\n\t    return isInteger(value) && value >= min && value <= max;\n\t}\n\t/**\n\t * Checks if value is string.\n\t */\n\tfunction isString(value) {\n\t    return typeof value === 'string';\n\t}\n\t/**\n\t * Checks if value is TypedArray.\n\t */\n\tfunction isTypedArray(value) {\n\t    return ArrayBuffer.isView(value) && !(value instanceof DataView);\n\t}\n\t/**\n\t * Checks if value is Array or TypedArray.\n\t */\n\tfunction isArray(value) {\n\t    return Array.isArray(value) || isTypedArray(value);\n\t}\n\t/**\n\t * Checks if value is Javascript object.\n\t */\n\tfunction isObject(value) {\n\t    return typeof value === 'object' && !isArray(value) && value !== null && !(value instanceof ArrayBuffer) && !(value instanceof DataView);\n\t}\n\t/**\n\t * Checks if value is boolean.\n\t */\n\tfunction isBoolean(value) {\n\t    return typeof value === 'boolean';\n\t}\n\n\texports.isArray = isArray;\n\texports.isBoolean = isBoolean;\n\texports.isFiniteNumber = isFiniteNumber;\n\texports.isInteger = isInteger;\n\texports.isIntegerInRange = isIntegerInRange;\n\texports.isNegativeInteger = isNegativeInteger;\n\texports.isNegativeNumber = isNegativeNumber;\n\texports.isNonNegativeInteger = isNonNegativeInteger;\n\texports.isNonNegativeNumber = isNonNegativeNumber;\n\texports.isNonPositiveInteger = isNonPositiveInteger;\n\texports.isNonPositiveNumber = isNonPositiveNumber;\n\texports.isNumber = isNumber;\n\texports.isNumberInRange = isNumberInRange;\n\texports.isObject = isObject;\n\texports.isPositiveInteger = isPositiveInteger;\n\texports.isPositiveNumber = isPositiveNumber;\n\texports.isString = isString;\n\texports.isTypedArray = isTypedArray;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=type-checks.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.changeDpiBlob = changeDpiBlob;\nexports.changeDpiDataUrl = changeDpiDataUrl;\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction createPngDataTable() {\n  /* Table of CRCs of all 8-bit messages. */\n  var crcTable = new Int32Array(256);\n  for (var n = 0; n < 256; n++) {\n    var c = n;\n    for (var k = 0; k < 8; k++) {\n      c = c & 1 ? 0xedb88320 ^ c >>> 1 : c >>> 1;\n    }\n    crcTable[n] = c;\n  }\n  return crcTable;\n}\n\nfunction calcCrc(buf) {\n  var c = -1;\n  if (!pngDataTable) pngDataTable = createPngDataTable();\n  for (var n = 0; n < buf.length; n++) {\n    c = pngDataTable[(c ^ buf[n]) & 0xFF] ^ c >>> 8;\n  }\n  return c ^ -1;\n}\n\nvar pngDataTable = void 0;\n\nvar PNG = 'image/png';\nvar JPEG = 'image/jpeg';\n\n// those are 3 possible signature of the physBlock in base64.\n// the pHYs signature block is preceed by the 4 bytes of lenght. The length of\n// the block is always 9 bytes. So a phys block has always this signature:\n// 0 0 0 9 p H Y s.\n// However the data64 encoding aligns we will always find one of those 3 strings.\n// this allow us to find this particular occurence of the pHYs block without\n// converting from b64 back to string\nvar b64PhysSignature1 = 'AAlwSFlz';\nvar b64PhysSignature2 = 'AAAJcEhZ';\nvar b64PhysSignature3 = 'AAAACXBI';\n\nvar _P = 'p'.charCodeAt(0);\nvar _H = 'H'.charCodeAt(0);\nvar _Y = 'Y'.charCodeAt(0);\nvar _S = 's'.charCodeAt(0);\n\nfunction changeDpiBlob(blob, dpi) {\n  // 33 bytes are ok for pngs and jpegs\n  // to contain the information.\n  var headerChunk = blob.slice(0, 33);\n  return new Promise(function (resolve, reject) {\n    var fileReader = new FileReader();\n    fileReader.onload = function () {\n      var dataArray = new Uint8Array(fileReader.result);\n      var tail = blob.slice(33);\n      var changedArray = changeDpiOnArray(dataArray, dpi, blob.type);\n      resolve(new Blob([changedArray, tail], { type: blob.type }));\n    };\n    fileReader.readAsArrayBuffer(headerChunk);\n  });\n}\n\nfunction changeDpiDataUrl(base64Image, dpi) {\n  var dataSplitted = base64Image.split(',');\n  var format = dataSplitted[0];\n  var body = dataSplitted[1];\n  var type = void 0;\n  var headerLength = void 0;\n  var overwritepHYs = false;\n  if (format.indexOf(PNG) !== -1) {\n    type = PNG;\n    var b64Index = detectPhysChunkFromDataUrl(body);\n    // 28 bytes in dataUrl are 21bytes, length of phys chunk with everything inside.\n    if (b64Index >= 0) {\n      headerLength = Math.ceil((b64Index + 28) / 3) * 4;\n      overwritepHYs = true;\n    } else {\n      headerLength = 33 / 3 * 4;\n    }\n  }\n  if (format.indexOf(JPEG) !== -1) {\n    type = JPEG;\n    headerLength = 18 / 3 * 4;\n  }\n  // 33 bytes are ok for pngs and jpegs\n  // to contain the information.\n  var stringHeader = body.substring(0, headerLength);\n  var restOfData = body.substring(headerLength);\n  var headerBytes = atob(stringHeader);\n  var dataArray = new Uint8Array(headerBytes.length);\n  for (var i = 0; i < dataArray.length; i++) {\n    dataArray[i] = headerBytes.charCodeAt(i);\n  }\n  var finalArray = changeDpiOnArray(dataArray, dpi, type, overwritepHYs);\n  var base64Header = btoa(String.fromCharCode.apply(String, _toConsumableArray(finalArray)));\n  return [format, ',', base64Header, restOfData].join('');\n}\n\nfunction detectPhysChunkFromDataUrl(data) {\n  var b64index = data.indexOf(b64PhysSignature1);\n  if (b64index === -1) {\n    b64index = data.indexOf(b64PhysSignature2);\n  }\n  if (b64index === -1) {\n    b64index = data.indexOf(b64PhysSignature3);\n  }\n  // if b64index === -1 chunk is not found\n  return b64index;\n}\n\nfunction searchStartOfPhys(data) {\n  var length = data.length - 1;\n  // we check from the end since we cut the string in proximity of the header\n  // the header is within 21 bytes from the end.\n  for (var i = length; i >= 4; i--) {\n    if (data[i - 4] === 9 && data[i - 3] === _P && data[i - 2] === _H && data[i - 1] === _Y && data[i] === _S) {\n      return i - 3;\n    }\n  }\n}\n\nfunction changeDpiOnArray(dataArray, dpi, format, overwritepHYs) {\n  if (format === JPEG) {\n    dataArray[13] = 1; // 1 pixel per inch or 2 pixel per cm\n    dataArray[14] = dpi >> 8; // dpiX high byte\n    dataArray[15] = dpi & 0xff; // dpiX low byte\n    dataArray[16] = dpi >> 8; // dpiY high byte\n    dataArray[17] = dpi & 0xff; // dpiY low byte\n    return dataArray;\n  }\n  if (format === PNG) {\n    var physChunk = new Uint8Array(13);\n    // chunk header pHYs\n    // 9 bytes of data\n    // 4 bytes of crc\n    // this multiplication is because the standard is dpi per meter.\n    dpi *= 39.3701;\n    physChunk[0] = _P;\n    physChunk[1] = _H;\n    physChunk[2] = _Y;\n    physChunk[3] = _S;\n    physChunk[4] = dpi >>> 24; // dpiX highest byte\n    physChunk[5] = dpi >>> 16; // dpiX veryhigh byte\n    physChunk[6] = dpi >>> 8; // dpiX high byte\n    physChunk[7] = dpi & 0xff; // dpiX low byte\n    physChunk[8] = physChunk[4]; // dpiY highest byte\n    physChunk[9] = physChunk[5]; // dpiY veryhigh byte\n    physChunk[10] = physChunk[6]; // dpiY high byte\n    physChunk[11] = physChunk[7]; // dpiY low byte\n    physChunk[12] = 1; // dot per meter....\n\n    var crc = calcCrc(physChunk);\n\n    var crcChunk = new Uint8Array(4);\n    crcChunk[0] = crc >>> 24;\n    crcChunk[1] = crc >>> 16;\n    crcChunk[2] = crc >>> 8;\n    crcChunk[3] = crc & 0xff;\n\n    if (overwritepHYs) {\n      var startingIndex = searchStartOfPhys(dataArray);\n      dataArray.set(physChunk, startingIndex);\n      dataArray.set(crcChunk, startingIndex + 13);\n      return dataArray;\n    } else {\n      // i need to give back an array of data that is divisible by 3 so that\n      // dataurl encoding gives me integers, for luck this chunk is 17 + 4 = 21\n      // if it was we could add a text chunk contaning some info, untill desired\n      // length is met.\n\n      // chunk structur 4 bytes for length is 9\n      var chunkLength = new Uint8Array(4);\n      chunkLength[0] = 0;\n      chunkLength[1] = 0;\n      chunkLength[2] = 0;\n      chunkLength[3] = 9;\n\n      var finalHeader = new Uint8Array(54);\n      finalHeader.set(dataArray, 0);\n      finalHeader.set(chunkLength, 33);\n      finalHeader.set(physChunk, 37);\n      finalHeader.set(crcChunk, 50);\n      return finalHeader;\n    }\n  }\n}","(function(a,b){if(\"function\"==typeof define&&define.amd)define([],b);else if(\"undefined\"!=typeof exports)b();else{b(),a.FileSaver={exports:{}}.exports}})(this,function(){\"use strict\";function b(a,b){return\"undefined\"==typeof b?b={autoBom:!1}:\"object\"!=typeof b&&(console.warn(\"Deprecated: Expected third argument to be a object\"),b={autoBom:!b}),b.autoBom&&/^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(a.type)?new Blob([\"\\uFEFF\",a],{type:a.type}):a}function c(a,b,c){var d=new XMLHttpRequest;d.open(\"GET\",a),d.responseType=\"blob\",d.onload=function(){g(d.response,b,c)},d.onerror=function(){console.error(\"could not download file\")},d.send()}function d(a){var b=new XMLHttpRequest;b.open(\"HEAD\",a,!1);try{b.send()}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent(\"click\"))}catch(c){var b=document.createEvent(\"MouseEvents\");b.initMouseEvent(\"click\",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f=\"object\"==typeof window&&window.window===window?window:\"object\"==typeof self&&self.self===self?self:\"object\"==typeof global&&global.global===global?global:void 0,a=f.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),g=f.saveAs||(\"object\"!=typeof window||window!==f?function(){}:\"download\"in HTMLAnchorElement.prototype&&!a?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement(\"a\");g=g||b.name||\"download\",j.download=g,j.rel=\"noopener\",\"string\"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target=\"_blank\")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:\"msSaveOrOpenBlob\"in navigator?function(f,g,h){if(g=g||f.name||\"download\",\"string\"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement(\"a\");i.href=f,i.target=\"_blank\",setTimeout(function(){e(i)})}}:function(b,d,e,g){if(g=g||open(\"\",\"_blank\"),g&&(g.document.title=g.document.body.innerText=\"downloading...\"),\"string\"==typeof b)return c(b,d,e);var h=\"application/octet-stream\"===b.type,i=/constructor/i.test(f.HTMLElement)||f.safari,j=/CriOS\\/[\\d]+/.test(navigator.userAgent);if((j||h&&i||a)&&\"undefined\"!=typeof FileReader){var k=new FileReader;k.onloadend=function(){var a=k.result;a=j?a:a.replace(/^data:[^;]*;/,\"data:attachment/file;\"),g?g.location.href=a:location=a,g=null},k.readAsDataURL(b)}else{var l=f.URL||f.webkitURL,m=l.createObjectURL(b);g?g.location=m:location.href=m,g=null,setTimeout(function(){l.revokeObjectURL(m)},4E4)}});f.saveAs=g.saveAs=g,\"undefined\"!=typeof module&&(module.exports=g)});\n\n//# sourceMappingURL=FileSaver.min.js.map","// @ts-ignore\nimport { changeDpiBlob } from 'changedpi';\nimport { isArray } from '@amandaghassaei/type-checks';\nimport { GPULayer } from './GPULayer';\nimport './GPULayerHelpers';\nimport {\n\tGPULayerType,\n\tFLOAT,\n\tINT,\n\tGLSLVersion,\n\tGLSL1,\n\tGLSL3,\n\tWEBGL2,\n\tWEBGL1,\n\tEXPERIMENTAL_WEBGL,\n\tPROGRAM_NAME_INTERNAL,\n\tCompileTimeConstants,\n\tDEFAULT_PROGRAM_NAME,\n\tSEGMENT_PROGRAM_NAME,\n\tLAYER_POINTS_PROGRAM_NAME,\n\tLAYER_VECTOR_FIELD_PROGRAM_NAME,\n\tLAYER_LINES_PROGRAM_NAME,\n\tErrorCallback,\n\tDEFAULT_CIRCLE_NUM_SEGMENTS,\n\tUINT,\n\tGLSLPrecision,\n\tPRECISION_HIGH_P,\n\tDEFAULT_ERROR_CALLBACK,\n\tGPULayerState,\n\tGPUIO_VS_POSITION_W_ACCUM,\n\tGPUIO_VS_WRAP_X,\n\tGPUIO_VS_WRAP_Y,\n\tMAX_FLOAT_INT,\n\tEXPERIMENTAL_WEBGL2,\n\tBoundaryEdge,\n\tBOUNDARY_LEFT,\n\tBOUNDARY_RIGHT,\n\tBOUNDARY_TOP,\n\tBOUNDARY_BOTTOM,\n} from './constants';\nimport { GPUProgram } from './GPUProgram';\n// Just importing the types here.\n// This repo does not depend on three, only @types/three is installed as dev dependency.\nimport type {\n\tWebGLRenderer,\n\tVector4,\n\tWebGL1Renderer,\n} from 'three';\nimport * as ThreejsUtils from './Vector4';\nimport {\n\tisWebGL2,\n\tinitSequentialFloatArray,\n\tpreprocessVertexShader,\n\tcompileShader,\n\tindexOfLayerInArray,\n} from './utils';\nimport { DEFAULT_VERT_SHADER_SOURCE } from './glsl/vertex/DefaultVertexShader';\nimport { LAYER_LINES_VERTEX_SHADER_SOURCE } from './glsl/vertex/LayerLinesVertexShader';\nimport { SEGMENT_VERTEX_SHADER_SOURCE } from './glsl/vertex/SegmentVertexShader';\nimport { LAYER_POINTS_VERTEX_SHADER_SOURCE } from './glsl/vertex/LayerPointsVertexShader';\nimport { LAYER_VECTOR_FIELD_VERTEX_SHADER_SOURCE } from './glsl/vertex/LayerVectorFieldVertexShader';\nimport { uniformTypeForType } from './conversions';\nimport {\n\tcopyProgram,\n\tsetValueProgram,\n} from './Programs';\nimport { checkRequiredKeys, checkValidKeys } from './checks';\nimport { bindFrameBuffer } from './framebuffers';\nimport { getExtension, OES_VERTEX_ARRAY_OBJECT } from './extensions';\n\nexport class GPUComposer {\n\t/**\n\t * The WebGL context associated with this GPUcomposer.\n\t */\n\treadonly gl!: WebGLRenderingContext | WebGL2RenderingContext;\n\t/**\n\t * The GLSL version being used by the GPUComposer.\n\t */\n\treadonly glslVersion!: GLSLVersion;\n\t/**\n\t * Flag for WebGL version.\n\t */\n\treadonly isWebGL2!: boolean;\n\t/**\n\t * The global integer precision to apply to shader programs.\n\t */\n\treadonly intPrecision!: GLSLPrecision;\n\t/**\n\t * The global float precision to apply to shader programs.\n\t */\n\treadonly floatPrecision!: GLSLPrecision;\n\t/**\n\t * Store the width and height of the current canvas at full res.\n\t */\n\tprivate _width!: number;\n\tprivate _height!: number;\n\n\t/**\n\t * @private\n\t */\n\treadonly _errorCallback: ErrorCallback;\n\tprivate _errorState = false;\n\n\t// Save threejs renderer if passed in.\n\t/**\n\t * @private\n\t */\n\treadonly _threeRenderer?: WebGLRenderer | WebGL1Renderer;\n\t\n\t/**\n\t * Precomputed vertex buffers (inited as needed).\n\t */\n\tprivate _quadPositionsBuffer?: WebGLBuffer;\n\tprivate _boundaryPositionsBuffer?: WebGLBuffer;\n\t// Cache multiple circle positions buffers for various num segments, use numSegments as key.\n\tprivate _circlePositionsBuffer: { [key: number]: WebGLBuffer } = {};\n\tprivate _pointIndexArray?: Float32Array;\n\tprivate _pointIndexBuffer?: WebGLBuffer;\n\tprivate _vectorFieldIndexArray?: Float32Array;\n\tprivate _vectorFieldIndexBuffer?: WebGLBuffer;\n\tprivate _indexedLinesIndexBuffer?: WebGLBuffer;\n\t/**\n\t * Cache vertex shader attribute locations.\n\t */\n\tprivate _vertexAttributeLocations: {[key: string]: WeakMap<WebGLProgram, number>} = {};\n\tprivate _enabledVertexAttributes: {[key: number]: boolean} = {};;\n\n\t// Keep track of all GL extensions that have been loaded.\n\t/**\n\t * @private\n\t */\n\treadonly _extensions: { [key: string]: any } = {};\n\n\t/**\n\t * Cache some generic programs for copying data.\n\t * These are needed for rendering partial screen geometries.\n\t */\n\tprivate readonly _copyPrograms: {\n\t\t[FLOAT]?: GPUProgram,\n\t\t[INT]?: GPUProgram,\n\t\t[UINT]?: GPUProgram,\n\t} = {};\n\n\t// Other util programs.\n\t/**\n\t * Cache some generic programs for setting value from uniform.\n\t * These are used by GPULayer.clear(), among other things\n\t */\n\tprivate readonly _setValuePrograms: {\n\t\t[FLOAT]?: GPUProgram,\n\t\t[INT]?: GPUProgram,\n\t\t[UINT]?: GPUProgram,\n\t} = {};\n\tprivate _wrappedLineColorProgram?: GPUProgram; // We only need a FLOAT version of this.\n\n\t/**\n\t * Vertex shaders are shared across all GPUProgram instances.\n\t * @private\n\t */\n\treadonly _vertexShaders: {[key in PROGRAM_NAME_INTERNAL]: {\n\t\tsrc: string,\n\t\tcompiledShaders: { [key: string]: WebGLShader },\n\t}} = {\n\t\t[DEFAULT_PROGRAM_NAME]: {\n\t\t\tsrc: DEFAULT_VERT_SHADER_SOURCE,\n\t\t\tcompiledShaders: {},\n\t\t},\n\t\t[SEGMENT_PROGRAM_NAME]: {\n\t\t\tsrc: SEGMENT_VERTEX_SHADER_SOURCE,\n\t\t\tcompiledShaders: {},\n\t\t},\n\t\t[LAYER_POINTS_PROGRAM_NAME]: {\n\t\t\tsrc: LAYER_POINTS_VERTEX_SHADER_SOURCE,\n\t\t\tcompiledShaders: {},\n\t\t},\n\t\t[LAYER_VECTOR_FIELD_PROGRAM_NAME]: {\n\t\t\tsrc: LAYER_VECTOR_FIELD_VERTEX_SHADER_SOURCE,\n\t\t\tcompiledShaders: {},\n\t\t},\n\t\t[LAYER_LINES_PROGRAM_NAME]: {\n\t\t\tsrc: LAYER_LINES_VERTEX_SHADER_SOURCE,\n\t\t\tcompiledShaders: {},\n\t\t},\n\t};\n\n\t/**\n\t * Flag to set GPUcomposer for verbose logging, defaults to false.\n\t */\n\tverboseLogging = false;\n\n\t/**\n\t * Variables for tracking fps of GPUComposer with tick().\n\t */\n\tprivate _lastTickTime?: number;\n\tprivate _lastTickFPS?: number\n\tprivate _numTicks = 0;\n\n\t/**\n\t * Create a GPUComposer from an existing THREE.WebGLRenderer that shares a single WebGL context.\n\t * @param renderer - Threejs WebGLRenderer.\n\t * @param params - GPUComposer parameters.\n\t * @param params.glslVersion - Set the GLSL version to use, defaults to GLSL3 for WebGL2 contexts.\n\t * @param params.intPrecision - Set the global integer precision in shader programs.\n\t * @param params.floatPrecision - Set the global float precision in shader programs.\n\t * @param params.verboseLogging - Set the verbosity of GPUComposer logging (defaults to false).\n\t * @param params.errorCallback - Custom error handler, defaults to throwing an Error with message.\n\t * @returns \n\t */\n\t static initWithThreeRenderer(\n\t\trenderer: WebGLRenderer| WebGL1Renderer,\n\t\tparams?: {\n\t\t\tglslVersion?: GLSLVersion,\n\t\t\tintPrecision?: GLSLPrecision,\n\t\t\tfloatPrecision?: GLSLPrecision,\n\t\t\tverboseLogging?: boolean,\n\t\t\terrorCallback?: ErrorCallback,\n\t\t},\n\t) {\n\t\tconst composer = new GPUComposer(\n\t\t\t{\n\t\t\t\tfloatPrecision: renderer.capabilities.precision as GLSLPrecision,\n\t\t\t\tintPrecision: renderer.capabilities.precision as GLSLPrecision,\n\t\t\t\t...params,\n\t\t\t\tcanvas: renderer.domElement,\n\t\t\t\tcontext: renderer.getContext(),\n\t\t\t},\n\t\t);\n\t\t// Attach renderer.\n\t\t// @ts-ignore\n\t\tcomposer._threeRenderer = renderer;\n\t\treturn composer;\n\t}\n\n\t/**\n     * Create a GPUComposer.\n     * @param params - GPUComposer parameters.\n\t * @param params.canvas - HTMLCanvasElement associated with this GPUComposer (you must add to DOM yourself).\n\t * @param params.context - Pass in a WebGL context for the GPUcomposer to user.\n\t * @param params.contextID - Set the contextID to use when initing a new WebGL context.\n\t * @param params.contextAttributes - Options to pass to WebGL context on initialization (see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext for more information).\n\t * @param params.glslVersion - Set the GLSL version to use, defaults to GLSL3 for WebGL2 contexts.\n\t * @param params.intPrecision - Set the global integer precision in shader programs.\n\t * @param params.floatPrecision - Set the global float precision in shader programs.\n\t * @param params.verboseLogging - Set the verbosity of GPUComposer logging (defaults to false).\n\t * @param params.errorCallback - Custom error handler, defaults to throwing an Error with message.\n     */\n\tconstructor(\n\t\tparams: {\n\t\t\tcanvas: HTMLCanvasElement,\n\t\t\tcontext?: WebGLRenderingContext | WebGL2RenderingContext,\n\t\t\tcontextID?: typeof WEBGL2 | typeof WEBGL1 | typeof EXPERIMENTAL_WEBGL | typeof EXPERIMENTAL_WEBGL2 | string,\n\t\t\tcontextAttributes?: {\n\t\t\t\t[key: string]: any,\n\t\t\t},\n\t\t\tglslVersion?: GLSLVersion,\n\t\t\tintPrecision?: GLSLPrecision,\n\t\t\tfloatPrecision?: GLSLPrecision,\n\t\t\tverboseLogging?: boolean,\n\t\t\t// Optionally pass in an error callback in case we want to handle errors related to webgl support.\n\t\t\t// e.g. throw up a modal telling user this will not work on their device.\n\t\t\terrorCallback?: ErrorCallback,\n\t\t},\n\t) {\n\t\t// Check params.\n\t\tconst validKeys = ['canvas', 'context', 'contextID', 'contextAttributes', 'glslVersion', 'intPrecision', 'floatPrecision', 'verboseLogging', 'errorCallback'];\n\t\tconst requiredKeys = ['canvas'];\n\t\tconst keys = Object.keys(params);\n\t\tcheckValidKeys(keys, validKeys, 'GPUComposer(params)');\n\t\tcheckRequiredKeys(keys, requiredKeys, 'GPUComposer(params)');\n\n\t\tif (params.verboseLogging !== undefined) this.verboseLogging = params.verboseLogging;\n\n\t\t// Save callback in case we run into an error.\n\t\tconst self = this;\n\t\tthis._errorCallback = (message: string) => {\n\t\t\tif (self._errorState) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tself._errorState = true;\n\t\t\tparams.errorCallback ? params.errorCallback(message) : DEFAULT_ERROR_CALLBACK(message);\n\t\t}\n\n\t\tconst { canvas } = params;\n\t\tlet gl = params.context;\n\n\t\t// Init GL.\n\t\tif (!gl) {\n\t\t\t// Init a gl context if not passed in.\n\t\t\tif (params.contextID) {\n\t\t\t\tconst _gl = canvas.getContext(params.contextID, params.contextAttributes) as WebGLRenderingContext | null;\n\t\t\t\tif (!_gl) {\n\t\t\t\t\tconsole.warn(`Unable to initialize WebGL context with contextID: ${params.contextID}.`);\n\t\t\t\t} else {\n\t\t\t\t\tgl = _gl;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!gl) {\n\t\t\t\tconst _gl = canvas.getContext(WEBGL2, params.contextAttributes)  as WebGL2RenderingContext | null\n\t\t\t\t\t|| canvas.getContext(WEBGL1, params.contextAttributes)  as WebGLRenderingContext | null\n\t\t\t\t\t|| canvas.getContext(EXPERIMENTAL_WEBGL2, params.contextAttributes)  as WebGLRenderingContext | null\n\t\t\t\t\t|| canvas.getContext(EXPERIMENTAL_WEBGL, params.contextAttributes)  as WebGLRenderingContext | null;\n\t\t\t\tif (_gl) {\n\t\t\t\t\tgl = _gl;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!gl) {\n\t\t\t\tthis._errorCallback('Unable to initialize WebGL context.');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis.isWebGL2 = isWebGL2(gl);\n\t\tif (this.isWebGL2) {\n\t\t\tif (this.verboseLogging) console.log('Using WebGL 2.0 context.');\n\t\t} else {\n\t\t\tif (this.verboseLogging) console.log('Using WebGL 1.0 context.');\n\t\t}\n\t\tthis.gl = gl;\n\n\t\t// Save glsl version, default to 3 if using webgl2 context.\n\t\tlet glslVersion = params.glslVersion || (this.isWebGL2 ? GLSL3 : GLSL1);\n\t\tif (!this.isWebGL2 && glslVersion === GLSL3) {\n\t\t\tconsole.warn('GLSL3.x is incompatible with WebGL1.0 contexts, falling back to GLSL1.');\n\t\t\tglslVersion = GLSL1; // Fall back to GLSL1 in these cases.\n\t\t}\n\t\tthis.glslVersion = glslVersion;\n\n\t\t// Set default int/float precision.\n\t\tthis.intPrecision = params.intPrecision || PRECISION_HIGH_P;\n\t\tthis.floatPrecision = params.floatPrecision || PRECISION_HIGH_P;\n\n\t\t// GL setup.\n\t\t// Disable depth testing globally.\n\t\tgl.disable(gl.DEPTH_TEST);\n\t\t// Set unpack alignment to 1 so we can have textures of arbitrary dimensions.\n\t\t// https://stackoverflow.com/questions/51582282/error-when-creating-textures-in-webgl-with-the-rgb-format\n\t\tgl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\n\n\t\t// Unbind active buffer.\n\t\tif (this.isWebGL2) (gl as WebGL2RenderingContext).bindVertexArray(null);\n\t\telse {\n\t\t\tconst ext = getExtension(this, OES_VERTEX_ARRAY_OBJECT, true);\n\t\t\text.bindVertexArrayOES(null)\n\t\t}\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n\t\t// Canvas setup.\n\t\tthis.resize([canvas.clientWidth, canvas.clientHeight]);\n\n\t\tif (this.verboseLogging) {\n\t\t\t// Log number of textures available.\n\t\t\tconsole.log(`${this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS)} textures max.`);\n\t\t}\n\t}\n\n\tget canvas() {\n\t\treturn this.gl.canvas;\n\t}\n\n\t/**\n\t * Gets (and caches) generic set value programs for several input types.\n\t * Used for GPULayer.clear(), among other things.\n\t * @private\n\t */\n\t_setValueProgramForType(type: GPULayerType) {\n\t\tconst { _setValuePrograms } = this;\n\t\tconst key = uniformTypeForType(type, this.glslVersion);\n\t\tif (_setValuePrograms[key] === undefined) {\n\t\t\t_setValuePrograms[key] = setValueProgram(this, { type, value: [0, 0, 0, 0] });\n\t\t}\n\t\treturn _setValuePrograms[key]!;\n\t}\n\t/**\n\t * Gets (and caches) generic copy programs for several input types.\n\t * Used for partial rendering to output, among other things.\n\t * @private\n\t */\n\tprivate _copyProgramForType(type: GPULayerType) {\n\t\tconst { _copyPrograms } = this;\n\t\tconst key = uniformTypeForType(type, this.glslVersion);\n\t\tif (_copyPrograms[key] === undefined) {\n\t\t\t_copyPrograms[key] = copyProgram(this, { type });\n\t\t}\n\t\treturn _copyPrograms[key]!;\n\t}\n\t// /**\n\t//  * Gets (and caches) a generic color program for wrapped line segment rendering.\n\t//  * @private\n\t//  */\n\t// private _getWrappedLineColorProgram() {\n\t// \tif (this._wrappedLineColorProgram === undefined) {\n\t// \t\tthis._wrappedLineColorProgram = wrappedLineColorProgram({ composer: this });\n\t// \t}\n\t// \treturn this._wrappedLineColorProgram;\n\t// }\n\n\t/**\n\t * Init a buffer for vertex shader attributes.\n\t * @private\n\t */\n\tprivate _initVertexBuffer(\n\t\tdata: Float32Array,\n\t) {\n\t\tconst { _errorCallback, gl, isWebGL2 } = this;\n\t\t// Unbind any  VAOs.\n\t\tif (isWebGL2) (gl as WebGL2RenderingContext).bindVertexArray(null);\n\t\telse {\n\t\t\tconst ext = getExtension(this, OES_VERTEX_ARRAY_OBJECT, true);\n\t\t\text.bindVertexArrayOES(null)\n\t\t}\n\t\tconst buffer = gl.createBuffer();\n\t\tif (!buffer) {\n\t\t\t_errorCallback('Unable to allocate gl buffer.');\n\t\t\treturn;\n\t\t}\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t// Add buffer data.\n\t\tgl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);\n\t\treturn buffer;\n\t}\n\t/**\n\t * Get (and cache) positions buffer for rendering full screen quads.\n\t * @private\n\t */\n\t_getQuadPositionsBuffer() {\n\t\tif (this._quadPositionsBuffer === undefined) {\n\t\t\tconst fsQuadPositions = new Float32Array([ -1, -1, 1, -1, -1, 1, 1, 1 ]);\n\t\t\tthis._quadPositionsBuffer = this._initVertexBuffer(fsQuadPositions)!;\n\t\t}\n\t\treturn this._quadPositionsBuffer!;\n\t}\n\t/**\n\t * Get (and cache) positions buffer for rendering lines on boundary.\n\t * @private\n\t */\n\tprivate _getBoundaryPositionsBuffer() {\n\t\tif (this._boundaryPositionsBuffer === undefined) {\n\t\t\tconst boundaryPositions = new Float32Array([ -1, -1, 1, -1, 1, 1, -1, 1, -1, -1 ]);\n\t\t\tthis._boundaryPositionsBuffer = this._initVertexBuffer(boundaryPositions)!;\n\t\t}\n\t\treturn this._boundaryPositionsBuffer!;\n\t}\n\t/**\n\t * Get (and cache) positions buffer for rendering circle with various numbers of segments.\n\t * @private\n\t */\n\tprivate _getCirclePositionsBuffer(numSegments: number) {\n\t\tconst { _circlePositionsBuffer } = this;\n\t\tif (_circlePositionsBuffer[numSegments] == undefined) {\n\t\t\tconst unitCirclePoints = [0, 0];\n\t\t\tfor (let i = 0; i < numSegments; i++) {\n\t\t\t\tunitCirclePoints.push(\n\t\t\t\t\tMath.cos(2 * Math.PI * i / numSegments),\n\t\t\t\t\tMath.sin(2 * Math.PI * i / numSegments),\n\t\t\t\t);\n\t\t\t}\n\t\t\t// Add one more point to close the loop on the triangle fan.\n\t\t\tunitCirclePoints.push(\n\t\t\t\tMath.cos(0),\n\t\t\t\tMath.sin(0),\n\t\t\t);\n\t\t\tconst circlePositions = new Float32Array(unitCirclePoints);\n\t\t\tconst buffer = this._initVertexBuffer(circlePositions)!;\n\t\t\t_circlePositionsBuffer[numSegments] = buffer;\n\t\t}\n\t\treturn _circlePositionsBuffer[numSegments];\n\t}\n\n\t/**\n\t * Used internally, see GPULayer.clone() for public API.\n\t * @private\n\t */\n\t_cloneGPULayer(gpuLayer: GPULayer, name?: string) {\n\t\tconst dimensions = gpuLayer.is1D() ? gpuLayer.length : [gpuLayer.width, gpuLayer.height];\n\n\t\tconst clone = new GPULayer(this, {\n\t\t\tname: name || `${gpuLayer.name}-clone`,\n\t\t\tdimensions,\n\t\t\ttype: gpuLayer.type,\n\t\t\tnumComponents: gpuLayer.numComponents,\n\t\t\tfilter: gpuLayer.filter,\n\t\t\twrapX: gpuLayer.wrapX,\n\t\t\twrapY: gpuLayer.wrapY,\n\t\t\tnumBuffers: gpuLayer.numBuffers,\n\t\t\tclearValue: gpuLayer.clearValue,\n\t\t});\n\n\t\t// Copy current state with several draw calls.\n\t\tconst copyProgram = this._copyProgramForType(gpuLayer.type);\n\t\t// Set bufferIndex = gpuLayer.numBuffers - 1.\n\t\tfor (let i = 0; i < gpuLayer.numBuffers - 1; i++ ){\n\t\t\tclone.incrementBufferIndex();\n\t\t}\n\t\tfor (let i = 0; i < gpuLayer.numBuffers; i++) {\n\t\t\tthis.step({\n\t\t\t\tprogram: copyProgram,\n\t\t\t\tinput: gpuLayer.getStateAtIndex(i),\n\t\t\t\toutput: clone,\n\t\t\t});\n\t\t}\n\t\t// Increment clone's buffer index until it is identical to the original layer.\n\t\tfor (let i = -1; i < gpuLayer.bufferIndex; i++ ){\n\t\t\tclone.incrementBufferIndex();\n\t\t}\n\n\t\treturn clone;\n\t}\n\n\t/**\n\t * Gets (and caches) vertex shaders based on shader source code and compile time constants.\n\t * Tries to minimize the number of new vertex shaders that must be compiled.\n\t * @private\n\t */\n\t _getVertexShader(\n\t\tname: PROGRAM_NAME_INTERNAL,\n\t\tvertexID: string,\n\t\tvertexCompileConstants: CompileTimeConstants,\n\t\tprogramName: string,\n\t) {\n\t\tconst {\n\t\t\t_errorCallback,\n\t\t\t_vertexShaders,\n\t\t\tgl,\n\t\t\tglslVersion,\n\t\t\tintPrecision,\n\t\t\tfloatPrecision,\n\t\t} = this;\n\t\tconst { compiledShaders, src } = _vertexShaders[name];\n\t\tif (vertexID === '') vertexID = '_default';\n\t\tif (compiledShaders[vertexID] === undefined) {\n\t\t\t// Compile a vertex shader (this only happens once for each possible vertex shader across all GPUPrograms).\n\t\t\tif (src === '') {\n\t\t\t\tthrow new Error(`Error compiling GPUProgram \"${programName}\": no source for vertex shader with name \"${name}\".`);\n\t\t\t}\n\t\t\tconst preprocessedSrc = preprocessVertexShader(src, glslVersion);\n\t\t\tconst shader = compileShader(\n\t\t\t\tgl,\n\t\t\t\tglslVersion,\n\t\t\t\tintPrecision,\n\t\t\t\tfloatPrecision,\n\t\t\t\tpreprocessedSrc,\n\t\t\t\tgl.VERTEX_SHADER,\n\t\t\t\tprogramName,\n\t\t\t\t_errorCallback,\n\t\t\t\tvertexCompileConstants,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\tif (!shader) {\n\t\t\t\t_errorCallback(`Unable to compile \"${name}${vertexID}\" vertex shader for GPUProgram \"${programName}\".`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Save the results so this does not have to be repeated.\n\t\t\tcompiledShaders[vertexID] = shader;\n\t\t}\n\t\treturn compiledShaders[vertexID];\n\t}\n\n\t/**\n\t * Notify the GPUComposer that the canvas should change size.\n\t * @param dimensions - The new [width, height] to resize to.\n\t */\n\tresize(dimensions: [number, number]) {\n\t\tconst { canvas } = this;\n\t\tconst [width, height] = dimensions;\n\t\t// Set correct canvas pixel size.\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/By_example/Canvas_size_and_WebGL\n\t\tcanvas.width = width;\n\t\tcanvas.height = height;\n\t\t// Save dimensions.\n\t\tthis._width = width;\n\t\tthis._height = height;\n\t};\n\n\t/**\n\t * Set inputs and outputs in preparation for draw call.\n\t * @private\n\t */\n\tprivate _drawSetup(\n\t\tgpuProgram: GPUProgram,\n\t\tprogramName: PROGRAM_NAME_INTERNAL,\n\t\tvertexCompileConstants: CompileTimeConstants,\n\t\tfullscreenRender: boolean,\n\t\tinput?: (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t\toutput?: GPULayer | GPULayer[],\n\t) {\n\t\tconst { gl, _threeRenderer, isWebGL2 } = this;\n\n\t\t// Unbind VAO for threejs compatibility.\n\t\tif (_threeRenderer) {\n\t\t\tif (isWebGL2) (gl as WebGL2RenderingContext).bindVertexArray(null);\n\t\t\telse {\n\t\t\t\tconst ext = getExtension(this, OES_VERTEX_ARRAY_OBJECT, true);\n\t\t\t\text.bindVertexArrayOES(null)\n\t\t\t}\n\t\t}\n\n\t\t// CAUTION: the order of these next few lines is important.\n\n\t\t// Get a shallow copy of current textures.\n\t\t// This line must come before this._setOutputLayer() as it depends on current internal state.\n\t\tconst inputTextures: GPULayerState[] = [];\n\t\tif (input) {\n\t\t\tif ((input as GPULayerState).layer) {\n\t\t\t\tinputTextures.push(input as GPULayerState);\n\t\t\t} else if (input.constructor === GPULayer) {\n\t\t\t\tinputTextures.push((input as GPULayer).currentState);\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < (input as (GPULayer | GPULayerState)[]).length; i++) {\n\t\t\t\t\tconst layer = (input as (GPULayer | GPULayerState)[])[i];\n\t\t\t\t\tinputTextures.push((layer as GPULayer).currentState ? (layer as GPULayer).currentState : layer as GPULayerState);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst program = gpuProgram._getProgramWithName(programName, vertexCompileConstants, inputTextures)!;\n\n\t\t// Set output framebuffer.\n\t\t// This may modify WebGL internal state.\n\t\tthis._setOutputLayer(gpuProgram.name, fullscreenRender, input, output);\n\n\t\t// Set current program.\n\t\t// Must do this before calling gpuProgram._setInternalFragmentUniforms(program, inputTextures);\n\t\tgl.useProgram(program);\n\n\t\t// Set input textures.\n\t\tfor (let i = 0; i < inputTextures.length; i++) {\n\t\t\tgl.activeTexture(gl.TEXTURE0 + i);\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, inputTextures[i].texture);\n\t\t}\n\t\tgpuProgram._setInternalFragmentUniforms(program, inputTextures);\n\t\treturn program;\n\t}\n\t/**\n\t * Set blend mode for draw call.\n\t * @private\n\t */\n\tprivate _setBlendMode(blendAlpha?: boolean) {\n\t\tconst { gl } = this;\n\t\tif (blendAlpha) {\n\t\t\tgl.enable(gl.BLEND);\n\t\t\tgl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\t\t}\n\t}\n\t/**\n\t * Add GPULayer to inputs if needed.\n\t * @private\n\t */\n\tprivate _addLayerToInputs(\n\t\tlayer: GPULayer,\n\t\tinput?:  (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t) {\n\t\t// Add layer to end of input if needed.\n\t\t// Do this with no mutations.\n\t\tif (input === undefined) {\n\t\t\treturn [layer];\n\t\t}\n\t\tif (isArray(input)) {\n\t\t\t// Return input with layer added if needed.\n\t\t\tif (indexOfLayerInArray(layer, (input as (GPULayer | GPULayerState)[])) >= 0) {\n\t\t\t\treturn input  as (GPULayer | GPULayerState)[];\n\t\t\t}\n\t\t\treturn [...(input as (GPULayer | GPULayerState)[]), layer];\n\t\t}\n\t\tif (input === layer || (input as GPULayerState).layer === layer) {\n\t\t\treturn [input as GPULayerState];\n\t\t}\n\t\treturn [(input as GPULayer | GPULayerState), layer];\n\t}\n\t/**\n\t * Copy data from input to output.\n\t * This is used when rendering to part of output state (not fullscreen quad).\n\t * @private\n\t */\n\tprivate _passThroughLayerDataFromInputToOutput(state: GPULayer) {\n\t\t// TODO: figure out the fastest way to copy a texture.\n\t\tconst copyProgram = this._copyProgramForType(state._internalType);\n\t\tthis.step({\n\t\t\tprogram: copyProgram,\n\t\t\tinput: state,\n\t\t\toutput: state,\n\t\t});\n\t}\n\t/**\n\t * Set output for draw command.\n\t * @private\n\t */\n\tprivate _setOutputLayer(\n\t\tprogramName: string,\n\t\tfullscreenRender: boolean,\n\t\tinput?: (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t\toutput?: GPULayer | GPULayer[], // Undefined renders to screen.\n\t) {\n\t\tconst { gl, isWebGL2 } = this;\n\n\t\t// Render to screen.\n\t\tif (!output) {\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\t\t// Resize viewport.\n\t\t\tconst { _width, _height } = this;\n\t\t\tgl.viewport(0, 0, _width, _height);\n\t\t\treturn;\n\t\t}\n\n\t\tconst outputArray = (isArray(output) ? output : [output]) as GPULayer[];\n\n\t\tfor (let i = 0, numOutputs = outputArray.length; i < numOutputs; i++) {\n\t\t\tconst outputLayer = outputArray[i];\n\t\t\t// Check if output is same as one of input layers.\n\t\t\tif (input && ((input === output || (input as GPULayerState).layer === output) ||\n\t\t\t\t(isArray(input) && indexOfLayerInArray(outputLayer, input as (GPULayer | GPULayerState)[]) >= 0))) {\n\t\t\t\tif (outputLayer.numBuffers === 1) {\n\t\t\t\t\tthrow new Error('Cannot use same buffer for input and output of a program. Try increasing the number of buffers in your output layer to at least 2 so you can render to nextState using currentState as an input.');\n\t\t\t\t}\n\t\t\t\tif (fullscreenRender) {\n\t\t\t\t\t// Render and increment buffer.\n\t\t\t\t\toutputLayer._prepareForWrite(true);\n\t\t\t\t} else {\n\t\t\t\t\t// Pass input texture through to output.\n\t\t\t\t\tthis._passThroughLayerDataFromInputToOutput(outputLayer);\n\t\t\t\t\t// Render to output without incrementing buffer.\n\t\t\t\t\toutputLayer._prepareForWrite(false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (fullscreenRender) {\n\t\t\t\t\t// Render and increment buffer.\n\t\t\t\t\toutputLayer._prepareForWrite(true);\n\t\t\t\t} else {\n\t\t\t\t\t// If we are doing a sneaky thing with a swapped texture and are\n\t\t\t\t\t// only rendering part of the screen, we may need to add a copy operation.\n\t\t\t\t\tif (outputLayer._usingTextureOverrideForCurrentBuffer()) {\n\t\t\t\t\t\tthis._passThroughLayerDataFromInputToOutput(outputLayer);\n\t\t\t\t\t}\n\t\t\t\t\toutputLayer._prepareForWrite(false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Bind framebuffer.\n\t\tconst layer0 = outputArray[0];\n\t\tlet additionalTextures: WebGLTexture[] | undefined = undefined;\n\t\tconst drawBuffers = [gl.COLOR_ATTACHMENT0];\n\t\tif (outputArray.length > 1) {\n\t\t\tadditionalTextures = [];\n\t\t\tfor (let i = 1, numOutputs = outputArray.length; i < numOutputs; i++) {\n\t\t\t\tadditionalTextures.push(outputArray[i]._currentTexture);\n\t\t\t\tdrawBuffers.push(gl.COLOR_ATTACHMENT0 + i);\n\t\t\t}\n\t\t}\n\t\tbindFrameBuffer(this, layer0, layer0._currentTexture, additionalTextures);\n\t\t// Tell WebGL to draw to output textures.\n\t\tif (isWebGL2) {\n\t\t\t(gl as WebGL2RenderingContext).drawBuffers(drawBuffers);\n\t\t}\n\t\t// Resize viewport.\n\t\tconst { width, height } = this._widthHeightForOutput(programName, output);\n\t\tgl.viewport(0, 0, width, height);\n\t};\n\t/**\n\t * Set vertex shader attribute.\n\t * @private\n\t */\n\tprivate _setVertexAttribute(program: WebGLProgram, name: string, size: number, programName: string) {\n\t\tconst { gl, _vertexAttributeLocations, _enabledVertexAttributes } = this;\n\t\t// Enable vertex attribute array.\n\t\tlet locations = _vertexAttributeLocations[name];\n\t\tlet location;\n\t\tif (!locations) {\n\t\t\tlocations = new WeakMap<WebGLProgram, number>();\n\t\t\t_vertexAttributeLocations[name] = locations;\n\t\t} else {\n\t\t// \tlocation = locations.get(program);\n\t\t}\n\t\tif (location === undefined) {\n\t\t\tlocation = gl.getAttribLocation(program, name);\n\t\t\tif (location < 0) {\n\t\t\t\tthrow new Error(`Unable to find vertex attribute \"${name}\" in program \"${programName}\".`);\n\t\t\t}\n\t\t\t// Cache attribute location.\n\t\t\tlocations.set(program, location);\n\t\t}\n\n\t\t// INT types not supported for attributes in WebGL1.\n\t\t// We're only really using INT vertex attributes for WebGL1 cases anyway,\n\t\t// because WebGL1 does not support gl_VertexID.\n\t\t// Use FLOAT rather than SHORT bc FLOAT covers more INT range.\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer\n\t\tgl.vertexAttribPointer(location, size, gl.FLOAT, false, 0, 0);\n\t\t// Enable the attribute.\n\t\tgl.enableVertexAttribArray(location);\n\t\t_enabledVertexAttributes[location] = true;\n\t}\n\tprivate _disableVertexAttributes() {\n\t\tconst { _enabledVertexAttributes, gl } = this;\n\t\tconst locations = Object.keys(_enabledVertexAttributes) as any as number[];\n\t\tfor (let i = 0, numAttributes = locations.length; i < numAttributes; i++) {\n\t\t\tconst location = locations[i];\n\t\t\tif (_enabledVertexAttributes[location]) {\n\t\t\t\tgl.disableVertexAttribArray(location);\n\t\t\t\tdelete _enabledVertexAttributes[location];\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Set vertex shader position attribute.\n\t * @private\n\t */\n\t_setPositionAttribute(program: WebGLProgram, programName: string) {\n\t\tthis._setVertexAttribute(program, 'a_gpuio_position', 2, programName);\n\t}\n\t/**\n\t * Set vertex shader index attribute.\n\t * @private\n\t */\n\tprivate _setIndexAttribute(program: WebGLProgram, programName: string) {\n\t\tthis._setVertexAttribute(program, 'a_gpuio_index', 1, programName);\n\t}\n\t/**\n\t * Set vertex shader uv attribute.\n\t * @private\n\t */\n\tprivate _setUVAttribute(program: WebGLProgram, programName: string) {\n\t\tthis._setVertexAttribute(program, 'a_gpuio_uv', 2, programName);\n\t}\n\n\tprivate _widthHeightForOutput(programName: string, output?: GPULayer | GPULayer[]) {\n\t\tif (isArray(output)) {\n\t\t\t// Check that all outputs have the same size.\n\t\t\tconst firstOutput = (output as GPULayer[])[0];\n\t\t\tconst width = firstOutput ? firstOutput.width : this._width;\n\t\t\tconst height = firstOutput ? firstOutput.height : this._height;\n\t\t\tfor (let i = 1, numOutputs = (output as GPULayer[]).length; i < numOutputs; i++) {\n\t\t\t\tconst nextOutput = (output as GPULayer[])[i];\n\t\t\t\tif (nextOutput.width !== width || nextOutput.height !== height) {\n\t\t\t\t\tthrow new Error(`Output GPULayers must have the same dimensions, got dimensions [${width}, ${height}] and [${nextOutput.width}, ${nextOutput.height}] for program \"${programName}\".`);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn { width, height };\n\t\t}\n\t\tconst width = output ? (output as GPULayer).width : this._width;\n\t\tconst height = output ? (output as GPULayer).height : this._height;\n\t\treturn { width, height};\n\t}\n\n\t/**\n\t * Call stepping/drawing function once for each output.\n\t * This is required when attempting to draw to multiple outputs using GLSL1.\n\t */\n\tprivate _iterateOverOutputsIfNeeded(params: any, methodName: string) {\n\t\tif (params.output && isArray(params.output) && this.glslVersion === GLSL1) {\n\t\t\tfor (let i = 0, numOutputs = (params.output as GPULayer[]).length; i < numOutputs; i++) {\n\t\t\t\t(this[methodName as keyof this] as any)({\n\t\t\t\t\t...params,\n\t\t\t\t\tprogram: i === 0 ? params.program : params.program._childPrograms![i - 1],\n\t\t\t\t\toutput: (params.output as GPULayer[])[i],\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate _drawFinish(params: {\n\t\tblendAlpha?: boolean,\n\t}) {\n\t\tconst { gl } = this;\n\t\t// Reset WebGL state.\n\t\tif (params.blendAlpha) gl.disable(gl.BLEND);\n\t\t// this._disableVertexAttributes();\n\t}\n\n\t/**\n\t * Step GPUProgram entire fullscreen quad.\n\t * @param params - Step parameters.\n\t * @param params.program - GPUProgram to run.\n\t * @param params.input - Input GPULayers to GPUProgram.\n\t * @param params.output - Output GPULayer, will draw to screen if undefined.\n\t * @param params.blendAlpha - Blend mode for draw, defaults to false.\n\t * @returns \n\t */\n\tstep(\n\t\tparams: {\n\t\t\tprogram: GPUProgram,\n\t\t\tinput?:  (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t\t\toutput?: GPULayer | GPULayer[], // Undefined renders to screen.\n\t\t\tblendAlpha?: boolean,\n\t\t},\n\t) {\n\t\t// Check params.\n\t\tconst validKeys = ['program', 'input', 'output', 'blendAlpha'];\n\t\tconst requiredKeys = ['program'];\n\t\tconst keys = Object.keys(params);\n\t\tcheckValidKeys(keys, validKeys, 'GPUComposer.step(params)');\n\t\tcheckRequiredKeys(keys, requiredKeys, 'GPUComposer.step(params)');\n\n\t\tif (this._iterateOverOutputsIfNeeded(params, 'step')) return;\n\t\tconst { gl, _errorState } = this;\n\t\tconst { program, input, output } = params;\n\n\t\tif (_errorState) return;\n\n\t\t// Do setup - this must come first.\n\t\tconst glProgram = this._drawSetup(program, DEFAULT_PROGRAM_NAME, {}, true, input, output);\n\n\t\t// Update uniforms and buffers.\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_scale', [1, 1], FLOAT);\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_translation', [0, 0], FLOAT);\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._getQuadPositionsBuffer());\n\t\tthis._setPositionAttribute(glProgram, program.name);\n\n\t\t// Draw.\n\t\tthis._setBlendMode(params.blendAlpha);\n\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\t\tthis._drawFinish(params)\n\t}\n\n\t/**\n\t * Step GPUProgram only for a 1px strip of pixels along the boundary.\n\t * @param params - Step parameters.\n\t * @param params.program - GPUProgram to run.\n\t * @param params.input - Input GPULayers to GPUProgram.\n\t * @param params.output - Output GPULayer, will draw to screen if undefined.\n\t * @param params.edges - Specify which edges to step, defaults to stepping entire boundary.\n\t * @param params.blendAlpha - Blend mode for draw, defaults to false.\n\t * @returns \n\t */\n\tstepBoundary(\n\t\tparams: {\n\t\t\tprogram: GPUProgram,\n\t\t\tinput?:  (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t\t\toutput?: GPULayer | GPULayer[], // Undefined renders to screen.\n\t\t\tedges?: BoundaryEdge | BoundaryEdge[];\n\t\t\tblendAlpha?: boolean,\n\t\t},\n\t) {\n\t\t// Check params.\n\t\tconst validKeys = ['program', 'input', 'output', 'edges', 'blendAlpha'];\n\t\tconst requiredKeys = ['program'];\n\t\tconst keys = Object.keys(params);\n\t\tcheckValidKeys(keys, validKeys, 'GPUComposer.stepBoundary(params)');\n\t\tcheckRequiredKeys(keys, requiredKeys, 'GPUComposer.stepBoundary(params)');\n\t\n\t\tif (this._iterateOverOutputsIfNeeded(params, 'stepBoundary')) return;\n\t\tconst { gl, _errorState } = this;\n\t\tconst { program, input, output } = params;\n\n\t\tif (_errorState) return;\n\n\t\tconst { width, height } = this._widthHeightForOutput(program.name, output);\n\n\t\t// Do setup - this must come first.\n\t\tconst glProgram = this._drawSetup(program, DEFAULT_PROGRAM_NAME, {}, false, input, output);\n\n\t\t// Update uniforms and buffers.\n\t\t// Frame needs to be offset and scaled so that all four sides are in viewport.\n\t\tconst onePx = [ 1 / width, 1 / height];\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_scale', [1 - onePx[0], 1 - onePx[1]], FLOAT);\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_translation', onePx, FLOAT);\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._getBoundaryPositionsBuffer());\n\t\tthis._setPositionAttribute(glProgram, program.name);\n\n\t\t// Draw.\n\t\tthis._setBlendMode(params.blendAlpha);\n\t\tif (params.edges) {\n\t\t\tlet { edges } = params;\n\t\t\tif (!isArray(edges)) edges = [edges as BoundaryEdge];\n\t\t\tfor (let i = 0, numEdges = edges.length; i < numEdges; i++) {\n\t\t\t\t// TODO: do this in one draw call.\n\t\t\t\tconst edge = edges[i];\n\t\t\t\tif (edge === BOUNDARY_LEFT) {\n\t\t\t\t\tgl.drawArrays(gl.LINES, 3, 2);\n\t\t\t\t}\n\t\t\t\tif (edge === BOUNDARY_RIGHT) {\n\t\t\t\t\tgl.drawArrays(gl.LINES, 1, 2);\n\t\t\t\t}\n\t\t\t\tif (edge === BOUNDARY_TOP) {\n\t\t\t\t\tgl.drawArrays(gl.LINES, 2, 2);\n\t\t\t\t}\n\t\t\t\tif (edge === BOUNDARY_BOTTOM) {\n\t\t\t\t\tgl.drawArrays(gl.LINES, 0, 2);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tgl.drawArrays(gl.LINE_LOOP, 0, 4);\n\t\t}\n\t\tthis._drawFinish(params);\n\t}\n\n\t/**\n\t * Step GPUProgram for all but a 1px strip of pixels along the boundary.\n\t * @param params - Step parameters.\n\t * @param params.program - GPUProgram to run.\n\t * @param params.input - Input GPULayers to GPUProgram.\n\t * @param params.output - Output GPULayer, will draw to screen if undefined.\n\t * @param params.blendAlpha - Blend mode for draw, defaults to false.\n\t * @returns \n\t */\n\tstepNonBoundary(\n\t\tparams: {\n\t\t\tprogram: GPUProgram,\n\t\t\tinput?:  (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t\t\toutput?: GPULayer | GPULayer[], // Undefined renders to screen.\n\t\t\tblendAlpha?: boolean,\n\t\t},\n\t) {\n\t\t// Check params.\n\t\tconst validKeys = ['program', 'input', 'output', 'blendAlpha'];\n\t\tconst requiredKeys = ['program'];\n\t\tconst keys = Object.keys(params);\n\t\tcheckValidKeys(keys, validKeys, 'GPUComposer.stepNonBoundary(params)');\n\t\tcheckRequiredKeys(keys, requiredKeys, 'GPUComposer.stepNonBoundary(params)');\n\n\t\tif (this._iterateOverOutputsIfNeeded(params, 'stepNonBoundary')) return;\n\t\tconst { gl, _errorState } = this;\n\t\tconst { program, input, output } = params;\n\n\t\tif (_errorState) return;\n\n\t\tconst { width, height } = this._widthHeightForOutput(program.name, output);\n\n\t\t// Do setup - this must come first.\n\t\tconst glProgram = this._drawSetup(program, DEFAULT_PROGRAM_NAME, {}, false, input, output);\n\n\t\t// Update uniforms and buffers.\n\t\tconst onePx = [ 1 / width, 1 / height];\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_scale', [1 - 2 * onePx[0], 1 - 2 * onePx[1]], FLOAT);\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_translation', onePx, FLOAT);\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._getQuadPositionsBuffer());\n\t\tthis._setPositionAttribute(glProgram, program.name);\n\t\t\n\t\t// Draw.\n\t\tthis._setBlendMode(params.blendAlpha);\n\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\t\tthis._drawFinish(params);\n\t}\n\n\t/**\n\t * Step GPUProgram inside a circular spot.  This is useful for touch interactions.\n\t * @param params - Step parameters.\n\t * @param params.program - GPUProgram to run.\n\t * @param params.position - Position of center of circle.\n\t * @param params.diameter - Circle diameter in pixels.\n\t * @param params.useOutputScale - If true position and diameter are scaled relative to the output dimensions, else they are scaled relative to the current canvas size, defaults to false.\n\t * @param params.input - Input GPULayers to GPUProgram.\n\t * @param params.output - Output GPULayer, will draw to screen if undefined.\n\t * @param params.numSegments - Number of segments in circle, defaults to 18.\n\t * @param params.blendAlpha - Blend mode for draw, defaults to false.\n\t * @returns \n\t */\n\tstepCircle(\n\t\tparams: {\n\t\t\tprogram: GPUProgram,\n\t\t\tposition: number[], // Position is in units of pixels.\n\t\t\tdiameter: number, // Diameter is in units of pixels.\n\t\t\tuseOutputScale?: boolean,\n\t\t\tinput?:  (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t\t\toutput?: GPULayer | GPULayer[], // Undefined renders to screen.\n\t\t\tnumSegments?: number,\n\t\t\tblendAlpha?: boolean,\n\t\t},\n\t) {\n\t\t// Check params.\n\t\tconst validKeys = ['program', 'position', 'diameter', 'useOutputScale', 'input', 'output', 'numSegments', 'blendAlpha'];\n\t\tconst requiredKeys = ['program', 'position', 'diameter'];\n\t\tconst keys = Object.keys(params);\n\t\tcheckValidKeys(keys, validKeys, 'GPUComposer.stepCircle(params)');\n\t\tcheckRequiredKeys(keys, requiredKeys, 'GPUComposer.stepCircle(params)');\n\n\t\tif (this._iterateOverOutputsIfNeeded(params, 'stepCircle')) return;\n\t\tconst { gl, _errorState } = this;\n\t\tconst { program, position, diameter, input, output } = params;\n\n\t\tif (_errorState) return;\n\n\t\tlet width = this._width;\n\t\tlet height = this._height;\n\t\tif (params.useOutputScale) {\n\t\t\t({ width, height } = this._widthHeightForOutput(program.name, output));\n\t\t}\n\n\t\t// Do setup - this must come first.\n\t\tconst glProgram = this._drawSetup(program, DEFAULT_PROGRAM_NAME, {}, false, input, output);\n\n\t\t// Update uniforms and buffers.\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_scale', [diameter / width, diameter / height], FLOAT);\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_translation', [2 * position[0] / width - 1, 2 * position[1] / height - 1], FLOAT);\n\t\tconst numSegments = params.numSegments ? params.numSegments : DEFAULT_CIRCLE_NUM_SEGMENTS;\n\t\tif (numSegments < 3) {\n\t\t\tthrow new Error(`numSegments for GPUComposer.stepCircle must be greater than 2, got ${numSegments}.`);\n\t\t}\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._getCirclePositionsBuffer(numSegments));\n\t\tthis._setPositionAttribute(glProgram, program.name);\n\t\t\n\t\t// Draw.\n\t\tthis._setBlendMode(params.blendAlpha);\n\t\tgl.drawArrays(gl.TRIANGLE_FAN, 0, numSegments + 2);\t\n\t\tthis._drawFinish(params);\n\t}\n\n\t/**\n\t * Step GPUProgram inside a line segment (rounded end caps available).\n\t * This is useful for touch interactions during pointermove.\n\t * @param params - Step parameters.\n\t * @param params.program - GPUProgram to run.\n\t * @param params.position1 - Position of one end of segment.\n\t * @param params.position2 - Position of the other end of segment.\n\t * @param params.thickness - Thickness in pixels.\n\t * @param params.useOutputScale - If true position and thickness are scaled relative to the output dimensions, else they are scaled relative to the current canvas size, defaults to false.\n\t * @param params.input - Input GPULayers to GPUProgram.\n\t * @param params.output - Output GPULayer, will draw to screen if undefined.\n\t * @param params.endCaps - Flag to draw with rounded end caps, defaults to false.\n\t * @param params.numCapSegments - Number of segments in rounded end caps, defaults to 9, must be divisible by 3.\n\t * @param params.blendAlpha - Blend mode for draw, defaults to false.\n\t * @returns \n\t */\n\tstepSegment(\n\t\tparams: {\n\t\t\tprogram: GPUProgram,\n\t\t\tposition1: number[], \n\t\t\tposition2: number[],\n\t\t\tthickness: number,\n\t\t\tuseOutputScale?: boolean,\n\t\t\tinput?:  (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t\t\toutput?: GPULayer | GPULayer[],\n\t\t\tendCaps?: boolean,\n\t\t\tnumCapSegments?: number,\n\t\t\tblendAlpha?: boolean,\n\t\t},\n\t) {\n\t\t// Check params.\n\t\tconst validKeys = ['program', 'position1', 'position2', 'thickness', 'useOutputScale', 'input', 'output', 'endCaps', 'numCapSegments', 'blendAlpha'];\n\t\tconst requiredKeys = ['program', 'position1', 'position2', 'thickness'];\n\t\tconst keys = Object.keys(params);\n\t\tcheckValidKeys(keys, validKeys, 'GPUComposer.stepSegment(params)');\n\t\tcheckRequiredKeys(keys, requiredKeys, 'GPUComposer.stepSegment(params)');\n\n\t\tif (this._iterateOverOutputsIfNeeded(params, 'stepSegment')) return;\n\t\tconst { gl, _errorState } = this;\n\t\tconst { program, position1, position2, thickness, input, output } = params;\n\n\t\tif (_errorState) return;\n\n\t\tlet width = this._width;\n\t\tlet height = this._height;\n\t\tif (params.useOutputScale) {\n\t\t\t({ width, height } = this._widthHeightForOutput(program.name, output));\n\t\t}\n\n\t\t// Do setup - this must come first.\n\t\tconst glProgram = this._drawSetup(program, SEGMENT_PROGRAM_NAME, {}, false, input, output);\n\n\t\t// Update uniforms and buffers.\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_halfThickness', thickness / 2, FLOAT);\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_scale', [2 / width, 2 / height], FLOAT);\n\t\tconst diffX = position1[0] - position2[0];\n\t\tconst diffY = position1[1] - position2[1];\n\t\tconst angle = Math.atan2(diffY, diffX);\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_rotation', angle, FLOAT);\n\t\tconst centerX = (position1[0] + position2[0]) / 2;\n\t\tconst centerY = (position1[1] + position2[1]) / 2;\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_translation', [2 * centerX / width - 1, 2 * centerY / height - 1], FLOAT);\n\t\tconst length = Math.sqrt(diffX * diffX + diffY * diffY);\n\t\t\n\t\tconst numSegments = params.numCapSegments ? params.numCapSegments * 2 : DEFAULT_CIRCLE_NUM_SEGMENTS;\n\t\tif (params.endCaps) {\n\t\t\tif (numSegments < 6 || numSegments % 6 !== 0) {\n\t\t\t\tthrow new Error(`numCapSegments for GPUComposer.stepSegment must be divisible by 3, got ${numSegments / 2}.`);\n\t\t\t}\n\t\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_length', length, FLOAT);\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._getCirclePositionsBuffer(numSegments));\n\t\t} else {\n\t\t\t// u_gpuio_length + thickness = length, bc we are stretching a square of size thickness into a rectangle.\n\t\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_length', length - thickness, FLOAT);\n\t\t\t// Use a rectangle in case of no caps.\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._getQuadPositionsBuffer());\n\t\t}\n\t\tthis._setPositionAttribute(glProgram, program.name);\n\t\t\n\t\t// Draw.\n\t\tthis._setBlendMode(params.blendAlpha);\n\t\tif (params.endCaps) {\n\t\t\tgl.drawArrays(gl.TRIANGLE_FAN, 0, numSegments + 2);\n\t\t} else {\n\t\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\t\t}\n\t\tthis._drawFinish(params);\n\t}\n\n\t/**\n\t * Step GPUProgram inside a rectangle.\n\t * @param params - Step parameters.\n\t * @param params.program - GPUProgram to run.\n\t * @param params.position - Position of one top corner of rectangle.\n\t * @param params.size - Width and height of rectangle.\n\t * @param params.useOutputScale - If true position and size are scaled relative to the output dimensions, else they are scaled relative to the current canvas size, defaults to false.\n\t * @param params.input - Input GPULayers to GPUProgram.\n\t * @param params.output - Output GPULayer, will draw to screen if undefined.\n\t * @param params.blendAlpha - Blend mode for draw, defaults to false.\n\t * @returns \n\t */\n\t stepRect(\n\t\tparams: {\n\t\t\tprogram: GPUProgram,\n\t\t\tposition: number[],\n\t\t\tsize: number[],\n\t\t\tuseOutputScale?: boolean,\n\t\t\tinput?:  (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t\t\toutput?: GPULayer | GPULayer[],\n\t\t\tblendAlpha?: boolean,\n\t\t},\n\t) {\n\t\t// Check params.\n\t\tconst validKeys = ['program', 'position', 'size', 'useOutputScale', 'input', 'output', 'blendAlpha'];\n\t\tconst requiredKeys = ['program', 'position', 'size'];\n\t\tconst keys = Object.keys(params);\n\t\tcheckValidKeys(keys, validKeys, 'GPUComposer.stepRect(params)');\n\t\tcheckRequiredKeys(keys, requiredKeys, 'GPUComposer.stepRect(params)');\n\n\t\tif (this._iterateOverOutputsIfNeeded(params, 'stepRect')) return;\n\t\tconst position1 = [params.position[0], params.position[1] + params.size[1] / 2];\n\t\tconst position2 = [params.position[0] + params.size[0], position1[1]];\n\t\tthis.stepSegment({\n\t\t\tprogram: params.program,\n\t\t\tposition1,\n\t\t\tposition2,\n\t\t\tthickness: params.size[1],\n\t\t\tuseOutputScale: params.useOutputScale,\n\t\t\tinput: params.input,\n\t\t\toutput: params.output,\n\t\t\tendCaps: false,\n\t\t\tblendAlpha: params.blendAlpha,\n\t\t});\n\t}\n\n\t// stepPolyline(\n\t// \tparams: {\n\t// \t\tprogram: GPUProgram,\n\t// \t\tpositions: number[][],\n\t// \t\tthickness: number, // Thickness of line is in units of pixels.\n\t// \t\tinput?: (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t// \t\toutput?: GPULayer | GPULayer[], // Undefined renders to screen.\n\t// \t\tcloseLoop?: boolean,\n\t// \t\tincludeUVs?: boolean,\n\t// \t\tincludeNormals?: boolean,\n\t// \t\tblendAlpha?: boolean,\n\t// \t},\n\t// ) {\n\n\t// // Check params.\n\t// const validKeys = ['program', 'positions', 'thickness', 'input', 'output', 'closeLoop', 'includeUVs', 'includeNormals', 'blendAlpha'];\n\t// const requiredKeys = ['program', 'positions', 'thickness'];\n\t// const keys = Object.keys(params);\n\t// checkValidKeys(keys, validKeys, 'GPUComposer.stepPolyline(params)');\n\t// checkRequiredKeys(keys, requiredKeys, 'GPUComposer.stepPolyline(params)');\n\n\t// \tif (this._iterateOverOutputsIfNeeded(params, 'stepPolyline')) return;\n\t// \tconst { gl, _width, _height, _errorState } = this;\n\t// \tconst { program, input, output } = params;\n\n\t// \tif (_errorState) return;\n\n\t// \tconst vertices = params.positions;\n\t// \tconst closeLoop = !!params.closeLoop;\n\t\t\n\t// \t// Offset vertices.\n\t// \tconst halfThickness = params.thickness / 2;\n\t// \tconst numPositions = closeLoop ? vertices.length * 4 + 2 : (vertices.length - 1) * 4;\n\t// \tconst positions = new Float32Array(2 * numPositions);\n\t// \tconst uvs = params.includeUVs ? new Float32Array(2 * numPositions) : undefined;\n\t// \tconst normals = params.includeNormals ? new Float32Array(2 * numPositions) : undefined;\n\n\t// \t// tmp arrays.\n\t// \tconst s1 = [0, 0];\n\t// \tconst s2 = [0, 0];\n\t// \tconst n1 = [0, 0];\n\t// \tconst n2 = [0, 0];\n\t// \tconst n3 = [0, 0];\n\t// \tfor (let i = 0; i < vertices.length; i++) {\n\t// \t\tif (!closeLoop && i === vertices.length - 1) continue;\n\t// \t\t// Vertices on this segment.\n\t// \t\tconst v1 = vertices[i];\n\t// \t\tconst v2 = vertices[(i + 1) % vertices.length];\n\t// \t\ts1[0] = v2[0] - v1[0];\n\t// \t\ts1[1] = v2[1] - v1[1];\n\t// \t\tconst length1 = Math.sqrt(s1[0] * s1[0] + s1[1] * s1[1]);\n\t// \t\tn1[0] = s1[1] / length1;\n\t// \t\tn1[1] = - s1[0] / length1;\n\n\t// \t\tconst index = i * 4 + 2;\n\n\t// \t\tif (!closeLoop && i === 0) {\n\t// \t\t\t// Add starting points to positions array.\n\t// \t\t\tpositions[0] = v1[0] + n1[0] * halfThickness;\n\t// \t\t\tpositions[1] = v1[1] + n1[1] * halfThickness;\n\t// \t\t\tpositions[2] = v1[0] - n1[0] * halfThickness;\n\t// \t\t\tpositions[3] = v1[1] - n1[1] * halfThickness;\n\t// \t\t\tif (uvs) {\n\t// \t\t\t\tuvs[0] = 0;\n\t// \t\t\t\tuvs[1] = 1;\n\t// \t\t\t\tuvs[2] = 0;\n\t// \t\t\t\tuvs[3] = 0;\n\t// \t\t\t}\n\t// \t\t\tif (normals) {\n\t// \t\t\t\tnormals[0] = n1[0];\n\t// \t\t\t\tnormals[1] = n1[1];\n\t// \t\t\t\tnormals[2] = n1[0];\n\t// \t\t\t\tnormals[3] = n1[1];\n\t// \t\t\t}\n\t// \t\t}\n\n\t// \t\tconst u = (i + 1) / (vertices.length - 1);\n\n\t// \t\t// Offset from v2.\n\t// \t\tpositions[2 * index] = v2[0] + n1[0] * halfThickness;\n\t// \t\tpositions[2 * index + 1] = v2[1] + n1[1] * halfThickness;\n\t// \t\tpositions[2 * index + 2] = v2[0] - n1[0] * halfThickness;\n\t// \t\tpositions[2 * index + 3] = v2[1] - n1[1] * halfThickness;\n\t// \t\tif (uvs) {\n\t// \t\t\tuvs[2 * index] = u;\n\t// \t\t\tuvs[2 * index + 1] = 1;\n\t// \t\t\tuvs[2 * index + 2] = u;\n\t// \t\t\tuvs[2 * index + 3] = 0;\n\t// \t\t}\n\t// \t\tif (normals) {\n\t// \t\t\tnormals[2 * index] = n1[0];\n\t// \t\t\tnormals[2 * index + 1] = n1[1];\n\t// \t\t\tnormals[2 * index + 2] = n1[0];\n\t// \t\t\tnormals[2 * index + 3] = n1[1];\n\t// \t\t}\n\n\t// \t\tif ((i < vertices.length - 2) || closeLoop) {\n\t// \t\t\t// Vertices on next segment.\n\t// \t\t\tconst v3 = vertices[(i + 1) % vertices.length];\n\t// \t\t\tconst v4 = vertices[(i + 2) % vertices.length];\n\t// \t\t\ts2[0] = v4[0] - v3[0];\n\t// \t\t\ts2[1] = v4[1] - v3[1];\n\t// \t\t\tconst length2 = Math.sqrt(s2[0] * s2[0] + s2[1] * s2[1]);\n\t// \t\t\tn2[0] = s2[1] / length2;\n\t// \t\t\tn2[1] = - s2[0] / length2;\n\n\t// \t\t\t// Offset from v3\n\t// \t\t\tpositions[2 * ((index + 2) % (4 * vertices.length))] = v3[0] + n2[0] * halfThickness;\n\t// \t\t\tpositions[2 * ((index + 2) % (4 * vertices.length)) + 1] = v3[1] + n2[1] * halfThickness;\n\t// \t\t\tpositions[2 * ((index + 2) % (4 * vertices.length)) + 2] = v3[0] - n2[0] * halfThickness;\n\t// \t\t\tpositions[2 * ((index + 2) % (4 * vertices.length)) + 3] = v3[1] - n2[1] * halfThickness;\n\t// \t\t\tif (uvs) {\n\t// \t\t\t\tuvs[2 * ((index + 2) % (4 * vertices.length))] = u;\n\t// \t\t\t\tuvs[2 * ((index + 2) % (4 * vertices.length)) + 1] = 1;\n\t// \t\t\t\tuvs[2 * ((index + 2) % (4 * vertices.length)) + 2] = u;\n\t// \t\t\t\tuvs[2 * ((index + 2) % (4 * vertices.length)) + 3] = 0;\n\t// \t\t\t}\n\t// \t\t\tif (normals) {\n\t// \t\t\t\tnormals[2 * ((index + 2) % (4 * vertices.length))] = n2[0];\n\t// \t\t\t\tnormals[2 * ((index + 2) % (4 * vertices.length)) + 1] = n2[1];\n\t// \t\t\t\tnormals[2 * ((index + 2) % (4 * vertices.length)) + 2] = n2[0];\n\t// \t\t\t\tnormals[2 * ((index + 2) % (4 * vertices.length)) + 3] = n2[1];\n\t// \t\t\t}\n\n\t// \t\t\t// Check the angle between adjacent segments.\n\t// \t\t\tconst cross = n1[0] * n2[1] - n1[1] * n2[0];\n\t// \t\t\tif (Math.abs(cross) < 1e-6) continue;\n\t// \t\t\tn3[0] = n1[0] + n2[0];\n\t// \t\t\tn3[1] = n1[1] + n2[1];\n\t// \t\t\tconst length3 = Math.sqrt(n3[0] * n3[0] + n3[1] * n3[1]);\n\t// \t\t\tn3[0] /= length3;\n\t// \t\t\tn3[1] /= length3;\n\t// \t\t\t// Make adjustments to positions.\n\t// \t\t\tconst angle = Math.acos(n1[0] * n2[0] + n1[1] * n2[1]);\n\t// \t\t\tconst offset = halfThickness / Math.cos(angle / 2);\n\t// \t\t\tif (cross < 0) {\n\t// \t\t\t\tpositions[2 * index] = v2[0] + n3[0] * offset;\n\t// \t\t\t\tpositions[2 * index + 1] = v2[1] + n3[1] * offset;\n\t// \t\t\t\tpositions[2 * ((index + 2) % (4 * vertices.length))] = positions[2 * index];\n\t// \t\t\t\tpositions[2 * ((index + 2) % (4 * vertices.length)) + 1] = positions[2 * index + 1];\n\t// \t\t\t} else {\n\t// \t\t\t\tpositions[2 * index + 2] = v2[0] - n3[0] * offset;\n\t// \t\t\t\tpositions[2 * index + 3] = v2[1] - n3[1] * offset;\n\t// \t\t\t\tpositions[2 * ((index + 2) % (4 * vertices.length)) + 2] = positions[2 * index + 2];\n\t// \t\t\t\tpositions[2 * ((index + 2) % (4 * vertices.length)) + 3] = positions[2 * index + 3];\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// \tif (closeLoop) {\n\t// \t\t// Duplicate starting points to end of positions array.\n\t// \t\tpositions[vertices.length * 8] = positions[0];\n\t// \t\tpositions[vertices.length * 8 + 1] = positions[1];\n\t// \t\tpositions[vertices.length * 8 + 2] = positions[2];\n\t// \t\tpositions[vertices.length * 8 + 3] = positions[3];\n\t// \t\tif (uvs) {\n\t// \t\t\tuvs[vertices.length * 8] = uvs[0];\n\t// \t\t\tuvs[vertices.length * 8 + 1] = uvs[1];\n\t// \t\t\tuvs[vertices.length * 8 + 2] = uvs[2];\n\t// \t\t\tuvs[vertices.length * 8 + 3] = uvs[3];\n\t// \t\t}\n\t// \t\tif (normals) {\n\t// \t\t\tnormals[vertices.length * 8] = normals[0];\n\t// \t\t\tnormals[vertices.length * 8 + 1] = normals[1];\n\t// \t\t\tnormals[vertices.length * 8 + 2] = normals[2];\n\t// \t\t\tnormals[vertices.length * 8 + 3] = normals[3];\n\t// \t\t}\n\t// \t}\n\n\t// \tconst vertexShaderOptions: CompileTimeConstants = {};\n\t// \tif (uvs) vertexShaderOptions[GPUIO_VS_UV_ATTRIBUTE] = '1';\n\t// \tif (normals) vertexShaderOptions[GPUIO_VS_NORMAL_ATTRIBUTE] = '1';\n\n\t// \t// Do setup - this must come first.\n\t// \tconst glProgram = this._drawSetup(program, DEFAULT_PROGRAM_NAME, vertexShaderOptions, false, input, output);\n\n\t// \t// Update uniforms and buffers.\n\t// \tprogram._setVertexUniform(glProgram, 'u_gpuio_scale', [2 / _width, 2 / _height], FLOAT);\n\t// \tprogram._setVertexUniform(glProgram, 'u_gpuio_translation', [-1, -1], FLOAT);\n\t// \t// Init positions buffer.\n\t// \tgl.bindBuffer(gl.ARRAY_BUFFER, this._initVertexBuffer(positions)!);\n\t// \tthis._setPositionAttribute(glProgram, program.name);\n\t// \tif (uvs) {\n\t// \t\t// Init uv buffer.\n\t// \t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._initVertexBuffer(uvs)!);\n\t// \t\tthis._setUVAttribute(glProgram, program.name);\n\t// \t}\n\t// \tif (normals) {\n\t// \t\t// Init normals buffer.\n\t// \t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._initVertexBuffer(normals)!);\n\t// \t\tthis._setVertexAttribute(glProgram, 'a_gpuio_normal', 2, program.name);\n\t// \t}\n\n\t// \t// Draw.\n\t// \tthis._setBlendMode(params.blendAlpha);\n\t// \tgl.drawArrays(gl.TRIANGLE_STRIP, 0, numPositions);\n\t// \tthis._drawFinish();\n\t// }\n\n\t// stepTriangleStrip(\n\t// \tparams: {\n\t// \t\tprogram: GPUProgram,\n\t// \t\tpositions: Float32Array,\n\t// \t\tnormals?: Float32Array,\n\t// \t\tuvs?: Float32Array,\n\t// \t\tinput?: (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t// \t\toutput?: GPULayer | GPULayer[], // Undefined renders to screen.\n\t// \t\tcount?: number,\n\t// \t\tblendAlpha?: boolean,\n\t// \t},\n\t// ) {\n\t// \tif (this._iterateOverOutputsIfNeeded(params, 'stepTriangleStrip')) return;\n\t// \tconst { gl, _width, _height, _errorState } = this;\n\t// \tconst { program, input, output, positions, uvs, normals } = params;\n\n\t// \tif (_errorState) return;\n\n\t// \tconst vertexShaderOptions: CompileTimeConstants = {};\n\t// \tif (uvs) vertexShaderOptions[GPUIO_VS_UV_ATTRIBUTE] = '1';\n\t// \tif (normals) vertexShaderOptions[GPUIO_VS_NORMAL_ATTRIBUTE] = '1';\n\n\t// \t// Do setup - this must come first.\n\t// \tconst glProgram = this._drawSetup(program, DEFAULT_PROGRAM_NAME, vertexShaderOptions, false, input, output);\n\n\t// \t// Update uniforms and buffers.\n\t// \tprogram._setVertexUniform(glProgram, 'u_gpuio_scale', [2 / _width, 2 / _height], FLOAT);\n\t// \tprogram._setVertexUniform(glProgram, 'u_gpuio_translation', [-1, -1], FLOAT);\n\t// \t// Init positions buffer.\n\t// \tgl.bindBuffer(gl.ARRAY_BUFFER, this._initVertexBuffer(positions)!);\n\t// \tthis._setPositionAttribute(glProgram, program.name);\n\t// \tif (uvs) {\n\t// \t\t// Init uv buffer.\n\t// \t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._initVertexBuffer(uvs)!);\n\t// \t\tthis._setUVAttribute(glProgram, program.name);\n\t// \t}\n\t// \tif (normals) {\n\t// \t\t// Init normals buffer.\n\t// \t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._initVertexBuffer(normals)!);\n\t// \t\tthis._setVertexAttribute(glProgram, 'a_gpuio_normal', 2, program.name);\n\t// \t}\n\n\t// \tconst count = params.count ? params.count : positions.length / 2;\n\n\t// \t// Draw.\n\t// \tthis._setBlendMode(params.blendAlpha);\n\t// \tgl.drawArrays(gl.TRIANGLE_STRIP, 0, count);\n\t// \tthis._drawFinish();\n\t// }\n\n\t// stepLines(params: {\n\t// \tprogram: GPUProgram,\n\t// \tpositions: Float32Array,\n\t// \tindices?: Uint16Array | Uint32Array | Int16Array | Int32Array,\n\t// \tnormals?: Float32Array,\n\t// \tuvs?: Float32Array,\n\t// \tinput?: (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t// \toutput?: GPULayer | GPULayer[], // Undefined renders to screen.\n\t// \tcount?: number,\n\t// \tcloseLoop?: boolean,\n\t// \tblendAlpha?: boolean,\n\t// }) {\n\t// \tconst { gl, _width, _height, _errorState } = this;\n\t// \tconst { indices, uvs, normals, input, output, program } = params;\n\n\t// \tif (_errorState) return;\n\n\t// \t// Check that params are valid.\n\t// \tif (params.closeLoop && indices) {\n\t// \t\tthrow new Error(`GPUComposer.stepLines() can't be called with closeLoop == true and indices.`);\n\t// \t}\n\n\t// \tconst vertexShaderOptions: CompileTimeConstants = {};\n\t// \tif (uvs) vertexShaderOptions[GPUIO_VS_UV_ATTRIBUTE] = '1';\n\t// \tif (normals) vertexShaderOptions[GPUIO_VS_NORMAL_ATTRIBUTE] = '1';\n\n\t// \t// Do setup - this must come first.\n\t// \tconst glProgram = this._drawSetup(program, DEFAULT_PROGRAM_NAME, vertexShaderOptions, false, input, output);\n\n\t// \tconst count = params.count ? params.count : (indices ? indices.length : (params.positions.length / 2));\n\n\t// \t// Update uniforms and buffers.\n\t// \tprogram._setVertexUniform(glProgram, 'u_gpuio_scale', [2 / _width, 2 / _height], FLOAT);\n\t// \tprogram._setVertexUniform(glProgram, 'u_gpuio_translation', [-1, -1], FLOAT);\n\t// \tif (indices) {\n\t// \t\t// Reorder positions array to match indices.\n\t// \t\tconst positions = new Float32Array(2 * count);\n\t// \t\tfor (let i = 0; i < count; i++) {\n\t// \t\t\tconst index = indices[i];\n\t// \t\t\tpositions[2 * i] = params.positions[2 * index];\n\t// \t\t\tpositions[2 * i + 1] = params.positions[2 * index + 1];\n\t// \t\t}\n\t// \t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._initVertexBuffer(positions)!);\n\t// \t} else {\n\t// \t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._initVertexBuffer(params.positions)!);\n\t// \t}\n\t// \tthis._setPositionAttribute(glProgram, program.name);\n\t// \tif (uvs) {\n\t// \t\t// Init uv buffer.\n\t// \t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._initVertexBuffer(uvs)!);\n\t// \t\tthis._setUVAttribute(glProgram, program.name);\n\t// \t}\n\t// \tif (normals) {\n\t// \t\t// Init normals buffer.\n\t// \t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._initVertexBuffer(normals)!);\n\t// \t\tthis._setVertexAttribute(glProgram, 'a_gpuio_normal', 2, program.name);\n\t// \t}\n\n\t// \t// Draw.\n\t// \tthis._setBlendMode(params.blendAlpha);\n\t// \tif (params.indices) {\n\t// \t\tgl.drawArrays(gl.LINES, 0, count);\n\t// \t} else {\n\t// \t\tif (params.closeLoop) {\n\t// \t\t\tgl.drawArrays(gl.LINE_LOOP, 0, count);\n\t// \t\t} else {\n\t// \t\t\tgl.drawArrays(gl.LINE_STRIP, 0, count);\n\t// \t\t}\n\t// \t}\n\t// \tthis._drawFinish(params);\n\t// }\n\n\t/**\n\t * Draw the contents of a GPULayer as points.  This assumes the components of the GPULayer have the form [xPosition, yPosition] or [xPosition, yPosition, xOffset, yOffset].\n\t * @param params - Draw parameters.\n\t * @param params.layer - GPULayer containing position data.\n\t * @param params.program - GPUProgram to run, defaults to drawing points in red.\n\t * @param params.input - Input GPULayers for GPUProgram.\n\t * @param params.output - Output GPULayer, will draw to screen if undefined.\n\t * @param params.pointSize - Pixel size of points.\n\t * @param params.count - How many points to draw, defaults to positions.length.\n\t * @param params.color - (If no program passed in) RGB color in range [0, 1] to draw points.\n\t * @param params.wrapX - Wrap points positions in X, defaults to false.\n\t * @param params.wrapY - Wrap points positions in Y, defaults to false.\n\t * @param params.blendAlpha - Blend mode for draw, defaults to false.\n\t * @returns \n\t */\n\tdrawLayerAsPoints(\n\t\tparams: {\n\t\t\tlayer: GPULayer, // Positions in units of pixels.\n\t\t\tprogram?: GPUProgram,\n\t\t\tinput?: (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t\t\toutput?: GPULayer | GPULayer[],\n\t\t\tpointSize?: number,\n\t\t\tcount?: number,\n\t\t\tcolor?: number[],\n\t\t\twrapX?: boolean,\n\t\t\twrapY?: boolean,\n\t\t\tblendAlpha?: boolean,\n\t\t},\n\t) {\n\t\tconst validKeys = ['layer', 'program', 'input', 'output', 'pointSize', 'count', 'color', 'wrapX', 'wrapY', 'blendAlpha'];\n\t\tconst requiredKeys = ['layer'];\n\t\tconst keys = Object.keys(params);\n\t\tcheckValidKeys(keys, validKeys, 'GPUComposer.drawLayerAsPoints(params)');\n\t\tcheckRequiredKeys(keys, requiredKeys, 'GPUComposer.drawLayerAsPoints(params)');\n\n\t\tif (this._iterateOverOutputsIfNeeded(params, 'drawLayerAsPoints')) return;\n\t\tconst { gl, _pointIndexArray, _width, _height, glslVersion, _errorState } = this;\n\t\tconst { layer, output } = params;\n\n\t\tif (_errorState) return;\n\n\t\t// Check that numPoints is valid.\n\t\tif (layer.numComponents !== 2 && layer.numComponents !== 4) {\n\t\t\tthrow new Error(`GPUComposer.drawLayerAsPoints() must be passed a position GPULayer with either 2 or 4 components, got position GPULayer \"${layer.name}\" with ${layer.numComponents} components.`)\n\t\t}\n\t\tif (glslVersion === GLSL1 && layer.width * layer.height > MAX_FLOAT_INT) {\n\t\t\tconsole.warn(`Points positions array length: ${layer.width * layer.height} is longer than what is supported by GLSL1 : ${MAX_FLOAT_INT}, expect index overflow.`);\n\t\t}\n\t\tconst { length } = layer;\n\t\tconst count = params.count || length;\n\t\tif (count > length) {\n\t\t\tthrow new Error(`Invalid count ${count} for position GPULayer of length ${length}.`);\n\t\t}\n\n\t\tlet program = params.program;\n\t\tif (program === undefined) {\n\t\t\tprogram = this._setValueProgramForType(FLOAT);\n\t\t\tconst color = params.color || [1, 0, 0]; // Default of red.\n\t\t\tif (color.length !== 3) throw new Error(`color parameter must have length 3, got ${JSON.stringify(color)}.`);\n\t\t\tprogram.setUniform('u_value', [...color, 1], FLOAT);\n\t\t}\n\n\t\t// Add positions to end of input if needed.\n\t\tconst input = this._addLayerToInputs(layer, params.input);\n\n\t\tconst vertexShaderOptions: CompileTimeConstants = {};\n\t\t// Tell whether we are using an absolute position (2 components),\n\t\t// or position with accumulation buffer (4 components, better floating pt accuracy).\n\t\tif (layer.numComponents === 4) vertexShaderOptions[GPUIO_VS_POSITION_W_ACCUM] = '1';\n\t\tif (params.wrapX) vertexShaderOptions[GPUIO_VS_WRAP_X] = '1';\n\t\tif (params.wrapY) vertexShaderOptions[GPUIO_VS_WRAP_Y] = '1';\n\n\t\t// Do setup - this must come first.\n\t\tconst glProgram = this._drawSetup(program, LAYER_POINTS_PROGRAM_NAME, vertexShaderOptions, false, input, output);\n\n\t\t// Update uniforms and buffers.\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_positions', indexOfLayerInArray(layer, input), INT);\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_scale', [1 / _width, 1 / _height], FLOAT);\n\t\t// Set default pointSize.\n\t\tconst pointSize = params.pointSize || 1;\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_pointSize', pointSize, FLOAT);\n\t\tconst positionLayerDimensions = [layer.width, layer.height];\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_positionsDimensions', positionLayerDimensions, FLOAT);\n\t\t// We get this for free in GLSL3 with gl_VertexID.\n\t\tif (glslVersion === GLSL1) {\n\t\t\tif (this._pointIndexBuffer === undefined || (_pointIndexArray && _pointIndexArray.length < count)) {\n\t\t\t\t// Have to use float32 array bc int is not supported as a vertex attribute type.\n\t\t\t\tconst indices = initSequentialFloatArray(length);\n\t\t\t\tthis._pointIndexArray = indices;\n\t\t\t\tthis._pointIndexBuffer = this._initVertexBuffer(indices);\n\t\t\t}\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._pointIndexBuffer!);\n\t\t\tthis._setIndexAttribute(glProgram, program.name);\n\t\t}\n\n\t\t// Draw.\n\t\tthis._setBlendMode(params.blendAlpha);\n\t\tgl.drawArrays(gl.POINTS, 0, count);\n\t\tthis._drawFinish(params);\n\t}\n\n\t// drawLayerAsLines(\n\t// \tparams: {\n\t// \t\tpositions: GPULayer,\n\t// \t\tindices?: Float32Array | Uint16Array | Uint32Array | Int16Array | Int32Array,\n\t// \t\tprogram?: GPUProgram,\n\t// \t\tinput?: (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t// \t\toutput?: GPULayer | GPULayer[],\n\t// \t\tcount?: number,\n\t// \t\tcolor?: number[]\n\t// \t\twrapX?: boolean,\n\t// \t\twrapY?: boolean,\n\t// \t\tcloseLoop?: boolean,\n\t// \t\tblendAlpha?: boolean,\n\t// \t},\n\t// ) {\n\t// const validKeys = ['positions', 'indices', 'program', 'input', 'output', 'count', 'color', 'wrapX', 'wrapY', 'closeLoop', 'blendAlpha'];\n\t// const requiredKeys = ['positions'];\n\t// const keys = Object.keys(params);\n\t// checkValidKeys(keys, validKeys, 'GPUComposer.drawLayerAsLines(params)');\n\t// checkRequiredKeys(keys, requiredKeys, 'GPUComposer.drawLayerAsLines(params)');\n\t// \tif (this._iterateOverOutputsIfNeeded(params, 'drawLayerAsLines')) return;\n\t// \tconst { gl, _width, _height, glslVersion, _errorState } = this;\n\t// \tconst { positions, output } = params;\n\n\t// \tif (_errorState) return;\n\n\t// \t// Check that positions is valid.\n\t// \tif (positions.numComponents !== 2 && positions.numComponents !== 4) {\n\t// \t\tthrow new Error(`GPUComposer.drawLayerAsLines() must be passed a position GPULayer with either 2 or 4 components, got position GPULayer \"${positions.name}\" with ${positions.numComponents} components.`)\n\t// \t}\n\t// \t// Check that params are valid.\n\t// \tif (params.closeLoop && params.indices) {\n\t// \t\tthrow new Error(`GPUComposer.drawLayerAsLines() can't be called with closeLoop == true and indices.`);\n\t// \t}\n\n\t// \tlet program = params.program;\n\t// \tif (program === undefined) {\n\t// \t\tprogram = params.wrapX || params.wrapY ? this._getWrappedLineColorProgram() : this._setValueProgramForType(FLOAT);;\n\t// \t\tconst color = params.color || [1, 0, 0]; // Default to red.\n\t//\t\tif (color.length !== 3) throw new Error(`color parameter must have length 3, got ${JSON.stringify(color)}.`);\n\t// \t\tprogram.setUniform('u_value', [...color, 1], FLOAT);\n\t// \t}\n\n\t// \t// Add positionLayer to end of input if needed.\n\t// \tconst input = this._addLayerToInputs(positions, params.input);\n\n\t// \tconst vertexShaderOptions: CompileTimeConstants = {};\n\t// \t// Tell whether we are using an absolute position (2 components),\n\t// \t// or position with accumulation buffer (4 components, better floating pt accuracy).\n\t// \tif (positions.numComponents === 4) vertexShaderOptions[GPUIO_VS_POSITION_W_ACCUM] = '1';\n\t// \tif (params.wrapX) vertexShaderOptions[GPUIO_VS_WRAP_X] = '1';\n\t// \tif (params.wrapY) vertexShaderOptions[GPUIO_VS_WRAP_Y] = '1';\n\t// \tvertexShaderOptions[GPUIO_VS_INDEXED_POSITIONS] = params.indices ? '1': '0';\n\n\t// \t// Do setup - this must come first.\n\t// \tconst glProgram = this._drawSetup(program, LAYER_LINES_PROGRAM_NAME, vertexShaderOptions, false, input, output);\n\n\t// \tconst count = params.count ? params.count : (params.indices ? params.indices.length : positions.length);\n\n\t// \t// Update uniforms and buffers.\n\t// \tprogram._setVertexUniform(glProgram, 'u_gpuio_positions', indexOfLayerInArray(positions, input), INT);\n\t// \tprogram._setVertexUniform(glProgram, 'u_gpuio_scale', [1 / _width, 1 / _height], FLOAT);\n\t// \tconst positionLayerDimensions = [positions.width, positions.height];\n\t// \tprogram._setVertexUniform(glProgram, 'u_gpuio_positionsDimensions', positionLayerDimensions, FLOAT);\n\t// \t// Only pass in indices if we are using indexed pts or GLSL1, otherwise we get this for free from gl_VertexID.\n\t// \tif (params.indices || glslVersion === GLSL1) {\n\t// \t\t// TODO: cache indexArray if no indices passed in.\n\t// \t\tconst indices = params.indices ? params.indices : initSequentialFloatArray(count);\n\t// \t\tif (this._indexedLinesIndexBuffer === undefined) {\n\t// \t\t\t// Have to use float32 array bc int is not supported as a vertex attribute type.\n\t// \t\t\tlet floatArray: Float32Array;\n\t// \t\t\tif (indices.constructor !== Float32Array) {\n\t// \t\t\t\t// Have to use float32 array bc int is not supported as a vertex attribute type.\n\t// \t\t\t\tfloatArray = new Float32Array(indices.length);\n\t// \t\t\t\tfor (let i = 0; i < count; i++) {\n\t// \t\t\t\t\tfloatArray[i] = indices[i];\n\t// \t\t\t\t}\n\t// \t\t\t\tconsole.warn(`Converting indices array of type ${indices.constructor} to Float32Array in GPUComposer.drawIndexedLines for WebGL compatibility, you may want to use a Float32Array to store this information so the conversion is not required.`);\n\t// \t\t\t} else {\n\t// \t\t\t\tfloatArray = indices as Float32Array;\n\t// \t\t\t}\n\t// \t\t\tthis._indexedLinesIndexBuffer = this._initVertexBuffer(floatArray);\n\t// \t\t} else {\n\t// \t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._indexedLinesIndexBuffer!);\n\t// \t\t\t// Copy buffer data.\n\t// \t\t\tgl.bufferData(gl.ARRAY_BUFFER, indices, gl.STATIC_DRAW);\n\t// \t\t}\n\t// \t\tthis._setIndexAttribute(glProgram, program.name);\n\t// \t}\n\n\t// \t// Draw.\n\t// \tthis._setBlendMode(params.blendAlpha);\n\t// \tif (params.indices) {\n\t// \t\tgl.drawArrays(gl.LINES, 0, count);\n\t// \t} else {\n\t// \t\tif (params.closeLoop) {\n\t// \t\t\tgl.drawArrays(gl.LINE_LOOP, 0, count);\n\t// \t\t} else {\n\t// \t\t\tgl.drawArrays(gl.LINE_STRIP, 0, count);\n\t// \t\t}\n\t// \t}\n\t// \tthis._drawFinish(params);\n\t// }\n\n\t/**\n\t * Draw the contents of a 2 component GPULayer as a vector field.\n\t * @param params - Draw parameters.\n\t * @param params.layer - GPULayer containing vector data.\n\t * @param params.program - GPUProgram to run, defaults to drawing vector lines in red.\n\t * @param params.input - Input GPULayers for GPUProgram.\n\t * @param params.output - Output GPULayer, will draw to screen if undefined.\n\t * @param params.vectorSpacing - Spacing between vectors, defaults to drawing a vector every 10 pixels.\n\t * @param params.vectorScale - Scale factor to apply to vector lengths.\n\t * @param params.color - (If no program passed in) RGB color in range [0, 1] to draw points.\n\t * @param params.blendAlpha - Blend mode for draw, defaults to false.\n\t * @returns \n\t */\n\tdrawLayerAsVectorField(\n\t\tparams: {\n\t\t\tlayer: GPULayer,\n\t\t\tprogram?: GPUProgram,\n\t\t\tinput?: (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t\t\toutput?: GPULayer | GPULayer[],\n\t\t\tvectorSpacing?: number,\n\t\t\tvectorScale?: number,\n\t\t\tcolor?: number[],\n\t\t\tblendAlpha?: boolean,\n\t\t},\n\t) {\n\t\tconst validKeys = ['layer', 'program', 'input', 'output', 'vectorSpacing', 'vectorScale', 'color', 'blendAlpha'];\n\t\tconst requiredKeys = ['layer'];\n\t\tconst keys = Object.keys(params);\n\t\tcheckValidKeys(keys, validKeys, 'GPUComposer.drawLayerAsVectorField(params)');\n\t\tcheckRequiredKeys(keys, requiredKeys, 'GPUComposer.drawLayerAsVectorField(params)');\n\n\t\tif (this._iterateOverOutputsIfNeeded(params, 'drawLayerAsVectorField')) return;\n\t\tconst { gl, _vectorFieldIndexArray, _width, _height, glslVersion, _errorState } = this;\n\t\tconst { layer, output } = params;\n\n\t\tif (_errorState) return;\n\n\t\t// Check that field is valid.\n\t\tif (layer.numComponents !== 2) {\n\t\t\tthrow new Error(`GPUComposer.drawLayerAsVectorField() must be passed a fieldLayer with 2 components, got fieldLayer \"${layer.name}\" with ${layer.numComponents} components.`)\n\t\t}\n\t\t// Check aspect ratio.\n\t\t// const dimensions = [vectorLayer.width, vectorLayer.height];\n\t\t// if (Math.abs(dimensions[0] / dimensions[1] - width / height) > 0.01) {\n\t\t// \tthrow new Error(`Invalid aspect ratio ${(dimensions[0] / dimensions[1]).toFixed(3)} vector GPULayer with dimensions [${dimensions[0]}, ${dimensions[1]}], expected ${(width / height).toFixed(3)}.`);\n\t\t// }\n\n\t\tlet program = params.program;\n\t\tif (program === undefined) {\n\t\t\tprogram = this._setValueProgramForType(FLOAT);;\n\t\t\tconst color = params.color || [1, 0, 0]; // Default to red.\n\t\t\tif (color.length !== 3) throw new Error(`color parameter must have length 3, got ${JSON.stringify(color)}.`);\n\t\t\tprogram.setUniform('u_value', [...color, 1], FLOAT);\n\t\t}\n\n\t\t// Add data to end of input if needed.\n\t\tconst input = this._addLayerToInputs(layer, params.input);\n\n\t\t// Do setup - this must come first.\n\t\tconst glProgram = this._drawSetup(program, LAYER_VECTOR_FIELD_PROGRAM_NAME, {}, false, input, output);\n\n\t\t// Update uniforms and buffers.\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_vectors', indexOfLayerInArray(layer, input), INT);\n\t\t// Set default scale.\n\t\tconst vectorScale = params.vectorScale || 1;\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_scale', [vectorScale / _width, vectorScale / _height], FLOAT);\n\t\tconst vectorSpacing = params.vectorSpacing || 10;\n\t\tconst spacedDimensions = [Math.floor(_width / vectorSpacing), Math.floor(_height / vectorSpacing)];\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_dimensions', spacedDimensions, FLOAT);\n\t\tconst length = 2 * spacedDimensions[0] * spacedDimensions[1];\n\t\t// We get this for free in GLSL3 with gl_VertexID.\n\t\tif (glslVersion === GLSL1) {\n\t\t\tif (this._vectorFieldIndexBuffer === undefined || (_vectorFieldIndexArray && _vectorFieldIndexArray.length < length)) {\n\t\t\t\t// Have to use float32 array bc int is not supported as a vertex attribute type.\n\t\t\t\tconst indices = initSequentialFloatArray(length);\n\t\t\t\tthis._vectorFieldIndexArray = indices;\n\t\t\t\tthis._vectorFieldIndexBuffer = this._initVertexBuffer(indices);\n\t\t\t}\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._vectorFieldIndexBuffer!);\n\t\t\tthis._setIndexAttribute(glProgram, program.name);\n\t\t}\n\n\t\t// Draw.\n\t\tthis._setBlendMode(params.blendAlpha);\n\t\tgl.drawArrays(gl.LINES, 0, length);\n\t\tthis._drawFinish(params);\n\t}\n\n\t/**\n\t * If this GPUComposer has been inited via GPUComposer.initWithThreeRenderer(), call resetThreeState() in render loop after performing any step or draw functions.\n\t */\n\tresetThreeState() {\n\t\tif (!this._threeRenderer) {\n\t\t\tthrow new Error(`Can't call resetThreeState() on a GPUComposer that was not inited with GPUComposer.initWithThreeRenderer().`);\n\t\t}\n\t\tconst { gl } = this;\n\t\t// Reset viewport.\n\t\tconst viewport = this._threeRenderer.getViewport(new ThreejsUtils.Vector4() as Vector4);\n\t\tgl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);\n\t\t// Unbind framebuffer (render to screen).\n\t\t// Reset threejs WebGL bindings and state, this also unbinds the framebuffer.\n\t\tthis._threeRenderer.resetState();\n\t}\n\n\t// TODO: params.callback is not generated in the docs.\n\t/**\n\t * Save the current state of the canvas to png.\n\t * @param params - PNG parameters.\n\t * @param params.filename - PNG filename (no extension).\n\t * @param params.dpi - PNG dpi (defaults to 72dpi).\n\t * @param params.callback - Optional callback when Blob is ready, default behavior saves the PNG using file-saver.\n\t*/\n\tsavePNG(params: {\n\t\tfilename?: string,\n\t\tdpi?: number,\n\t\tcallback?: (blob: Blob, filename: string) => void,\n\t} = {}) {\n\t\tconst validKeys = ['filename', 'dpi', 'callback'];\n\t\tconst keys = Object.keys(params);\n\t\tcheckValidKeys(keys, validKeys, 'GPUComposer.savePNG(params)');\n\n\t\tconst { canvas } = this;\n\t\tconst filename = params.filename || 'output';\n\t\tconst callback = params.callback || saveAs; // Default to saving the image with file-saver.\n\t\t// TODO: need to adjust the canvas size to get the correct px ratio from toBlob().\n\t\t// const ratio = window.devicePixelRatio || 1;\n\t\tcanvas.toBlob((blob) => {\n\t\t\tif (!blob) {\n\t\t\t\tconsole.warn(`Problem saving PNG, unable to init blob from canvas.`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (params.dpi) {\n\t\t\t\tchangeDpiBlob(blob, params.dpi).then((blob: Blob) => {\n\t\t\t\t\tcallback(blob, `${filename}.png`);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tcallback(blob, `${filename}.png`);\n\t\t\t}\n\t\t}, 'image/png');\n\t}\n\n\t/**\n\t * Call tick() from your render loop to measure the FPS of your application.\n\t * Internally, this does some low pass filtering to give consistent results.\n\t * @returns An Object containing the current fps of your application and the number of times tick() has been called.\n\t */\n\ttick(): { fps: number, numTicks: number} {\n\t\tthis._numTicks += 1;\n\t\tlet { _lastTickTime, _lastTickFPS } = this;\n\t\tconst currentTime = performance.now();\n\t\tthis._lastTickTime = currentTime;\n\t\tif (!_lastTickTime) {\n\t\t\treturn { fps: 0, numTicks: this._numTicks };\n\t\t}\n\t\tconst currentFPS = 1000 / (currentTime - _lastTickTime);\n\t\tif (!_lastTickFPS) _lastTickFPS = currentFPS;\n\t\t// Use a low pass filter to smooth out fps reading.\n\t\tconst factor = 0.9;\n\t\tconst fps =  Number.parseFloat((factor * _lastTickFPS + (1 - factor) * currentFPS).toFixed(1));\n\t\tthis._lastTickFPS = fps;\n\t\treturn {\n\t\t\tfps,\n\t\t\tnumTicks: this._numTicks,\n\t\t};\n\t}\n\n\t/**\n\t * Return the number of ticks of the simulation.\n\t * Use GPUComposer.tick() to increment this value on each animation cycle.\n\t */\n\tget numTicks() {\n\t\treturn this._numTicks;\n\t}\n\t\n\t/**\n\t * Deallocate GPUComposer instance and associated WebGL properties.\n\t */\n\tdispose() {\n\t\tconst { gl, verboseLogging } = this;\n\n\t\tif (verboseLogging) console.log(`Deallocating GPUComposer.`);\n\n\t\t// Delete buffers.\n\t\tif (this._quadPositionsBuffer) {\n\t\t\tgl.deleteBuffer(this._quadPositionsBuffer);\n\t\t\tdelete this._quadPositionsBuffer;\n\t\t}\n\t\tif (this._boundaryPositionsBuffer) {\n\t\t\tgl.deleteBuffer(this._boundaryPositionsBuffer);\n\t\t\tdelete this._boundaryPositionsBuffer;\n\t\t}\n\t\t(Object.keys(this._circlePositionsBuffer) as any as number[]).forEach(key => {\n\t\t\tgl.deleteBuffer(this._circlePositionsBuffer[key]);\n\t\t});\n\t\t// @ts-ignore\n\t\tdelete this._circlePositionsBuffer;\n\t\tdelete this._pointIndexArray;\n\t\tif (this._pointIndexBuffer) {\n\t\t\tgl.deleteBuffer(this._pointIndexBuffer);\n\t\t\tdelete this._pointIndexBuffer;\n\t\t}\n\t\tdelete this._vectorFieldIndexArray;\n\t\tif (this._vectorFieldIndexBuffer) {\n\t\t\tgl.deleteBuffer(this._vectorFieldIndexBuffer);\n\t\t\tdelete this._vectorFieldIndexBuffer;\n\t\t}\n\t\tif (this._indexedLinesIndexBuffer) {\n\t\t\tgl.deleteBuffer(this._indexedLinesIndexBuffer);\n\t\t\tdelete this._indexedLinesIndexBuffer;\n\t\t}\n\n\t\t// Delete vertex attribute locations.\n\t\tObject.keys(this._vertexAttributeLocations).forEach((key) => {\n\t\t\tdelete this._vertexAttributeLocations[key];\n\t\t});\n\t\t// @ts-ignore\n\t\tdelete this._vertexAttributeLocations;\n\t\t// @ts-ignore\n\t\tdelete this._enabledVertexAttributes;\n\n\t\t// Delete vertex shaders.\n\t\tObject.values(this._vertexShaders).forEach(({ compiledShaders })=> {\n\t\t\tObject.keys(compiledShaders).forEach(key => {\n\t\t\t\tgl.deleteShader(compiledShaders[key]);\n\t\t\t\tdelete compiledShaders[key];\n\t\t\t});\n\t\t});\n\t\t// @ts-ignore\n\t\tdelete this._vertexShaders;\n\t\t\n\t\t// Delete fragment shaders.\n\t\tObject.values(this._copyPrograms).forEach(program => {\n\t\t\tprogram.dispose();\n\t\t});\n\t\tObject.keys(this._copyPrograms).forEach(key => {\n\t\t\t// @ts-ignore\n\t\t\tdelete this._copyPrograms[key];\n\t\t});\n\t\t// @ts-ignore;\n\t\tdelete this._copyPrograms;\n\n\t\tObject.values(this._setValuePrograms).forEach(program => {\n\t\t\tprogram.dispose();\n\t\t});\n\t\tObject.keys(this._setValuePrograms).forEach(key => {\n\t\t\t// @ts-ignore\n\t\t\tdelete this._setValuePrograms[key];\n\t\t});\n\t\t// @ts-ignore;\n\t\tdelete this._setValuePrograms;\n\n\t\tthis._wrappedLineColorProgram?.dispose();\n\t\tdelete this._wrappedLineColorProgram;\n\n\t\t// @ts-ignore\n\t\tdelete this._threeRenderer;\n\t\t// @ts-ignore\n\t\tdelete this.gl;\n\t\t// @ts-ignore;\n\t\tdelete this.canvas;\n\t\t// GL context will be garbage collected by webgl.\n\t\t// @ts-ignore\n\t\tdelete this._errorCallback;\n\t\t// @ts-ignore\n\t\tdelete this._extensions;\n\n\t\t// Delete all other keys.\n\t\t// This is mostly for testing so we can be sure we've deallocated everything.\n\t\t// @ts-ignore;\n\t\tdelete this._errorState;\n\t\t// @ts-ignore;\n\t\tdelete this.verboseLogging;\n\t\t// @ts-ignore;\n\t\tdelete this._numTicks;\n\t\t// @ts-ignore;\n\t\tdelete this.isWebGL2;\n\t\t// @ts-ignore;\n\t\tdelete this.glslVersion;\n\t\t// @ts-ignore;\n\t\tdelete this.intPrecision;\n\t\t// @ts-ignore;\n\t\tdelete this.floatPrecision;\n\t\t// @ts-ignore;\n\t\tdelete this._width;\n\t\t// @ts-ignore;\n\t\tdelete this._height;\n\t}\n}","import { getFloat16 } from '@petamoriken/float16';\nimport type { Texture } from 'three';\nimport {\n\tisArray,\n\tisFiniteNumber,\n\tisObject,\n\tisPositiveInteger,\n\tisString,\n} from '@amandaghassaei/type-checks';\n// @ts-ignore\nimport { changeDpiBlob } from 'changedpi';\nimport { saveAs } from 'file-saver';\nimport type { GPUComposer } from './GPUComposer';\nimport {\n\tcheckRequiredKeys,\n\tcheckValidKeys,\n\tisValidClearValue,\n\tisValidDataType,\n\tisValidFilter,\n\tisValidImageFormat,\n\tisValidImageType,\n\tisValidWrap,\n} from './checks';\nimport {\n\tHALF_FLOAT,\n\tFLOAT,\n\tUNSIGNED_BYTE,\n\tBYTE,\n\tUNSIGNED_SHORT,\n\tSHORT,\n\tUNSIGNED_INT,\n\tINT,\n\tNEAREST,\n\tLINEAR,\n\tCLAMP_TO_EDGE,\n\tGPULayerArray,\n\tGPULayerFilter,\n\tGPULayerNumComponents,\n\tGPULayerType,\n\tGPULayerWrap,\n\tvalidFilters,\n\tvalidWraps,\n\tvalidDataTypes,\n\tGPULayerState,\n\tImageFormat,\n\tImageType,\n\tvalidImageFormats,\n\tvalidImageTypes,\n } from './constants';\nimport {\n\treadPixelsAsync,\n\treadyToRead,\n} from './utils';\nimport { disposeFramebuffers, bindFrameBuffer } from './framebuffers';\nimport { arrayConstructorForType } from './conversions';\n\nexport class GPULayer {\n\t// Keep a reference to GPUComposer.\n\tprivate readonly _composer: GPUComposer;\n\n\t/**\n\t * Name of GPULayer, used for error logging.\n\t */\n\treadonly name: string;\n\t/**\n\t * Data type represented by GPULayer.\n\t */\n\treadonly type: GPULayerType; // Input type passed in during setup.\n\t/**\n\t * Number of RGBA elements represented by each pixel in the GPULayer (1-4).\n\t */\n\treadonly numComponents: GPULayerNumComponents;\n\t/**\n\t * Interpolation filter for GPULayer, defaults to LINEAR for 2D FLOAT/HALF_FLOAT GPULayers, otherwise defaults to NEAREST.\n\t */\n\treadonly filter: GPULayerFilter;\n\t/**\n\t * Horizontal wrapping style for GPULayer, defaults to CLAMP_TO_EDGE.\n\t */\n\treadonly wrapX: GPULayerWrap;\n\t/**\n\t * Vertical wrapping style for GPULayer, defaults to CLAMP_TO_EDGE.\n\t */\n\treadonly wrapY: GPULayerWrap;\n\n\t// Value to set when clear() is called, defaults to zero.\n\t// Access with GPULayer.clearValue.\n\tprivate _clearValue: number | number[] = 0;\n\n\t// Each GPULayer may contain a number of buffers to store different instances of the state.\n\t// e.g [currentState, previousState]\n\tprivate _bufferIndex = 0;\n\treadonly numBuffers;\n\tprivate readonly _buffers: WebGLTexture[] = [];\n\n\t// Texture sizes.\n\tprivate _length?: number; // This is only used for 1D data layers, access with GPULayer.length.\n\tprivate _width: number; // Access with GPULayer.width.\n\tprivate _height: number; // Access with GPULayer.height.\n\n\t// GPULayer settings.\n\t// Due to variable browser support of WebGL features, \"internal\" variables may be different\n\t// from the parameter originally passed in.  These variables are set so that they match the original\n\t// parameter as best as possible, but fragment shader polyfills may be required.\n\t// All \"gl\" variables are used to initialize internal WebGLTexture.\n\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D\n\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter\n\t/**\n\t * @private\n\t */\n\treadonly _glInternalFormat: number;\n\t/**\n\t * @private\n\t */\n\treadonly _glFormat: number;\n\n\t/**\n\t * GPULayer._internalType corresponds to GPULayer.glType, but may be different from GPULayer.type.\n\t * @private\n\t */\n\treadonly _internalType: GPULayerType;\n\t/**\n\t * @private\n\t */\n\treadonly _glType: number;\n\n\t/**\n\t * Internally, GPULayer._glNumChannels may represent a larger number of channels than GPULayer.numComponents.\n\t * For example, writable RGB textures are not supported in WebGL2, must use RGBA instead.\n\t * @private\n\t */\n\treadonly _glNumChannels: number;\n\n\t/**\n\t * GPULayer._internalFilter corresponds to GPULayer.glFilter, may be different from GPULayer.filter.\n\t * @private\n\t */\n\treadonly _internalFilter: GPULayerFilter;\n\t/**\n\t * @private\n\t */\n\treadonly _glFilter: number;\n\n\t/**\n\t * GPULayer._internalWrapX corresponds to GPULayer.glWrapX, but may be different from GPULayer.wrapX.\n\t * @private\n\t */\n\treadonly _internalWrapX: GPULayerWrap;\n\t/**\n\t * @private\n\t */\n\treadonly _glWrapS: number;\n\n\t/**\n\t * GPULayer._internalWrapY corresponds to GPULayer.glWrapY, but may be different from GPULayer.wrapY.\n\t * @private\n\t */\n\treadonly _internalWrapY: GPULayerWrap;\n\t/**\n\t * @private\n\t */\n\treadonly _glWrapT: number;\n\t\n\t// Optimization so that \"copying\" can happen without draw calls by simply swapping WebGL textures between GPULayers.\n\t// This functionality is not currently active right now, but will be added back in later.\n\tprivate _textureOverrides?: (WebGLTexture | undefined)[];\n\n\t// Optimizations so we don't allocate many large arrays if getValues()is called multiple times.\n\tprivate _values?: GPULayerArray;\n\tprivate _valuesRaw?: Float32Array | Uint16Array | Uint32Array | Int32Array;\n\tprivate _valuesBufferView?: DataView;\n\n\t/**\n\t * Create a GPULayer from an image url.\n\t * @param composer - The current GPUComposer instance.\n\t * @param params  - GPULayer parameters.\n\t * @param params.name - Name of GPULayer, used for error logging.\n\t * @param params.url - URL of the image source.\n \t * @param params.type - Data type represented by GPULayer.\n\t * @param params.format - Image format, either RGB or RGBA.\n\t * @param params.filter - Interpolation filter for GPULayer, defaults to LINEAR for FLOAT/HALF_FLOAT Images, otherwise defaults to NEAREST.\n\t * @param params.wrapX - Horizontal wrapping style for GPULayer, defaults to CLAMP_TO_EDGE.\n\t * @param params.wrapY - Vertical wrapping style for GPULayer, defaults to CLAMP_TO_EDGE.\n\t */\n\tstatic async initFromImageURL(composer: GPUComposer,\n\t\tparams: {\n\t\t\tname: string,\n\t\t\turl: string,\n\t\t\ttype?: ImageType,\n\t\t\tformat?: ImageFormat,\n\t\t\tfilter?: GPULayerFilter,\n\t\t\twrapX?: GPULayerWrap,\n\t\t\twrapY?: GPULayerWrap,\n\t\t},\n\t) {\n\t\treturn new Promise<GPULayer>((resolve, reject) => {\n\t\t\tif (!params) {\n\t\t\t\tthrow new Error('Error initing GPULayer: must pass params to GPULayer.initFromImageURL(composer, params).');\n\t\t\t}\n\t\t\tif (!isObject(params)) {\n\t\t\t\tthrow new Error(`Error initing GPULayer: must pass valid params object to GPULayer.initFromImageURL(composer, params), got ${JSON.stringify(params)}.`);\n\t\t\t}\n\t\t\t// Check params.\n\t\t\tconst validKeys = ['name', 'url', 'filter', 'wrapX', 'wrapY', 'format', 'type'];\n\t\t\tconst requiredKeys = ['name', 'url'];\n\t\t\tconst keys = Object.keys(params);\n\t\t\tcheckValidKeys(keys, validKeys, 'GPULayer.initFromImageURL(composer, params)', params.name);\n\t\t\tcheckRequiredKeys(keys, requiredKeys, 'GPULayer.initFromImageURL(composer, params)', params.name);\n\n\t\t\tconst { url, name, filter, wrapX, wrapY, type, format } = params;\n\t\t\tif (!isString(url)) {\n\t\t\t\tthrow new Error(`Expected GPULayer.initFromImageURL params to have url of type string, got ${url} of type ${typeof url}.`)\n\t\t\t}\n\t\t\tif (type && !isValidImageType(type)) {\n\t\t\t\tthrow new Error(`Invalid type: \"${type}\" for GPULayer.initFromImageURL \"${name}\", must be one of ${JSON.stringify(validImageTypes)}.`)\n\t\t\t}\n\t\t\tif (format && !isValidImageFormat(format)) {\n\t\t\t\tthrow new Error(`Invalid format: \"${format}\" for GPULayer.initFromImageURL \"${name}\", must be one of ${JSON.stringify(validImageFormats)}.`)\n\t\t\t}\n\n\t\t\t// Init a layer to return, we will fill it when image has loaded.\n\t\t\tconst layer = new GPULayer(composer, {\n\t\t\t\tname,\n\t\t\t\ttype: type || FLOAT,\n\t\t\t\tfilter,\n\t\t\t\twrapX,\n\t\t\t\twrapY,\n\t\t\t\tnumComponents: format ? format.length as GPULayerNumComponents : 4,\n\t\t\t\tdimensions: [1, 1], // Init as 1 px to start.\n\t\t\t\tnumBuffers: 1,\n\t\t\t});\n\n\t\t\n\t\t\t// Load image.\n\t\t\tconst image = new Image();\n\t\t\timage.onload = () => {\n\t\t\t\tlayer.resize([image.width, image.height], image);\n\t\t\t\t// Callback when texture has loaded.\n\t\t\t\tresolve(layer);\n\t\t\t};\n\t\t\timage.onerror = (e) => {\n\t\t\t\treject(new Error(`Error loading image \"${name}\": ${e}`));\n\t\t\t}\n\t\t\timage.src = url;\n\t\t});\n\t}\n\n\t/**\n\t * Create a GPULayer.\n\t * @param composer - The current GPUComposer instance.\n\t * @param params  - GPULayer parameters.\n\t * @param params.name - Name of GPULayer, used for error logging.\n \t * @param params.type - Data type represented by GPULayer.\n\t * @param params.numComponents - Number of RGBA elements represented by each pixel in the GPULayer (1-4).\n\t * @param params.dimensions - Dimensions of 1D or 2D GPULayer.\n\t * @param params.filter - Interpolation filter for GPULayer, defaults to LINEAR for 2D FLOAT/HALF_FLOAT GPULayers, otherwise defaults to NEAREST.\n\t * @param params.wrapX - Horizontal wrapping style for GPULayer, defaults to CLAMP_TO_EDGE.\n\t * @param params.wrapY - Vertical wrapping style for GPULayer, defaults to CLAMP_TO_EDGE.\n\t * @param params.numBuffers - How may buffers to allocate, defaults to 1.  If you intend to use the current state of this GPULayer as an input to generate a new state, you will need at least 2 buffers.\n\t * @param params.clearValue - Value to write to GPULayer when GPULayer.clear() is called.\n\t * @param params.array - Array to initialize GPULayer.\n\t */\n\tconstructor(\n\t\tcomposer: GPUComposer,\n\t\tparams: {\n\t\t\tname: string,\n\t\t\ttype: GPULayerType,\n\t\t\tnumComponents: GPULayerNumComponents,\n\t\t\tdimensions: number | number[],\n\t\t\tarray?: GPULayerArray | number[],\n\t\t\tfilter?: GPULayerFilter,\n\t\t\twrapX?: GPULayerWrap,\n\t\t\twrapY?: GPULayerWrap,\n\t\t\tnumBuffers?: number,\n\t\t\tclearValue?: number | number[],\n\t\t},\n\t) {\n\t\t// Check constructor parameters.\n\t\tconst { name } = (params || {});\n\t\tif (!composer) {\n\t\t\tthrow new Error(`Error initing GPULayer \"${name}\": must pass GPUComposer instance to GPULayer(composer, params).`);\n\t\t}\n\t\tif (!params) {\n\t\t\tthrow new Error('Error initing GPULayer: must pass params to GPULayer(composer, params).');\n\t\t}\n\t\tif (!isObject(params)) {\n\t\t\tthrow new Error(`Error initing GPULayer: must pass valid params object to GPULayer(composer, params), got ${JSON.stringify(params)}.`);\n\t\t}\n\t\t// Check params keys.\n\t\tconst validKeys = ['name', 'type', 'numComponents', 'dimensions', 'filter', 'wrapX', 'wrapY', 'numBuffers', 'clearValue', 'array'];\n\t\tconst requiredKeys = ['name', 'type', 'numComponents', 'dimensions'];\n\t\tconst keys = Object.keys(params);\n\t\tcheckValidKeys(keys, validKeys, 'GPULayer(composer, params)', params.name);\n\t\tcheckRequiredKeys(keys, requiredKeys, 'GPULayer(composer, params)', params.name);\n\n\t\tconst { dimensions, type, numComponents } = params;\n\t\tconst { gl } = composer;\n\n\t\t// Save params.\n\t\tthis._composer = composer;\n\t\tthis.name = name;\n\n\t\t// numComponents must be between 1 and 4.\n\t\tif (!isPositiveInteger(numComponents) || numComponents > 4) {\n\t\t\tthrow new Error(`Invalid numComponents: ${JSON.stringify(numComponents)} for GPULayer \"${name}\", must be number in range [1-4].`);\n\t\t}\n\t\tthis.numComponents = numComponents;\n\n\t\t// Set dimensions, may be 1D or 2D.\n\t\tconst { length, width, height } = GPULayer.calcGPULayerSize(dimensions, name, composer.verboseLogging);\n\t\t// We already type checked length, width, and height in calcGPULayerSize.\n\t\tthis._length = length;\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\t// Set filtering - if we are processing a 1D array, default to NEAREST filtering.\n\t\t// Else default to LINEAR (interpolation) filtering for float types and NEAREST for integer types.\n\t\tconst defaultFilter = (length === undefined && (type === FLOAT || type == HALF_FLOAT)) ? LINEAR : NEAREST;\n\t\tconst filter = params.filter !== undefined ? params.filter : defaultFilter;\n\t\tif (!isValidFilter(filter)) {\n\t\t\tthrow new Error(`Invalid filter: ${JSON.stringify(filter)} for GPULayer \"${name}\", must be one of ${JSON.stringify(validFilters)}.`);\n\t\t}\n\t\t// Don't allow LINEAR filtering on integer types, it is not supported.\n\t\tif (filter === LINEAR && !(type === FLOAT || type == HALF_FLOAT)) {\n\t\t\tthrow new Error(`LINEAR filtering is not supported on integer types, please use NEAREST filtering for GPULayer \"${name}\" with type: ${type}.`);\n\t\t}\n\t\tthis.filter = filter;\n\n\t\t// Get wrap types, default to clamp to edge.\n\t\tconst wrapX = params.wrapX !== undefined ? params.wrapX : CLAMP_TO_EDGE;\n\t\tif (!isValidWrap(wrapX)) {\n\t\t\tthrow new Error(`Invalid wrapX: ${JSON.stringify(wrapX)} for GPULayer \"${name}\", must be one of ${JSON.stringify(validWraps)}.`);\n\t\t}\n\t\tthis.wrapX = wrapX;\n\t\tconst wrapY = params.wrapY !== undefined ? params.wrapY : CLAMP_TO_EDGE;\n\t\tif (!isValidWrap(wrapY)) {\n\t\t\tthrow new Error(`Invalid wrapY: ${JSON.stringify(wrapY)} for GPULayer \"${name}\", must be one of ${JSON.stringify(validWraps)}.`);\n\t\t}\n\t\tthis.wrapY = wrapY;\n\n\t\t// Set data type.\n\t\tif (!isValidDataType(type)) {\n\t\t\tthrow new Error(`Invalid type: ${JSON.stringify(type)} for GPULayer \"${name}\", must be one of ${JSON.stringify(validDataTypes)}.`);\n\t\t}\n\t\tthis.type = type;\n\t\tconst internalType = GPULayer.getGPULayerInternalType({\n\t\t\tcomposer,\n\t\t\ttype,\n\t\t\tname,\n\t\t});\n\t\tthis._internalType = internalType;\n\t\t// Set gl texture parameters.\n\t\tconst {\n\t\t\tglFormat,\n\t\t\tglInternalFormat,\n\t\t\tglType,\n\t\t\tglNumChannels,\n\t\t} = GPULayer.getGLTextureParameters({\n\t\t\tcomposer,\n\t\t\tname,\n\t\t\tnumComponents,\n\t\t\tinternalType,\n\t\t});\n\t\tthis._glInternalFormat = glInternalFormat;\n\t\tthis._glFormat = glFormat;\n\t\tthis._glType = glType;\n\t\tthis._glNumChannels = glNumChannels;\n\n\t\t// Set internal filtering/wrap types.\n\t\t// Make sure that we set filter BEFORE setting wrap.\n\t\tconst internalFilter = GPULayer.getGPULayerInternalFilter({ composer, filter, wrapX, wrapY, internalType, name });\n\t\tthis._internalFilter = internalFilter;\n\t\tthis._glFilter = gl[internalFilter];\n\t\tthis._internalWrapX = GPULayer.getGPULayerInternalWrap({ composer, wrap: wrapX, internalFilter, internalType, name });\n\t\tthis._glWrapS = gl[this._internalWrapX];\n\t\tthis._internalWrapY = GPULayer.getGPULayerInternalWrap({ composer, wrap: wrapY, internalFilter, internalType, name });\n\t\tthis._glWrapT = gl[this._internalWrapY];\n\n\t\t// Num buffers is the number of states to store for this data.\n\t\tconst numBuffers = params.numBuffers !== undefined ? params.numBuffers : 1;\n\t\tif (!isPositiveInteger(numBuffers)) {\n\t\t\tthrow new Error(`Invalid numBuffers: ${JSON.stringify(numBuffers)} for GPULayer \"${name}\", must be positive integer.`);\n\t\t}\n\t\tthis.numBuffers = numBuffers;\n\n\t\t// Wait until after type has been set to set clearValue.\n\t\tif (params.clearValue !== undefined) {\n\t\t\tthis.clearValue = params.clearValue; // Setter can only be called after this.numComponents has been set.\n\t\t}\n\n\t\tthis._initBuffers(params.array);\n\t}\n\n\t/**\n\t * The width of the GPULayer array.\n\t */\n\t get width() {\n\t\treturn this._width;\n\t}\n\n\t/**\n\t * The height of the GPULayer array.\n\t */\n\tget height() {\n\t\treturn this._height;\n\t}\n\n\t/**\n\t * The length of the GPULayer array (only available to 1D GPULayers).\n\t */\n\tget length() {\n\t\tif (!this._length) {\n\t\t\tthrow new Error(`Cannot access length on 2D GPULayer \"${this.name}\".`);\n\t\t}\n\t\treturn this._length;\n\t}\n\n\t/**\n\t * Returns whether the GPULayer was inited as a 1D array (rather than 2D).\n\t * @returns - true if GPULayer is 1D, else false.\n\t */\n\tis1D() {\n\t\treturn this._length !== undefined;\n\t}\n\n\t/**\n\t * Returns whether the GPULayer was inited as a 2D array (rather than 1D).\n\t * @returns - true if GPULayer is 2D, else false.\n\t */\n\tis2D() {\n\t\treturn !this.is1D();\n\t}\n\n\t/**\n\t * Test whether the current buffer index has override enabled.\n\t * @private\n\t */\n\t_usingTextureOverrideForCurrentBuffer() {\n\t\treturn !!(this._textureOverrides && this._textureOverrides[this.bufferIndex]);\n\t}\n\n\t// saveCurrentStateToGPULayer(layer: GPULayer) {\n\t// \t// A method for saving a copy of the current state without a draw call.\n\t// \t// Draw calls are expensive, this optimization helps.\n\t// \tif (this.numBuffers < 2) {\n\t// \t\tthrow new Error(`Can't call GPULayer.saveCurrentStateToGPULayer on GPULayer \"${this.name}\" with less than 2 buffers.`);\n\t// \t}\n\t// \t// Check that texture params are the same.\n\t// \tif (layer.glWrapS !== this.glWrapS || layer.glWrapT !== this.glWrapT ||\n\t// \t\tlayer.wrapS !== this.wrapS || layer.wrapT !== this.wrapT ||\n\t// \t\tlayer.width !== this.width || layer.height !== this.height ||\n\t// \t\tlayer.glFilter !== this.glFilter || layer.filter !== this.filter ||\n\t// \t\tlayer.glNumChannels !== this.glNumChannels || layer.numComponents !== this.numComponents ||\n\t// \t\tlayer.glType !== this.glType || layer.type !== this.type ||\n\t// \t\tlayer.glFormat !== this.glFormat || layer.glInternalFormat !== this.glInternalFormat) {\n\t// \t\t\tthrow new Error(`Incompatible texture params between GPULayers \"${layer.name}\" and \"${this.name}\".`);\n\t// \t}\n\n\t// \t// If we have not already inited overrides array, do so now.\n\t// \tif (!this.textureOverrides) {\n\t// \t\tthis.textureOverrides = [];\n\t// \t\tfor (let i = 0; i < this.numBuffers; i++) {\n\t// \t\t\tthis.textureOverrides.push(undefined);\n\t// \t\t}\n\t// \t}\n\n\t// \t// Check if we already have an override in place.\n\t// \tif (this.textureOverrides[this.bufferIndex]) {\n\t// \t\tthrow new Error(`Can't call GPULayer.saveCurrentStateToGPULayer on GPULayer \"${this.name}\", this GPULayer has not written new state since last call to GPULayer.saveCurrentStateToGPULayer.`);\n\t// \t}\n\t// \tconst { currentState } = this;\n\t// \tthis.textureOverrides[this.bufferIndex] = currentState;\n\t// \t// Swap textures.\n\t// \tthis.buffers[this.bufferIndex].texture = layer.currentState;\n\t// \tlayer._setCurrentStateTexture(currentState);\n\n\t// \t// Bind swapped texture to framebuffer.\n\t// \tconst { gl } = this.composer;\n\t// \tconst { framebuffer, texture } = this.buffers[this.bufferIndex];\n\t// \tif (!framebuffer) throw new Error(`No framebuffer for writable GPULayer \"${this.name}\".`);\n\t// \tgl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\t// \t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/framebufferTexture2D\n\t// \tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\t// \t// Unbind.\n\t// \tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t// }\n\n\t// // This is used internally.\n\t// _setCurrentStateTexture(texture: WebGLTexture) {\n\t// \tthis.buffers[this.bufferIndex].texture = texture;\n\t// }\n\n\t/**\t\n\t * Init GLTexture/GLFramebuffer pairs for reading/writing GPULayer data.\n\t * @private\n\t */\n\tprivate _initBuffers(\n\t\tarrayOrImage?: GPULayerArray | number[] | HTMLImageElement,\n\t) {\n\t\tconst {\n\t\t\tname,\n\t\t\tnumBuffers,\n\t\t\t_composer,\n\t\t\t_glInternalFormat,\n\t\t\t_glFormat,\n\t\t\t_glType,\n\t\t\t_glFilter,\n\t\t\t_glWrapS,\n\t\t\t_glWrapT,\n\t\t\twidth,\n\t\t\theight,\n\t\t} = this;\n\t\tconst { gl, _errorCallback } = _composer;\n\n\t\tlet validatedArrayOrImage: GPULayerArray | HTMLImageElement | null = null;\n\t\tif (isArray(arrayOrImage)) validatedArrayOrImage = GPULayer.validateGPULayerArray(arrayOrImage as GPULayerArray | number[], this);\n\t\telse if (arrayOrImage?.constructor === HTMLImageElement) validatedArrayOrImage = arrayOrImage;\n\n\t\t// Init a texture for each buffer.\n\t\tfor (let i = 0; i < numBuffers; i++) {\n\t\t\tconst texture = gl.createTexture();\n\t\t\tif (!texture) {\n\t\t\t\t_errorCallback(`Could not init texture for GPULayer \"${name}\": ${gl.getError()}.`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\n\t\t\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, _glWrapS);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, _glWrapT);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, _glFilter);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, _glFilter);\n\n\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, _glInternalFormat, width, height, 0, _glFormat, _glType, validatedArrayOrImage as any as ArrayBufferView | null);\n\t\t\t\n\t\t\t// Save this buffer to the list.\n\t\t\tthis._buffers.push(texture);\n\t\t}\n\t\t// Unbind.\n\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t}\n\t\n\t/**\n\t * Get buffer index of the current state.\n\t */\n\tget bufferIndex() {\n\t\treturn this._bufferIndex;\n\t}\n\n\t/**\n\t * Increment buffer index by 1.\n\t */\n\tincrementBufferIndex() {\n\t\t// Increment bufferIndex.\n\t\tthis._bufferIndex = (this.bufferIndex + 1) % this.numBuffers;\n\t}\n\n\t/**\n\t * Decrement buffer index by 1.\n\t */\n\t decrementBufferIndex() {\n\t\t// Decrement bufferIndex.\n\t\tthis._bufferIndex = (this.bufferIndex - 1 + this.numBuffers) % this.numBuffers;\n\t}\n\n\t/**\n\t * Get the current state as a GPULayerState object.\n\t */\n\tget currentState() {\n\t\treturn this.getStateAtIndex(this.bufferIndex);\n\t}\n\n\t/**\n\t * Get the current state as a WebGLTexture.\n\t * Used internally.\n\t * @private\n\t */\n\tget _currentTexture() {\n\t\tconst { _buffers, _bufferIndex, _textureOverrides } = this;\n\t\tif (_textureOverrides && _textureOverrides[_bufferIndex]) return _textureOverrides[_bufferIndex]!;\n\t\treturn _buffers[_bufferIndex];\n\t}\n\n\t/**\n\t * Get the previous state as a GPULayerState object (only available for GPULayers with numBuffers > 1).\n\t */\n\tget lastState() {\n\t\tif (this.numBuffers === 1) {\n\t\t\tthrow new Error(`Cannot access lastState on GPULayer \"${this.name}\" with only one buffer.`);\n\t\t}\n\t\treturn this.getStateAtIndex((this.bufferIndex - 1 + this.numBuffers) % this.numBuffers);\n\t}\n\n\t/**\n\t * Get the state at a specified index as a GPULayerState object.\n\t */\n\tgetStateAtIndex(index: number): GPULayerState {\n\t\tconst { numBuffers, _textureOverrides, _buffers } = this;\n\t\tif (index < 0 && index > -numBuffers) {\n\t\t\tindex += numBuffers; // Slightly negative numbers are ok.\n\t\t}\n\t\tif (index < 0 || index >= numBuffers) {\n\t\t\t// We will allow this number to overflow with warning - likely user error.\n\t\t\tconsole.warn(`Out of range buffer index: ${index} for GPULayer \"${this.name}\" with $.numBuffers} buffer${numBuffers > 1 ? 's' : ''}.  Was this intentional?`);\n\t\t\tif (index < 0) {\n\t\t\t\tindex += numBuffers * Math.ceil(Math.abs(index) / numBuffers);\n\t\t\t} else {\n\t\t\t\tindex = index % numBuffers;\n\t\t\t}\n\t\t}\n\t\tlet texture = _buffers[index];\n\t\tif (_textureOverrides && _textureOverrides[index]) texture = _textureOverrides[index]!;\n\t\treturn {\n\t\t\ttexture,\n\t\t\tlayer: this,\n\t\t};\n\t}\n\n\t/**\n\t * Increments the buffer index (if needed).\n\t * @private\n\t */\n\t_prepareForWrite(\n\t\tincrementBufferIndex: boolean,\n\t) {\n\t\tif (incrementBufferIndex) {\n\t\t\tthis.incrementBufferIndex();\n\t\t}\n\n\t\t// We are going to do a data write, if we have overrides enabled, we can remove them.\n\t\tif (this._textureOverrides) {\n\t\t\tthis._textureOverrides[this.bufferIndex] = undefined;\n\t\t}\n\t}\n\n\tsetFromArray(array: GPULayerArray | number[]) {\n\t\tconst {\n\t\t\t_composer,\n\t\t\t_glInternalFormat,\n\t\t\t_glFormat,\n\t\t\t_glType,\n\t\t\twidth,\n\t\t\theight,\n\t\t\t_currentTexture,\n\t\t} = this;\n\t\tconst { gl } = _composer;\n\t\tconst validatedArray = GPULayer.validateGPULayerArray(array, this);\n\t\tgl.bindTexture(gl.TEXTURE_2D, _currentTexture);\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, _glInternalFormat, width, height, 0, _glFormat, _glType, validatedArray);\n\t\t// Unbind texture.\n\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\t}\n\n\t// setFromImage(image: HTMLImageElement) {\n\t// \tconst { name, _composer, width, height, _currentTexture, _glInternalFormat, _glFormat, _glType, numComponents, type } = this;\n\t// \tconst { gl } = _composer;\n\t// \t// Check compatibility.\n\t// \tif (!isValidImageType(type)) {\n\t// \t\tthrow new Error(`GPULayer has invalid type ${type} for setFromImage(), valid types are: ${JSON.stringify(validImageTypes)}.`);\n\t// \t}\n\t// \tif (numComponents < 3) {\n\t// \t\tthrow new Error(`GPULayer has invalid numComponents ${numComponents} for setFromImage(), must have either 3 (RGB) or 4 (RGBA) components.`);\n\t// \t}\n\t// \tif (image.width !== width || image.height !== height) {\n\t// \t\tthrow new Error(`Invalid image dimensions [${image.width}, ${image.height}] for GPULayer \"${name}\" with dimensions [${width}, ${height}].  Call GPULayer.resize(width, height, image) instead.`);\n\t// \t}\n\t// \tgl.bindTexture(gl.TEXTURE_2D, _currentTexture);\n\t// \tgl.texImage2D(gl.TEXTURE_2D, 0, _glInternalFormat, width, height, 0, _glFormat, _glType, image as any);\n\t// \t// Unbind texture.\n\t// \tgl.bindTexture(gl.TEXTURE_2D, null);\n\t// }\n\n\tresize(\n\t\tdimensions: number | number[],\n\t\tarrayOrImage?: HTMLImageElement | GPULayerArray | number[],\n\t) {\n\t\tconst { name, _composer } = this;\n\t\tconst { verboseLogging } = _composer;\n\t\tif (verboseLogging) console.log(`Resizing GPULayer \"${name}\" to ${JSON.stringify(dimensions)}.`);\n\t\tconst { length, width, height } = GPULayer.calcGPULayerSize(dimensions, name, verboseLogging);\n\t\tthis._length = length;\n\t\tthis._width = width;\n\t\tthis._height = height;\n\t\tthis._destroyBuffers();\n\t\tthis._initBuffers(arrayOrImage);\n\t}\n\n\t/**\n\t * Set the clearValue of the GPULayer, which is applied during GPULayer.clear().\n\t */\n\tset clearValue(clearValue: number | number[]) {\n\t\tconst { numComponents, type } = this;\n\t\tif (!isValidClearValue(clearValue, numComponents, type)) {\n\t\t\tthrow new Error(`Invalid clearValue: ${JSON.stringify(clearValue)} for GPULayer \"${this.name}\", expected ${type} or array of ${type} of length ${numComponents}.`);\n\t\t}\n\t\t// Make deep copy if needed.\n\t\tthis._clearValue = isArray(clearValue) ? (clearValue as number[]).slice() : clearValue;\n\t}\n\n\t/**\n\t * Get the clearValue of the GPULayer.\n\t */\n\tget clearValue() {\n\t\treturn this._clearValue;\n\t}\n\n\t/**\n\t * Clear all data in GPULayer to GPULayer.clearValue.\n\t * @param applyToAllBuffers - Flag to apply to all buffers of GPULayer, or just the current output buffer.\n\t */\n\tclear(applyToAllBuffers = false) {\n\t\tconst { name, _composer, clearValue, numBuffers, type } = this;\n\t\tconst { verboseLogging } = _composer;\n\t\tif (verboseLogging) console.log(`Clearing GPULayer \"${name}\".`);\n\n\t\tconst value: number[] = [];\n\t\tif (isFiniteNumber(clearValue)) {\n\t\t\tvalue.push(clearValue as number, clearValue as number, clearValue as number, clearValue as number);\n\t\t} else {\n\t\t\tvalue.push(...clearValue as number[]);\n\t\t\tfor (let j = value.length; j < 4; j++) {\n\t\t\t\tvalue.push(0);\n\t\t\t}\n\t\t}\n\t\n\t\tconst endIndex = applyToAllBuffers ? numBuffers : 1;\n\t\tconst program = _composer._setValueProgramForType(type);\n\t\tprogram.setUniform('u_value', value);\n\t\tthis.decrementBufferIndex(); // step() wil increment buffer index before draw, this way we clear in place.\n\t\tfor (let i = 0; i < endIndex; i++) {\n\t\t\t// Write clear value to buffers.\n\t\t\t_composer.step({\n\t\t\t\tprogram,\n\t\t\t\toutput: this,\n\t\t\t});\n\t\t}\n\t\tif (applyToAllBuffers) this.incrementBufferIndex(); // Get us back to the starting index.\n\t}\n\n\tprivate _getValuesSetup() {\n\t\tconst { width, height, _composer, _currentTexture } = this;\n\t\tlet { _valuesRaw } = this;\n\t\tconst { gl } = _composer;\n\n\t\t// In case GPULayer was not the last output written to.\n\t\tbindFrameBuffer(_composer, this, _currentTexture);\n\n\t\tlet { _glNumChannels, _glType, _glFormat, _internalType } = this;\n\t\tswitch (_internalType) {\n\t\t\tcase HALF_FLOAT:\n\t\t\t\tif (gl.FLOAT !== undefined) {\n\t\t\t\t\t// Firefox requires that RGBA/FLOAT is used for readPixels of float16 types.\n\t\t\t\t\t_glNumChannels = 4;\n\t\t\t\t\t_glFormat = gl.RGBA;\n\t\t\t\t\t_glType = gl.FLOAT;\n\t\t\t\t\t_valuesRaw = _valuesRaw || new Float32Array(width * height * _glNumChannels);\n\t\t\t\t} else {\n\t\t\t\t\t_valuesRaw = _valuesRaw || new Uint16Array(width * height * _glNumChannels);\n\t\t\t\t}\n\t\t\t\t// // The following works in Chrome.\n\t\t\t\t// _valuesRaw = _valuesRaw || new Uint16Array(width * height * glNumChannels);\n\t\t\t\tbreak\n\t\t\tcase FLOAT:\n\t\t\t\t// Chrome and Firefox require that RGBA/FLOAT is used for readPixels of float32 types.\n\t\t\t\t// https://github.com/KhronosGroup/WebGL/issues/2747\n\t\t\t\t_glNumChannels = 4;\n\t\t\t\t_glFormat = gl.RGBA;\n\t\t\t\t_valuesRaw = _valuesRaw || new Float32Array(width * height * _glNumChannels);\n\t\t\t\tbreak;\n\t\t\tcase UNSIGNED_BYTE:\n\t\t\t\t// We never hit glslVersion === GLSL1 anymore, see GPULayerHelpers.shouldCastIntTypeAsFloat for more info.\n\t\t\t\t// if (glslVersion === GLSL1) {\n\t\t\t\t// \t// Firefox requires that RGBA/UNSIGNED_BYTE is used for readPixels of unsigned byte types.\n\t\t\t\t// \t_glNumChannels = 4;\n\t\t\t\t// \t_glFormat = gl.RGBA;\n\t\t\t\t// \t_valuesRaw = _valuesRaw || new Uint8Array(width * height * _glNumChannels);\n\t\t\t\t// \tbreak;\n\t\t\t\t// }\n\t\t\t\t// Firefox requires that RGBA_INTEGER/UNSIGNED_INT is used for readPixels of unsigned int types.\n\t\t\t\t_glNumChannels = 4;\n\t\t\t\t_glFormat = (gl as WebGL2RenderingContext).RGBA_INTEGER;\n\t\t\t\t_glType = gl.UNSIGNED_INT;\n\t\t\t\t_valuesRaw = _valuesRaw || new Uint32Array(width * height * _glNumChannels);\n\t\t\t\t// // The following works in Chrome.\n\t\t\t\t// _valuesRaw = _valuesRaw || new Uint8Array(width * height * glNumChannels);\n\t\t\t\tbreak;\n\t\t\tcase UNSIGNED_SHORT:\n\t\t\t\t// Firefox requires that RGBA_INTEGER/UNSIGNED_INT is used for readPixels of unsigned int types.\n\t\t\t\t_glNumChannels = 4;\n\t\t\t\t_glFormat = (gl as WebGL2RenderingContext).RGBA_INTEGER;\n\t\t\t\t_glType = gl.UNSIGNED_INT;\n\t\t\t\t_valuesRaw = _valuesRaw || new Uint32Array(width * height * _glNumChannels);\n\t\t\t\t// // The following works in Chrome.\n\t\t\t\t// _valuesRaw = _valuesRaw || new Uint16Array(width * height * glNumChannels);\n\t\t\t\tbreak;\n\t\t\tcase UNSIGNED_INT:\n\t\t\t\t// Firefox requires that RGBA_INTEGER/UNSIGNED_INT is used for readPixels of unsigned int types.\n\t\t\t\t_glNumChannels = 4;\n\t\t\t\t_glFormat = (gl as WebGL2RenderingContext).RGBA_INTEGER;\n\t\t\t\t_valuesRaw = _valuesRaw || new Uint32Array(width * height * _glNumChannels);\n\t\t\t\t// // The following works in Chrome.\n\t\t\t\t// _valuesRaw = _valuesRaw || new Uint32Array(width * height * glNumChannels);\n\t\t\t\tbreak;\n\t\t\tcase BYTE:\n\t\t\t\t// Firefox requires that RGBA_INTEGER/INT is used for readPixels of int types.\n\t\t\t\t_glNumChannels = 4;\n\t\t\t\t_glFormat = (gl as WebGL2RenderingContext).RGBA_INTEGER;\n\t\t\t\t_glType = gl.INT;\n\t\t\t\t_valuesRaw = _valuesRaw || new Int32Array(width * height * _glNumChannels);\n\t\t\t\t// // The following works in Chrome.\n\t\t\t\t// _valuesRaw = _valuesRaw || new Int8Array(width * height * glNumChannels);\n\t\t\t\tbreak;\n\t\t\tcase SHORT:\n\t\t\t\t// Firefox requires that RGBA_INTEGER/INT is used for readPixels of int types.\n\t\t\t\t_glNumChannels = 4;\n\t\t\t\t_glFormat = (gl as WebGL2RenderingContext).RGBA_INTEGER;\n\t\t\t\t_glType = gl.INT;\n\t\t\t\t_valuesRaw = _valuesRaw || new Int32Array(width * height * _glNumChannels);\n\t\t\t\t// // The following works in Chrome.\n\t\t\t\t// _valuesRaw = _valuesRaw || new Int16Array(width * height * glNumChannels);\n\t\t\t\tbreak;\n\t\t\tcase INT:\n\t\t\t\t// Firefox requires that RGBA_INTEGER/INT is used for readPixels of int types.\n\t\t\t\t_glNumChannels = 4;\n\t\t\t\t_glFormat = (gl as WebGL2RenderingContext).RGBA_INTEGER;\n\t\t\t\t_valuesRaw = _valuesRaw || new Int32Array(width * height * _glNumChannels);\n\t\t\t\t// // The following works in Chrome.\n\t\t\t\t// _valuesRaw = _valuesRaw || new Int32Array(width * height * glNumChannels);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unsupported internalType ${_internalType} for getValues().`);\n\t\t}\n\t\tthis._valuesRaw = _valuesRaw;\n\t\tif (readyToRead(gl)) {\n\t\t\treturn { _glFormat, _glType, _valuesRaw, _glNumChannels, _internalType };\n\t\t} else {\n\t\t\tthrow new Error(`Unable to read values from Buffer with status: ${gl.checkFramebufferStatus(gl.FRAMEBUFFER)}.`);\n\t\t}\n\t}\n\n\tprivate _getValuesPost(\n\t\t_valuesRaw: Float32Array | Uint16Array | Uint32Array | Int32Array,\n\t\t_glNumChannels: number,\n\t\t_internalType: GPULayerType,\n\t) {\n\t\tconst { width, height, numComponents, type } = this;\n\t\t\n\t\tconst OUTPUT_LENGTH = (this._length ? this._length : width * height) * numComponents;\n\n\t\t// Convert uint16 to float32 if needed.\n\t\tconst handleFloat16Conversion = _internalType === HALF_FLOAT && _valuesRaw.constructor === Uint16Array;\n\t\tlet { _valuesBufferView } = this;\n\t\tif (handleFloat16Conversion && !_valuesBufferView) {\n\t\t\t_valuesBufferView = new DataView((_valuesRaw as Uint16Array).buffer);\n\t\t\tthis._valuesBufferView = _valuesBufferView;\n\t\t}\n\t\t\n\n\t\t// We may use a different internal type than the assigned type of the GPULayer.\n\t\tif (_valuesRaw.length === OUTPUT_LENGTH && arrayConstructorForType(type, true) === _valuesRaw.constructor) {\n\t\t\tthis._values = _valuesRaw;\n\t\t} else if (!this._values) this._values = GPULayer.initArrayForType(type, OUTPUT_LENGTH, true);\n\t\tconst { _values } = this;\n\n\t\t// In some cases glNumChannels may be > numComponents.\n\t\tif (_valuesBufferView || _values !== _valuesRaw || numComponents !== _glNumChannels) {\n\t\t\tfor (let i = 0, length = width * height; i < length; i++) {\n\t\t\t\tconst index1 = i * _glNumChannels;\n\t\t\t\tconst index2 = i * numComponents;\n\t\t\t\tif (index2 >= OUTPUT_LENGTH) break;\n\t\t\t\tfor (let j = 0; j < numComponents; j++) {\n\t\t\t\t\tif (_valuesBufferView) {\n\t\t\t\t\t\t_values[index2 + j] = getFloat16(_valuesBufferView, 2 * (index1 + j), true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_values[index2 + j] = _valuesRaw[index1 + j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn _values;\n\t}\n\n\t/**\n\t * Returns the current values of the GPULayer as a TypedArray.\n\t * @returns - A TypedArray containing current state of GPULayer.\n\t */\n\tgetValues() {\n\t\tconst { width, height, _composer } = this;\n\t\tconst { gl } = _composer;\n\t\tconst { _glFormat, _glType, _valuesRaw, _glNumChannels, _internalType } = this._getValuesSetup();\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/readPixels\n\t\tgl.readPixels(0, 0, width, height, _glFormat, _glType, _valuesRaw);\n\t\treturn this._getValuesPost(_valuesRaw, _glNumChannels, _internalType);\n\t}\n\n\t/**\n\t * Non-blocking function to return the current values of the GPULayer as a TypedArray.\n\t * This only works for WebGL2 contexts, will fall back to getValues() if WebGL1 context.\n\t * @returns - A TypedArray containing current state of GPULayer.\n\t */\n\tasync getValuesAsync() {\n\t\tconst { width, height, _composer } = this;\n\t\tconst { gl, isWebGL2 } = _composer;\n\t\tif (!isWebGL2) {\n\t\t\t// Async method is not supported for WebGL1.\n\t\t\treturn this.getValues();\n\t\t}\n\t\tconst { _glFormat, _glType, _valuesRaw, _glNumChannels, _internalType } = this._getValuesSetup();\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/readPixels\n\t\tawait readPixelsAsync(gl as WebGL2RenderingContext, 0, 0, width, height, _glFormat, _glType, _valuesRaw);\n\t\treturn this._getValuesPost(_valuesRaw, _glNumChannels, _internalType);\n\t}\n\n\t// TODO: params.callback is not generated in the docs.\n\t/**\n\t * Save the current state of this GPULayer to png.\n\t * @param params - PNG parameters.\n\t * @param params.filename - PNG filename (no extension, defaults to the name of the GPULayer).\n\t * @param params.dpi - PNG dpi (defaults to 72dpi).\n\t * @param params.multiplier - Multiplier to apply to data before saving PNG (defaults to 255 for FLOAT and HALF_FLOAT types, else 1).\n\t * @param params.callback - Optional callback when Blob is ready, default behavior saves the PNG using file-saver.\n\t*/\n\tsavePNG(params: {\n\t\tfilename?: string,\n\t\tdpi?: number,\n\t\tmultiplier?: number,\n\t\tcallback?: (blob: Blob, filename: string) => void,\n\t} = {}) {\n\t\tconst validKeys = ['filename', 'dpi', 'multiplier', 'callback'];\n\t\tconst keys = Object.keys(params);\n\t\tcheckValidKeys(keys, validKeys, 'GPULayer.savePNG(params)');\n\t\t\n\t\tconst values = this.getValues();\n\t\tconst { width, height, type, name, numComponents } = this;\n\t\tconst callback = params.callback || saveAs; // Default to saving the image with file-saver.\n\t\tconst filename = params.filename || name; // Default to the name of this layer.\n\t\tconst multiplier = params.multiplier ||\n\t\t\t((type === FLOAT || type === HALF_FLOAT) ? 255 : 1);\n\n\t\tconst canvas = document.createElement('canvas');\n\t\tcanvas.width = width;\n    \tcanvas.height = height;\n\t\tconst context = canvas.getContext('2d')!;\n\t\tconst imageData = context.getImageData(0, 0, width, height);\n\t\tconst buffer = imageData.data;\n\t\t// Have to flip the y axis since PNGs are written top to bottom.\n\t\tfor (let y = 0; y < height; y++) {\n\t\t\tfor (let x = 0; x < width; x++) {\n\t\t\t\tconst index = y * width + x;\n\t\t\t\tconst indexFlipped = (height - 1 - y) * width + x;\n\t\t\t\tfor (let i = 0; i < numComponents; i++) {\n\t\t\t\t\tbuffer[4 * indexFlipped + i] = values[numComponents * index + i] * multiplier;\n\t\t\t\t}\n\t\t\t\tif (numComponents === 1) {\n\t\t\t\t\t// Make monochrome.\n\t\t\t\t\tbuffer[4 * indexFlipped + 1] = buffer[4 * indexFlipped];\n\t\t\t\t\tbuffer[4 * indexFlipped + 2] = buffer[4 * indexFlipped];\n\t\t\t\t}\n\t\t\t\tif (numComponents < 4) {\n\t\t\t\t\tbuffer[4 * indexFlipped + 3] = 255; // Set alpha channel to 255.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcontext.putImageData(imageData, 0, 0);\n\n\t\tcanvas.toBlob((blob) => {\n\t\t\tif (!blob) {\n\t\t\t\tconsole.warn(`Problem saving PNG from GPULayer \"${name}\", unable to init blob.`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (params.dpi) {\n\t\t\t\tchangeDpiBlob(blob, params.dpi).then((blob: Blob) =>{\n\t\t\t\t\tcallback(blob, `${filename}.png`);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tcallback(blob, `${filename}.png`);\n\t\t\t}\n\t\t}, 'image/png');\n\t}\n\n\t/**\n\t * Attach the output buffer of this GPULayer to a Threejs Texture object.\n\t * @param {Texture} texture - Threejs texture object.\n\t */\n\tattachToThreeTexture(texture: Texture) {\n\t\tconst { _composer, numBuffers, currentState, name } = this;\n\t\tconst { _threeRenderer, gl } = _composer;\n\t\tif (!_threeRenderer) {\n\t\t\tthrow new Error('GPUComposer was not inited with a renderer.');\n\t\t}\n\t\t// Link webgl texture to threejs object.\n\t\t// This is not officially supported by threejs.\n\t\tif (numBuffers > 1) {\n\t\t\tthrow new Error(`GPULayer \"${name}\" contains multiple WebGL textures (one for each buffer) that are flip-flopped during compute cycles, please choose a GPULayer with one buffer.`);\n\t\t}\n\t\tconst offsetTextureProperties = _threeRenderer.properties.get(texture);\n\t\tgl.deleteTexture(offsetTextureProperties.__webglTexture);\n\t\toffsetTextureProperties.__webglTexture = currentState.texture;\n\t\toffsetTextureProperties.__webglInit = true;\n\t}\n\n\t/**\n\t * Delete this GPULayer's framebuffers and textures.\n\t * @private\n\t */\n\tprivate _destroyBuffers() {\n\t\tconst { _composer, _buffers } = this;\n\t\tconst { gl } = _composer;\n\t\t_buffers.forEach(texture => {\n\t\t\tgl.deleteTexture(texture);\n\t\t\tdisposeFramebuffers(gl, texture);\n\t\t});\n\t\t_buffers.length = 0;\n\n\t\t// These are technically owned by another GPULayer,\n\t\t// so we are not responsible for deleting them from gl context.\n\t\tdelete this._textureOverrides;\n\t}\n\n\t/**\n\t * Create a deep copy of GPULayer with current state copied over.\n\t * @param name - Name of new GPULayer as string.\n\t * @returns - Deep copy of GPULayer.\n\t */\n\tclone(name?: string) {\n\t\t// Make a deep copy.\n\t\treturn this._composer._cloneGPULayer(this, name);\n\t}\n\n\t/**\n\t * Deallocate GPULayer instance and associated WebGL properties.\n\t */\n\tdispose() {\n\t\tconst { name, _composer } = this;\n\t\tconst { gl, verboseLogging } = _composer;\n\n\t\tif (verboseLogging) console.log(`Deallocating GPULayer \"${name}\".`);\n\n\t\tif (!gl) throw new Error(`Must call dispose() on all GPULayers before calling dispose() on GPUComposer.`);\n\t\n\t\tthis._destroyBuffers();\n\t\t// @ts-ignore\n\t\tdelete this._buffers;\n\t\t// @ts-ignore\n\t\tdelete this._composer;\n\n\t\tif (this._values) delete this._values;\n\t\tif (this._valuesRaw) delete this._valuesRaw;\n\t}\n\n\t/** \n\t * These methods are defined in GPULayerHelpers.ts\n\t */\n\t/**\n\t * @private\n\t */\n\t// @ts-ignore\n\tstatic initArrayForType(\n\t\ttype: GPULayerType,\n\t\tlength: number,\n\t\thalfFloatsAsFloats?: boolean,\n\t): GPULayerArray;\n\t/**\n\t * @private\n\t */\n\t// @ts-ignore\n\tstatic calcGPULayerSize(\n\t\tsize: number | number[],\n\t\tname: string,\n\t\tverboseLogging: boolean,\n\t): { width: number, height: number, length?: number };\n\t/**\n\t * @private\n\t */\n\t// @ts-ignore\n\tstatic getGPULayerInternalWrap(\n\t\tparams: {\n\t\t\tcomposer: GPUComposer,\n\t\t\twrap: GPULayerWrap,\n\t\t\tinternalFilter: GPULayerFilter,\n\t\t\tinternalType: GPULayerType,\n\t\t\tname: string,\n\t\t},\n\t): GPULayerWrap;\n\t/**\n\t * @private\n\t */\n\t// @ts-ignore\n\tstatic getGPULayerInternalFilter(\n\t\tparams: {\n\t\t\tcomposer: GPUComposer,\n\t\t\tfilter: GPULayerFilter,\n\t\t\twrapX: GPULayerWrap,\n\t\t\twrapY: GPULayerWrap,\n\t\t\tinternalType: GPULayerType,\n\t\t\tname: string,\n\t\t},\n\t): GPULayerFilter;\n\t/**\n\t * @private\n\t */\n\t// @ts-ignore\n\tstatic getGLTextureParameters(\n\t\tparams: {\n\t\t\tcomposer: GPUComposer,\n\t\t\tname: string,\n\t\t\tnumComponents: GPULayerNumComponents,\n\t\t\tinternalType: GPULayerType,\n\t\t}\n\t): {\n\t\tglFormat: number,\n\t\tglInternalFormat: number,\n\t\tglType: number,\n\t\tglNumChannels: number,\n\t};\n\t/**\n\t * @private\n\t */\n\t// @ts-ignore\n\tstatic getGPULayerInternalType(\n\t\tparams: {\n\t\t\tcomposer: GPUComposer,\n\t\t\ttype: GPULayerType,\n\t\t\tname: string,\n\t\t},\n\t): GPULayerType;\n\t/**\n\t * @private\n\t */\n\t// @ts-ignore\t\n\tstatic validateGPULayerArray(\n\t\tarray: GPULayerArray | number[],\n\t\tlayer: GPULayer,\n\t): GPULayerArray;\n}","import { isNumber, isPositiveInteger } from '@amandaghassaei/type-checks';\nimport { setFloat16 } from '@petamoriken/float16';\nimport {\n\tBYTE,\n\tCLAMP_TO_EDGE,\n\tFLOAT,\n\tGPULayerFilter,\n\tGPULayerType,\n\tGPULayerWrap,\n\tHALF_FLOAT,\n\tINT,\n\tNEAREST,\n\tSHORT,\n\tUNSIGNED_BYTE,\n\tUNSIGNED_INT,\n\tUNSIGNED_SHORT,\n\tGLSL3,\n\tGPULayerNumComponents,\n\tGLSL1,\n\tGPULayerArray,\n\tvalidArrayTypes,\n\tMIN_UNSIGNED_BYTE,\n\tMAX_UNSIGNED_BYTE,\n\tMIN_BYTE,\n\tMAX_BYTE,\n\tMIN_UNSIGNED_SHORT,\n\tMAX_UNSIGNED_SHORT,\n\tMIN_SHORT,\n\tMAX_SHORT,\n\tMIN_UNSIGNED_INT,\n\tMAX_UNSIGNED_INT,\n\tMIN_INT,\n\tMAX_INT,\n\tLINEAR,\n\tDEFAULT_PROGRAM_NAME,\n} from './constants';\nimport { arrayConstructorForType } from './conversions';\nimport {\n\tEXT_COLOR_BUFFER_FLOAT,\n\tEXT_COLOR_BUFFER_HALF_FLOAT,\n\tgetExtension,\n\tOES_TEXTURE_FLOAT,\n\tOES_TEXTURE_FLOAT_LINEAR,\n\tOES_TEXTURE_HALF_FLOAT,\n\tOES_TEXTURE_HAlF_FLOAT_LINEAR,\n} from './extensions';\nimport { bindFrameBuffer } from './framebuffers';\nimport type { GPUComposer } from './GPUComposer';\nimport { GPULayer } from './GPULayer';\nimport {\n\tcompileShader,\n\tconvertFragmentShaderToGLSL1,\n\tinitGLProgram,\n\tisIntType,\n\tisUnsignedIntType,\n} from './utils';\n\n// Memoize results.\nconst results = {\n\twriteSupport: {} as { [key: string]: boolean },\n\tfilterWrapSupport: {} as { [key: string]: boolean },\n}\n\n/**\n * Init empty typed array for type, optionally use Float32Array for HALF_FLOAT.\n * @private\n */\nGPULayer.initArrayForType = (\n\ttype: GPULayerType,\n\tlength: number,\n\thalfFloatsAsFloats = false,\n) => {\n\treturn new (arrayConstructorForType(type, halfFloatsAsFloats))(length);\n}\n\n/**\n * Calc 2D size [width, height] for GPU layer given a 1D or 2D size parameter.\n * If 1D size supplied, nearest power of 2 width/height is generated.\n * Also checks that size elements are valid.\n * @private\n */\n\nGPULayer.calcGPULayerSize = (\n\tsize: number | number[],\n\tname: string,\n\tverboseLogging: boolean,\n) => {\n\tif (isNumber(size as number)) {\n\t\tif (!isPositiveInteger(size)) {\n\t\t\tthrow new Error(`Invalid length: ${JSON.stringify(size)} for GPULayer \"${name}\", must be positive integer.`);\n\t\t}\n\t\tconst length = size as number;\n\t\t// Relaxing adherence to power of 2.\n\t\t// // Calc power of two width and height for length.\n\t\t// let exp = 1;\n\t\t// let remainder = length;\n\t\t// while (remainder > 2) {\n\t\t// \texp++;\n\t\t// \tremainder /= 2;\n\t\t// }\n\t\t// const width = Math.pow(2, Math.floor(exp / 2) + exp % 2);\n\t\t// const height = Math.pow(2, Math.floor(exp/2));\n\t\tconst width = Math.ceil(Math.sqrt(length));\n\t\tconst height = Math.ceil(length / width);\n\t\tif (verboseLogging) console.log(`Using [${width}, ${height}] for 1D array of length ${size} in GPULayer \"${name}\".`);\n\t\treturn { width, height, length };\n\t}\n\tconst width = (size as number[])[0];\n\tif (!isPositiveInteger(width)) {\n\t\tthrow new Error(`Invalid width: ${JSON.stringify(width)} for GPULayer \"${name}\", must be positive integer.`);\n\t}\n\tconst height = (size as number[])[1];\n\tif (!isPositiveInteger(height)) {\n\t\tthrow new Error(`Invalid height: ${JSON.stringify(height)} for GPULayer \"${name}\", must be positive integer.`);\n\t}\n\treturn { width, height };\n}\n\n/**\n * Get the GL wrap type to use internally in GPULayer, based on browser support.\n * @private\n */\nGPULayer.getGPULayerInternalWrap = (\n\tparams: {\n\t\tcomposer: GPUComposer,\n\t\twrap: GPULayerWrap,\n\t\tinternalFilter: GPULayerFilter,\n\t\tinternalType: GPULayerType,\n\t\tname: string,\n\t},\n) => {\n\tconst { composer, wrap, internalFilter, internalType } = params;\n\n\t// CLAMP_TO_EDGE is always supported.\n\tif (wrap === CLAMP_TO_EDGE) {\n\t\treturn wrap;\n\t}\n\n\t// Test if wrap/filter combo is actually supported by running some numbers through.\n\tif (testFilterWrap(composer, internalType, internalFilter, wrap)) {\n\t\treturn wrap;\n\t}\n\t// If not, convert to CLAMP_TO_EDGE and polyfill in fragment shader.\n\treturn CLAMP_TO_EDGE;\n\t// REPEAT and MIRROR_REPEAT wrap not supported for non-power of 2 textures in safari.\n\t// I've tested this and it seems that some power of 2 textures will work (512 x 512),\n\t// but not others (1024x1024), so let's just change all WebGL 1.0 to CLAMP.\n\t// Without this, we currently get an error at drawArrays():\n\t// \"WebGL: drawArrays: texture bound to texture unit 0 is not renderable.\n\t// It maybe non-power-of-2 and have incompatible texture filtering or is not\n\t// 'texture complete', or it is a float/half-float type with linear filtering and\n\t// without the relevant float/half-float linear extension enabled.\"\n}\n\n/**\n * Get the GL filter type to use internally in GPULayer, based on browser support.\n * @private\n */\n GPULayer.getGPULayerInternalFilter = (\n\tparams: {\n\t\tcomposer: GPUComposer,\n\t\tfilter: GPULayerFilter,\n\t\twrapX: GPULayerWrap,\n\t\twrapY: GPULayerWrap,\n\t\tinternalType: GPULayerType,\n\t\tname: string,\n\t},\n) => {\n\tlet { filter } = params;\n\tif (filter === NEAREST) {\n\t\t// NEAREST filtering is always supported.\n\t\treturn filter;\n\t}\n\n\tconst { composer, internalType, wrapX, wrapY, name } = params;\n\n\tif (internalType === HALF_FLOAT) {\n\t\tconst extension = getExtension(composer, OES_TEXTURE_HAlF_FLOAT_LINEAR, true)\n\t\t\t|| getExtension(composer, OES_TEXTURE_FLOAT_LINEAR, true);\n\t\tif (!extension || !testFilterWrap(composer, internalType, filter, wrapX) || !testFilterWrap(composer, internalType, filter, wrapY)) {\n\t\t\tconsole.warn(`This browser does not support ${filter} filtering for type ${internalType} and wrap [${wrapX}, ${wrapY}].  Falling back to NEAREST filter for GPULayer \"${name}\" with ${filter} polyfill in fragment shader.`);\n\t\t\tfilter = NEAREST; // Polyfill in fragment shader.\n\t\t}\n\t} if (internalType === FLOAT) {\n\t\tconst extension = getExtension(composer, OES_TEXTURE_FLOAT_LINEAR, true);\n\t\tif (!extension || !testFilterWrap(composer, internalType, filter, wrapX) || !testFilterWrap(composer, internalType, filter, wrapY)) {\n\t\t\tconsole.warn(`This browser does not support ${filter} filtering for type ${internalType} and wrap [${wrapX}, ${wrapY}].  Falling back to NEAREST filter for GPULayer \"${name}\" with ${filter} polyfill in fragment shader.`);\n\t\t\tfilter = NEAREST; // Polyfill in fragment shader.\n\t\t}\n\t}\n\treturn filter;\n}\n\n/**\n * Returns whether to cast int type as floats, as needed by browser.\n * @private\n */\nexport function shouldCastIntTypeAsFloat(\n\tcomposer: GPUComposer,\n\ttype: GPULayerType,\n) {\n\tconst { glslVersion, isWebGL2 } = composer;\n\t// All types are supported by WebGL2 + glsl3.\n\tif (glslVersion === GLSL3 && isWebGL2) return false;\n\t// Int textures (other than UNSIGNED_BYTE) are not supported by WebGL1.0 or glsl1.x.\n\t// https://stackoverflow.com/questions/55803017/how-to-select-webgl-glsl-sampler-type-from-texture-format-properties\n\t// Use HALF_FLOAT/FLOAT instead.\n\t// Some large values of INT and UNSIGNED_INT are not supported unfortunately.\n\t// See tests for more information.\n\t// Update: Even UNSIGNED_BYTE should be cast as float in GLSL1.  I noticed some strange behavior in test:\n\t// setUniform>'should cast/handle uint uniforms for UNSIGNED_BYTE GPULayers' in tests/mocha/GPUProgram and \n\t// getValues>'should return correct values for UNSIGNED_BYTE GPULayer' in tests/mocha/GPULayer\n\treturn type === UNSIGNED_BYTE || type === BYTE || type === SHORT || type === INT || type === UNSIGNED_SHORT || type === UNSIGNED_INT;\n}\n\n/**\n * Returns GLTexture parameters for GPULayer, based on browser support.\n * @private\n */\nGPULayer.getGLTextureParameters = (\n\tparams: {\n\t\tcomposer: GPUComposer,\n\t\tname: string,\n\t\tnumComponents: GPULayerNumComponents,\n\t\tinternalType: GPULayerType,\n\t}\n) => {\n\tconst { composer, name, numComponents, internalType } = params;\n\tconst { gl, glslVersion, isWebGL2 } = composer;\n\t// https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\n\tlet glType: number | undefined,\n\t\tglFormat: number | undefined,\n\t\tglInternalFormat: number | undefined,\n\t\tglNumChannels: number | undefined;\n\n\tif (isWebGL2) {\n\t\tglNumChannels = numComponents;\n\t\t// https://www.khronos.org/registry/webgl/extensions/EXT_color_buffer_float/\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D\n\t\t// The sized internal format RGBxxx are not color-renderable.\n\t\t// If numComponents == 3 for a writable texture, use RGBA instead.\n\t\t// Page 5 of https://www.khronos.org/files/webgl20-reference-guide.pdf\n\t\t// Update: Some formats (e.g. RGB) may be emulated, causing a performance hit:\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#some_formats_e.g._rgb_may_be_emulated\n\t\t// Prefer to use rgba instead of rgb for all cases (WebGL1 and WebGL2).\n\t\tif (numComponents === 3) {\n\t\t\tglNumChannels = 4;\n\t\t}\n\t\tif (internalType === FLOAT || internalType === HALF_FLOAT) {\n\t\t\t// This will be hit in all cases for GLSL1, now that we have cast UNSIGNED_BYTE types to HALF_FLOAT for GLSL1.\n\t\t\t// See comments in shouldCastIntTypeAsFloat for more information.\n\t\t\tswitch (glNumChannels) {\n\t\t\t\tcase 1:\n\t\t\t\t\tglFormat = (gl as WebGL2RenderingContext).RED;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tglFormat = (gl as WebGL2RenderingContext).RG;\n\t\t\t\t\tbreak;\n\t\t\t\t// case 3:\n\t\t\t\t// \tglFormat = gl.RGB; // We never hit this.\n\t\t\t\t// \tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tglFormat = gl.RGBA;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Unsupported glNumChannels: ${glNumChannels} for GPULayer \"${name}\".`);\n\t\t\t}\n\t\t} else {\n\t\t\t// This case will only be hit by GLSL 3.\n\t\t\t// Int textures are not supported in GLSL1.\n\t\t\tswitch (glNumChannels) {\n\t\t\t\tcase 1:\n\t\t\t\t\tglFormat = (gl as WebGL2RenderingContext).RED_INTEGER;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tglFormat = (gl as WebGL2RenderingContext).RG_INTEGER;\n\t\t\t\t\tbreak;\n\t\t\t\t// case 3:\n\t\t\t\t// \tglFormat = (gl as WebGL2RenderingContext).RGB_INTEGER; // We never hit this.\n\t\t\t\t// \tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tglFormat = (gl as WebGL2RenderingContext).RGBA_INTEGER;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Unsupported glNumChannels: ${glNumChannels} for GPULayer \"${name}\".`);\n\t\t\t}\n\t\t}\n\t\tswitch (internalType) {\n\t\t\tcase HALF_FLOAT:\n\t\t\t\tglType = (gl as WebGL2RenderingContext).HALF_FLOAT;\n\t\t\t\tswitch (glNumChannels) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).R16F;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RG16F;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// case 3:\n\t\t\t\t\t// \tglInternalFormat = (gl as WebGL2RenderingContext).RGB16F; // We never hit this.\n\t\t\t\t\t// \tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RGBA16F;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Unsupported glNumChannels: ${glNumChannels} for GPULayer \"${name}\".`);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase FLOAT:\n\t\t\t\tglType = (gl as WebGL2RenderingContext).FLOAT;\n\t\t\t\tswitch (glNumChannels) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).R32F;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RG32F;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// case 3:\n\t\t\t\t\t// \tglInternalFormat = (gl as WebGL2RenderingContext).RGB32F; // We never hit this.\n\t\t\t\t\t// \tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RGBA32F;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Unsupported glNumChannels: ${glNumChannels} for GPULayer \"${name}\".`);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase UNSIGNED_BYTE:\n\t\t\t\tglType = gl.UNSIGNED_BYTE;\n\t\t\t\tif (glslVersion === GLSL1 && internalType === UNSIGNED_BYTE) {\n\t\t\t\t\tglInternalFormat = glFormat;\n\t\t\t\t} else {\n\t\t\t\t\tswitch (glNumChannels) {\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).R8UI;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RG8UI;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t// case 3:\n\t\t\t\t\t\t// \tglInternalFormat = (gl as WebGL2RenderingContext).RGB8UI; // We never hit this.\n\t\t\t\t\t\t// \tbreak;\n\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RGBA8UI;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthrow new Error(`Unsupported glNumChannels: ${glNumChannels} for GPULayer \"${name}\".`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase BYTE:\n\t\t\t\tglType = gl.BYTE;\n\t\t\t\tswitch (glNumChannels) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).R8I;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RG8I;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// case 3:\n\t\t\t\t\t// \tglInternalFormat = (gl as WebGL2RenderingContext).RGB8I; // We never hit this.\n\t\t\t\t\t// \tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RGBA8I;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Unsupported glNumChannels: ${glNumChannels} for GPULayer \"${name}\".`);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase SHORT:\n\t\t\t\tglType = gl.SHORT;\n\t\t\t\tswitch (glNumChannels) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).R16I;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RG16I;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// case 3:\n\t\t\t\t\t// \tglInternalFormat = (gl as WebGL2RenderingContext).RGB16I; // We never hit this.\n\t\t\t\t\t// \tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RGBA16I;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Unsupported glNumChannels: ${glNumChannels} for GPULayer \"${name}\".`);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase UNSIGNED_SHORT:\n\t\t\t\tglType = gl.UNSIGNED_SHORT;\n\t\t\t\tswitch (glNumChannels) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).R16UI;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RG16UI;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// case 3:\n\t\t\t\t\t// \tglInternalFormat = (gl as WebGL2RenderingContext).RGB16UI; // We never hit this.\n\t\t\t\t\t// \tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RGBA16UI;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Unsupported glNumChannels: ${glNumChannels} for GPULayer \"${name}\".`);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase INT:\n\t\t\t\tglType = gl.INT;\n\t\t\t\tswitch (glNumChannels) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).R32I;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RG32I;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// case 3:\n\t\t\t\t\t// \tglInternalFormat = (gl as WebGL2RenderingContext).RGB32I; // We never hit this.\n\t\t\t\t\t// \tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RGBA32I;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Unsupported glNumChannels: ${glNumChannels} for GPULayer \"${name}\".`);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase UNSIGNED_INT:\n\t\t\t\tglType = gl.UNSIGNED_INT;\n\t\t\t\tswitch (glNumChannels) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).R32UI;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RG32UI;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// case 3:\n\t\t\t\t\t// \tglInternalFormat = (gl as WebGL2RenderingContext).RGB32UI; // We never hit this.\n\t\t\t\t\t// \tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RGBA32UI;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Unsupported glNumChannels: ${glNumChannels} for GPULayer \"${name}\".`);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unsupported type: \"${internalType}\" for GPULayer \"${name}\".`);\n\t\t}\n\t} else {\n\t\t// WebGL1 case.\n\t\tif (numComponents < 1 || numComponents > 4) {\n\t\t\tthrow new Error(`Unsupported numComponents: ${numComponents} for GPULayer \"${name}\".`);\n\t\t}\n\t\t// Always use 4 channel textures for WebGL1.\n\t\t// Some formats (e.g. RGB) may be emulated, causing a performance hit:\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#some_formats_e.g._rgb_may_be_emulated\n\t\tglNumChannels = 4;\n\t\tglFormat = gl.RGBA;\n\t\tglInternalFormat = gl.RGBA;\n\t\tswitch (internalType) {\n\t\t\tcase FLOAT:\n\t\t\t\tglType = gl.FLOAT;\n\t\t\t\tbreak;\n\t\t\tcase HALF_FLOAT:\n\t\t\t\tglType = (gl as WebGL2RenderingContext).HALF_FLOAT || getExtension(composer, OES_TEXTURE_HALF_FLOAT).HALF_FLOAT_OES as number;\n\t\t\t\tbreak;\n\t\t\t// case UNSIGNED_BYTE:\n\t\t\t// \t// This will never be hit, now that we have cast UNSIGNED_BYTE types to HALF_FLOAT for GLSL1.\n\t\t\t// \t// See comments in shouldCastIntTypeAsFloat for more information.\n\t\t\t// \tglType = gl.UNSIGNED_BYTE;\n\t\t\t// \tbreak;\n\t\t\t// No other types are supported in WebGL1.\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unsupported type: \"${internalType}\" in WebGL 1.0 for GPULayer \"${name}\".`);\n\t\t}\n\t}\n\n\t// Check for missing params.\n\tif (glType === undefined || glFormat === undefined || glInternalFormat === undefined) {\n\t\tconst missingParams = [];\n\t\tif (glType === undefined) missingParams.push('glType');\n\t\tif (glFormat === undefined) missingParams.push('glFormat');\n\t\tif (glInternalFormat === undefined) missingParams.push('glInternalFormat');\n\t\tthrow new Error(`Invalid type: ${internalType} for numComponents: ${numComponents}, unable to init parameter${missingParams.length > 1 ? 's' : ''} ${missingParams.join(', ')} for GPULayer \"${name}\".`);\n\t}\n\tif (glNumChannels === undefined || numComponents < 1 || numComponents > 4 || glNumChannels < numComponents) {\n\t\tthrow new Error(`Invalid numChannels: ${glNumChannels} for numComponents: ${numComponents} for GPULayer \"${name}\".`);\n\t}\n\n\treturn {\n\t\tglFormat,\n\t\tglInternalFormat,\n\t\tglType,\n\t\tglNumChannels,\n\t};\n}\n\n/**\n * Rigorous method for testing FLOAT and HALF_FLOAT write support by attaching texture to framebuffer.\n * @private\n */\nexport function testWriteSupport(\n\tcomposer: GPUComposer,\n\tinternalType: GPULayerType,\n) {\n\tconst { gl, glslVersion, isWebGL2 } = composer;\n\n\t// Memoize results for a given set of inputs.\n\tconst key = `${isWebGL2},${internalType},${glslVersion === GLSL3 ? '3' : '1'}`;\n\tif (results.writeSupport[key] !== undefined) {\n\t\treturn results.writeSupport[key];\n\t}\n\n\tconst texture = gl.createTexture();\n\tif (!texture) {\n\t\tresults.writeSupport[key] = false;\n\t\treturn results.writeSupport[key];\n\t}\n\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\n\t// Default to most widely supported settings.\n\tconst wrap = gl[CLAMP_TO_EDGE];\n\tconst filter = gl[NEAREST];\n\t// Use non-power of two dimensions to check for more universal support.\n\t// (In case size of GPULayer is changed at a later point).\n\tconst width = 10;\n\tconst height = 10;\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrap);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrap);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);\n\n\tconst { glInternalFormat, glFormat, glType } = GPULayer.getGLTextureParameters({\n\t\tcomposer,\n\t\tname: 'testWriteSupport',\n\t\tnumComponents: 1,\n\t\tinternalType,\n\t});\n\tgl.texImage2D(gl.TEXTURE_2D, 0, glInternalFormat, width, height, 0, glFormat, glType, null);\n\n\t// Init a framebuffer for this texture so we can write to it.\n\tconst framebuffer = gl.createFramebuffer();\n\tif (!framebuffer) {\n\t\t// Clear out allocated memory.\n\t\tgl.deleteTexture(texture);\n\t\tresults.writeSupport[key] = false;\n\t\treturn results.writeSupport[key];\n\t}\n\tgl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/framebufferTexture2D\n\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n\tconst validStatus = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n\t// Clear out allocated memory.\n\tgl.deleteTexture(texture);\n\tgl.deleteFramebuffer(framebuffer);\n\n\tresults.writeSupport[key] = validStatus;\n\treturn results.writeSupport[key];\n}\n\n/**\n * Rigorous method for testing whether a filter/wrap combination is supported\n * by the current browser.  I found that some versions of WebGL2 mobile safari\n * may support the OES_texture_float_linear and EXT_color_buffer_float, but still\n * do not linearly interpolate float textures or wrap only for power-of-two textures.\n * @private\n */\nexport function testFilterWrap(\n\tcomposer: GPUComposer,\n\tinternalType: GPULayerType,\n\tfilter: GPULayerFilter,\n\twrap: GPULayerWrap,\n) {\n\tconst { gl, glslVersion, intPrecision, floatPrecision, _errorCallback, isWebGL2 } = composer;\n\n\t// Memoize results for a given set of inputs.\n\tconst key = `${isWebGL2},${internalType},${filter},${wrap},${glslVersion === GLSL3 ? '3' : '1'}`;\n\tif (results.filterWrapSupport[key] !== undefined) {\n\t\treturn results.filterWrapSupport[key];\n\t}\n\n\tconst texture = gl.createTexture();\n\tif (!texture) {\n\t\tresults.filterWrapSupport[key] = false;\n\t\treturn results.filterWrapSupport[key];\n\t}\n\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\n\tconst glWrap = gl[wrap];\n\tconst glFilter = gl[filter];\n\t// Use non power of two dimensions to check for more universal support.\n\tconst width = 3;\n\tconst height = 3;\n\tconst numComponents = 1;\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, glWrap);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, glWrap);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, glFilter);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, glFilter);\n\n\tconst { glInternalFormat, glFormat, glType, glNumChannels } = GPULayer.getGLTextureParameters({\n\t\tcomposer,\n\t\tname: 'testFilterWrap',\n\t\tnumComponents,\n\t\tinternalType,\n\t});\n\t// Init texture with values.\n\tconst values = [3, 56.5, 834, -53.6, 0.003, 96.2, 23, 90.2, 32];\n\tlet valuesTyped = GPULayer.initArrayForType(internalType, values.length * glNumChannels, true);\n\tfor (let i = 0; i < values.length; i++) {\n\t\tvaluesTyped[i * glNumChannels] = values[i];\n\t\tvalues[i] = valuesTyped[i * glNumChannels]; // Cast as int/uint if needed.\n\t}\n\tif (internalType === HALF_FLOAT) {\n\t\t// Cast values as Uint16Array for HALF_FLOAT.\n\t\tconst valuesTyped16 = new Uint16Array(valuesTyped.length);\n\t\tconst float16View =  new DataView(valuesTyped16.buffer);\n\t\tfor (let i = 0; i < valuesTyped.length; i++) {\n\t\t\tsetFloat16(float16View, 2 * i, valuesTyped[i], true);\n\t\t}\n\t\tvaluesTyped = valuesTyped16;\n\t}\n\tgl.texImage2D(gl.TEXTURE_2D, 0, glInternalFormat, width, height, 0, glFormat, glType, valuesTyped);\n\n\t// Init a GPULayer to write to.\n\t// Must use CLAMP_TO_EDGE/NEAREST on this GPULayer to avoid infinite loop.\n\tconst output = new GPULayer(composer, {\n\t\tname: 'testFloatLinearFiltering-output',\n\t\ttype: internalType,\n\t\tnumComponents,\n\t\tdimensions: [width, height],\n\t\twrapX: CLAMP_TO_EDGE,\n\t\twrapY: CLAMP_TO_EDGE,\n\t\tfilter: NEAREST,\n\t});\n\n\tconst offset = filter === LINEAR ? 0.5 : 1;\n\t// Run program to perform linear filter.\n\tconst programName = 'testFilterWrap-program';\n\tlet fragmentShaderSource = `\nin vec2 v_uv;\nuniform vec2 u_offset;\n#ifdef GPUIO_INT\n\tuniform isampler2D u_input;\n\tout int out_result;\n#endif\n#ifdef GPUIO_UINT\n\tuniform usampler2D u_input;\n\tout uint out_result;\n#endif\n#ifdef GPUIO_FLOAT\n\tuniform sampler2D u_input;\n\tout float out_result;\n#endif\nvoid main() {\n\tout_result = texture(u_input, v_uv + offset).x;\n}`;\n\tif (glslVersion !== GLSL3) {\n\t\tfragmentShaderSource = convertFragmentShaderToGLSL1(fragmentShaderSource, programName)[0];\n\t}\n\tconst fragmentShader = compileShader(\n\t\tgl,\n\t\tglslVersion,\n\t\tintPrecision,\n\t\tfloatPrecision,\n\t\tfragmentShaderSource,\n\t\tgl.FRAGMENT_SHADER,\n\t\tprogramName,\n\t\t_errorCallback,\n\t\t{\n\t\t\toffset: `vec2(${offset / width}, ${offset / height})`,\n\t\t\t[isUnsignedIntType(internalType) ? 'GPUIO_UINT' : (isIntType(internalType) ? 'GPUIO_INT': 'GPUIO_FLOAT')]: '1',\n\t\t},\n\t\ttrue,\n\t);\n\n\tfunction wrapValue(val: number, max: number) {\n\t\tif (wrap === CLAMP_TO_EDGE) return Math.max(0, Math.min(max - 1, val));\n\t\treturn (val + max) % max;\n\t}\n\n\tconst vertexShader = composer._getVertexShader(DEFAULT_PROGRAM_NAME, '', {}, programName);\n\tif (vertexShader && fragmentShader) {\n\t\tconst program = initGLProgram(gl, vertexShader, fragmentShader, programName, _errorCallback);\n\t\tif (program) {\n\t\t\t// Draw setup.\n\t\t\toutput._prepareForWrite(false);\n\t\t\tbindFrameBuffer(composer, output, output._currentTexture);\n\t\t\tgl.viewport(0, 0, width, height);\n\t\t\tgl.useProgram(program);\n\t\t\t// Bind texture.\n\t\t\tgl.activeTexture(gl.TEXTURE0 );\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\t\t\t// Set uniforms.\n\t\t\tgl.uniform2fv(gl.getUniformLocation(program, 'u_gpuio_scale'), [1, 1]);\n\t\t\tgl.uniform2fv(gl.getUniformLocation(program, 'u_gpuio_translation'), [0, 0]);\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, composer._getQuadPositionsBuffer());\n\t\t\tcomposer._setPositionAttribute(program, programName);\n\n\t\t\t// Draw.\n\t\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\t\t\tgl.disable(gl.BLEND);\n\n\t\t\tconst filtered = output.getValues();\n\t\t\tlet supported = true;\n\t\t\tconst tol = isIntType(internalType) ? 0 : (internalType === HALF_FLOAT ? 1e-2 : 1e-4);\n\t\t\tfor (let x = 0; x < width; x++) {\n\t\t\t\tfor (let y = 0; y < height; y++) {\n\t\t\t\t\tlet expected;\n\t\t\t\t\tif (filter === LINEAR) {\n\t\t\t\t\t\texpected = (values[y * width + x] +\n\t\t\t\t\t\t\tvalues[y * width + wrapValue(x + 1, width)] +\n\t\t\t\t\t\t\tvalues[wrapValue(y + 1, height) * width + x] +\n\t\t\t\t\t\t\tvalues[wrapValue(y + 1, height) * width + wrapValue(x + 1, width)]) / 4;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst _x = wrapValue(x + offset, width);\n\t\t\t\t\t\tconst _y = wrapValue(y + offset, height);\n\t\t\t\t\t\texpected = values[_y * width + _x];\n\t\t\t\t\t}\n\t\t\t\t\tconst i = y * width + x;\n\t\t\t\t\tif (Math.abs((expected - filtered[i]) / expected) > tol) {\n\t\t\t\t\t\tsupported = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tresults.filterWrapSupport[key] = supported;\n\t\t\t// Clear out allocated memory.\n\t\t\tgl.deleteProgram(program);\n\t\t} else {\n\t\t\tresults.filterWrapSupport[key] = false;\n\t\t}\n\t\t// Clear out allocated memory.\n\t\t// vertexShader belongs to composer, don't delete it.\n\t\tgl.deleteShader(fragmentShader);\n\t} else {\n\t\tresults.filterWrapSupport[key] = false;\n\t}\n\t// Clear out allocated memory.\n\toutput.dispose();\n\tgl.deleteTexture(texture);\n\treturn results.filterWrapSupport[key];\n}\n\n/**\n * Get the GL type to use internally in GPULayer, based on browser support.\n * @private\n * Exported here for testing purposes.\n */\nGPULayer.getGPULayerInternalType = (\n\tparams: {\n\t\tcomposer: GPUComposer,\n\t\ttype: GPULayerType,\n\t\tname: string,\n\t},\n) => {\n\tconst { composer, name } = params;\n\tconst { _errorCallback, isWebGL2 } = composer;\n\tconst { type } = params;\n\tlet internalType = type;\n\t// Check if int types are supported.\n\tconst intCast = shouldCastIntTypeAsFloat(composer, type);\n\tif (intCast) {\n\t\tif (internalType === UNSIGNED_BYTE || internalType === BYTE) {\n\t\t\t// Integers between -2048 and +2048 can be exactly represented by half float.\n\t\t\tinternalType = HALF_FLOAT;\n\t\t} else {\n\t\t\t// Integers between 0 and 16777216 can be exactly represented by float32 (also applies for negative integers between −16777216 and 0)\n\t\t\t// This is sufficient for UNSIGNED_SHORT and SHORT types.\n\t\t\t// Large UNSIGNED_INT and INT cannot be represented by FLOAT type.\n\t\t\tconsole.warn(`Falling back ${internalType} type to FLOAT type for glsl1.x support for GPULayer \"${name}\".\nLarge UNSIGNED_INT or INT with absolute value > 16,777,216 are not supported, on mobile UNSIGNED_INT, INT, UNSIGNED_SHORT, and SHORT with absolute value > 2,048 may not be supported.`);\n\t\t\tinternalType = FLOAT;\n\t\t}\n\t}\n\n\t// Check if float textures supported.\n\tif (!isWebGL2) {\n\t\tif (internalType === FLOAT) {\n\t\t\t// The OES_texture_float extension implicitly enables WEBGL_color_buffer_float extension (for writing).\n\t\t\tconst extension = getExtension(composer, OES_TEXTURE_FLOAT, true);\n\t\t\tif (extension) {\n\t\t\t\t// https://stackoverflow.com/questions/17476632/webgl-extension-support-across-browsers\n\t\t\t\t// Rendering to a floating-point texture may not be supported, even if the OES_texture_float extension\n\t\t\t\t// is supported. Typically, this fails on mobile hardware. To check if this is supported, you have to\n\t\t\t\t// call the WebGL checkFramebufferStatus() function after attempting to attach texture to framebuffer.\n\t\t\t\tconst valid = testWriteSupport(composer, internalType);\n\t\t\t\tif (!valid) {\n\t\t\t\t\tconsole.warn(`FLOAT not supported for writing operations in this browser, falling back to HALF_FLOAT type for GPULayer \"${name}\".`);\n\t\t\t\t\tinternalType = HALF_FLOAT;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.warn(`FLOAT not supported in this browser, falling back to HALF_FLOAT type for GPULayer \"${name}\".`);\n\t\t\t\tinternalType = HALF_FLOAT;\n\t\t\t}\n\t\t}\n\t\t// Must support at least half float if using a float type.\n\t\tif (internalType === HALF_FLOAT) {\n\t\t\t// The OES_texture_half_float extension implicitly enables EXT_color_buffer_half_float extension (for writing).\n\t\t\tgetExtension(composer, OES_TEXTURE_HALF_FLOAT, true);\n\t\t\t// FYI, very old safari issues: https://stackoverflow.com/questions/54248633/cannot-create-half-float-oes-texture-from-uint16array-on-ipad\n\t\t\tconst valid = testWriteSupport(composer, internalType);\n\t\t\t// May still be ok for read-only, but this will affect the ability to call getValues() and savePNG().\n\t\t\t// We'll let it pass for now.\n\t\t\tif (!valid) {\n\t\t\t\tconsole.warn(`This browser does not support writing to HALF_FLOAT textures.`);\n\t\t\t\t// _errorCallback(`This browser does not support writing to HALF_FLOAT textures.`);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// For writable webGL2 contexts, load EXT_color_buffer_float/EXT_color_buffer_half_float extension.\n\t\tif (internalType === FLOAT) {\n\t\t\tconst extension = getExtension(composer, EXT_COLOR_BUFFER_FLOAT, true);\n\t\t\tif (!extension) {\n\t\t\t\tconsole.warn(`FLOAT not supported in this browser, falling back to HALF_FLOAT type for GPULayer \"${name}\".`);\n\t\t\t\tinternalType = HALF_FLOAT;\n\t\t\t} else {\n\t\t\t\t// Test attaching texture to framebuffer to be sure float writing is supported.\n\t\t\t\tconst valid = testWriteSupport(composer, internalType);\n\t\t\t\tif (!valid) {\n\t\t\t\t\tconsole.warn(`FLOAT not supported for writing operations in this browser, falling back to HALF_FLOAT type for GPULayer \"${name}\".`);\n\t\t\t\t\tinternalType = HALF_FLOAT;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (internalType === HALF_FLOAT) {\n\t\t\t// On WebGL 2, EXT_color_buffer_half_float is an alternative to using the EXT_color_buffer_float extension\n\t\t\t// on platforms that support 16-bit floating point render targets but not 32-bit floating point render targets.\n\t\t\tconst halfFloatExt = getExtension(composer, EXT_COLOR_BUFFER_HALF_FLOAT, true);\n\t\t\tif (!halfFloatExt) {\n\t\t\t\t// Some versions of Firefox (e.g. Firefox v104 on Mac) do not support EXT_COLOR_BUFFER_HALF_FLOAT,\n\t\t\t\t// but EXT_COLOR_BUFFER_FLOAT will work instead.\n\t\t\t\tgetExtension(composer, EXT_COLOR_BUFFER_FLOAT, true);\n\t\t\t}\n\t\t\t// Test attaching texture to framebuffer to be sure half float writing is supported.\n\t\t\tconst valid = testWriteSupport(composer, internalType);\n\t\t\t// May still be ok for read-only, but this will affect the ability to call getValues() and savePNG().\n\t\t\t// We'll let it pass for now.\n\t\t\tif (!valid) {\n\t\t\t\tconsole.warn(`This browser does not support writing to HALF_FLOAT textures.`);\n\t\t\t\t_errorCallback(`This browser does not support writing to HALF_FLOAT textures.`);\n\t\t\t}\n\t\t}\n\t}\n\treturn internalType;\n}\n\n/**\n * Min and max values for types.\n * @private\n */\nexport function minMaxValuesForType(type: GPULayerType) {\n\t// Get min and max values for int types.\n\tlet min = -Infinity;\n\tlet max = Infinity;\n\tswitch(type) {\n\t\tcase UNSIGNED_BYTE:\n\t\t\tmin = MIN_UNSIGNED_BYTE;\n\t\t\tmax = MAX_UNSIGNED_BYTE;\n\t\t\tbreak;\n\t\tcase BYTE:\n\t\t\tmin = MIN_BYTE;\n\t\t\tmax = MAX_BYTE;\n\t\t\tbreak;\n\t\tcase UNSIGNED_SHORT:\n\t\t\tmin = MIN_UNSIGNED_SHORT;\n\t\t\tmax = MAX_UNSIGNED_SHORT;\n\t\t\tbreak;\n\t\tcase SHORT:\n\t\t\tmin = MIN_SHORT;\n\t\t\tmax = MAX_SHORT;\n\t\t\tbreak;\n\t\tcase UNSIGNED_INT:\n\t\t\tmin = MIN_UNSIGNED_INT;\n\t\t\tmax = MAX_UNSIGNED_INT;\n\t\t\tbreak;\n\t\tcase INT:\n\t\t\tmin = MIN_INT;\n\t\t\tmax = MAX_INT;\n\t\t\tbreak;\n\t}\n\treturn {\n\t\tmin, max,\n\t};\n}\n\n/**\n * Recasts typed array to match GPULayer.internalType.\n * @private\n */\nGPULayer.validateGPULayerArray = (array: GPULayerArray | number[], layer: GPULayer) => {\n\tconst { numComponents, width, height, name } = layer;\n\tconst glNumChannels = layer._glNumChannels;\n\tconst internalType = layer._internalType;\n\tconst length = layer.is1D() ? layer.length : null;\n\n\t// Check that data is correct length (user error).\n\tif (array.length !== width * height * numComponents) { // Either the correct length for WebGLTexture size\n\t\tif (!length || (length &&  array.length !== length * numComponents)) { // Of the correct length for 1D array.\n\t\t\tthrow new Error(`Invalid data length: ${array.length} for GPULayer \"${name}\" of ${length ? `length ${length} and ` : ''}dimensions: [${width}, ${height}] and numComponents: ${numComponents}.`);\n\t\t}\n\t}\n\n\t// Get array type to figure out if we need to type cast.\n\t// For webgl1.0 we may need to cast an int type to a FLOAT or HALF_FLOAT.\n\tlet shouldTypeCast = false;\n\tswitch(array.constructor) {\n\t\tcase Array:\n\t\t\tshouldTypeCast = true;\n\t\t\tbreak;\n\t\tcase Float32Array:\n\t\t\tshouldTypeCast = internalType !== FLOAT;\n\t\t\tbreak;\n\t\tcase Uint8Array:\n\t\t\tshouldTypeCast = internalType !== UNSIGNED_BYTE;\n\t\t\tbreak;\n\t\tcase Int8Array:\n\t\t\tshouldTypeCast = internalType !== BYTE;\n\t\t\tbreak;\n\t\tcase Uint16Array:\n\t\t\t// User may have converted to HALF_FLOAT already.\n\t\t\t// We need to add this check in case type is UNSIGNED_SHORT and internal type is HALF_FLOAT.\n\t\t\t// (This can happen for some WebGL1 contexts.)\n\t\t\t// if (type === HALF_FLOAT) {\n\t\t\t// \tshouldTypeCast = internalType !== HALF_FLOAT;\n\t\t\t// \t// In order to complete this, we will also need to handle converting from Uint16Array to some other type.\n\t\t\t// \t// Are there cases where HALF_FLOAT is not supported?\n\t\t\t// } else {\n\t\t\t\tshouldTypeCast = internalType !== UNSIGNED_SHORT\n\t\t\t// }\n\t\t\tbreak;\n\t\tcase Int16Array:\n\t\t\tshouldTypeCast = internalType !== SHORT;\n\t\t\tbreak;\n\t\tcase Uint32Array:\n\t\t\tshouldTypeCast = internalType !== UNSIGNED_INT;\n\t\t\tbreak;\n\t\tcase Int32Array:\n\t\t\tshouldTypeCast = internalType !== INT;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error(`Invalid array type: ${array.constructor.name} for GPULayer \"${name}\", please use one of [${validArrayTypes.map(constructor => constructor.name).join(', ')}].`);\n\t}\n\n\t// Get min and max values for internalType.\n\tconst { min, max } = minMaxValuesForType(internalType);\n\n\t// Then check if array needs to be lengthened.\n\t// This could be because glNumChannels !== numComponents or because length !== width * height.\n\tconst arrayLength = width * height * glNumChannels;\n\tconst shouldResize = array.length !== arrayLength;\n\t\t\n\tlet validatedArray = array as GPULayerArray;\n\tif (shouldTypeCast || shouldResize) {\n\t\tvalidatedArray = GPULayer.initArrayForType(internalType, arrayLength);\n\t\t// Fill new data array with old data.\n\t\t// We have to handle the case of Float16 specially by converting data to Uint16Array.\n\t\tconst view = (internalType === HALF_FLOAT && shouldTypeCast) ? new DataView(validatedArray.buffer) : null;\n\t\tfor (let i = 0, _len = array.length / numComponents; i < _len; i++) {\n\t\t\tfor (let j = 0; j < numComponents; j++) {\n\t\t\t\tconst origValue = array[i * numComponents + j];\n\t\t\t\tlet value = origValue;\n\t\t\t\tlet clipped = false;\n\t\t\t\tif (value < min) {\n\t\t\t\t\tvalue = min;\n\t\t\t\t\tclipped = true;\n\t\t\t\t} else if (value > max) {\n\t\t\t\t\tvalue = max;\n\t\t\t\t\tclipped = true;\n\t\t\t\t}\n\t\t\t\tif (clipped) {\n\t\t\t\t\tconsole.warn(`Clipping out of range value ${origValue} to ${value} for GPULayer \"${name}\" with internal type ${internalType}.`);\n\t\t\t\t}\n\t\t\t\tconst index = i * glNumChannels + j;\n\t\t\t\tif (view) {\n\t\t\t\t\tsetFloat16(view, 2 * index, value, true);\n\t\t\t\t} else {\n\t\t\t\t\tvalidatedArray[index] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn validatedArray;\n}","import type { GPUComposer } from './GPUComposer';\nimport {\n\tFLOAT_1D_UNIFORM,\n\tFLOAT_2D_UNIFORM,\n\tFLOAT_3D_UNIFORM,\n\tFLOAT_4D_UNIFORM,\n\tINT_1D_UNIFORM,\n\tINT_2D_UNIFORM,\n\tINT_3D_UNIFORM,\n\tINT_4D_UNIFORM,\n\tUniform,\n\tUniformType,\n\tUniformInternalType,\n\tUniformValue,\n\tCompileTimeConstants,\n\tPROGRAM_NAME_INTERNAL,\n\tUINT_1D_UNIFORM,\n\tUINT_2D_UNIFORM,\n\tUINT_3D_UNIFORM,\n\tUINT_4D_UNIFORM,\n\tUniformParams,\n\tBOOL_1D_UNIFORM,\n\tBOOL_2D_UNIFORM,\n\tBOOL_3D_UNIFORM,\n\tBOOL_4D_UNIFORM,\n\tGLSL3,\n\tGPULayerState,\n\tREPEAT,\n\tLINEAR,\n\tGLSL1,\n} from './constants';\nimport {\n\tcompileShader,\n\tpreprocessFragmentShader,\n\tinitGLProgram,\n\tuniformInternalTypeForValue,\n\tisIntType,\n} from './utils';\nimport {\n\tSAMPLER2D_CAST_INT,\n\tSAMPLER2D_DIMENSIONS_UNIFORM,\n\tSAMPLER2D_FILTER,\n\tSAMPLER2D_HALF_PX_UNIFORM,\n\tSAMPLER2D_WRAP_X,\n\tSAMPLER2D_WRAP_Y,\n} from './polyfills';\nimport {\n\tisArray,\n\tisBoolean,\n\tisFiniteNumber,\n\tisInteger,\n\tisNonNegativeInteger,\n\tisObject,\n\tisString,\n} from '@amandaghassaei/type-checks';\nimport { checkRequiredKeys, checkValidKeys } from './checks';\n\nexport class GPUProgram {\n\t// Keep a reference to GPUComposer.\n\tprivate readonly _composer: GPUComposer;\n\n\t/**\n\t * Name of GPUProgram, used for error logging.\n\t */\n\treadonly name: string;\n\n\t// Compiled fragment shaders (we hang onto different versions depending on compile time constants).\n\tprivate _fragmentShaders: {[key: string]: WebGLShader} = {};\n\t// Source code for fragment shader.\n\t// Hold onto this in case we need to recompile with different #defines.\n\tprotected _fragmentShaderSource!: string;\n\t// #define variables for fragment shader program.\n\tprivate readonly _compileTimeConstants: CompileTimeConstants = {};\n\t// Uniform locations, values, and types.\n\tprivate readonly _uniforms: { [ key: string]: Uniform } = {};\n\n\t// Store WebGLProgram's - we need to compile several WebGLPrograms of GPUProgram.fragmentShader + various vertex shaders.\n\t// Each combination of vertex + fragment shader requires a separate WebGLProgram.\n\t// These programs are compiled on the fly as needed.\n\tprivate readonly _programs: {[key: string]: WebGLProgram } = {};\n\t// Reverse lookup for above.\n\tprivate readonly _programsKeyLookup = new WeakMap<WebGLProgram, string>();\n\n\t// Store the index of input sampler2D in input array.\n\tprotected readonly _samplerUniformsIndices: { name: string, inputIndex: number, shaderIndex: number }[] = [];\n\n\t/**\n\t * This is only used in cases where GLSL1 program has multiple outputs.\n\t * @private\n\t */\n\t_childPrograms?: GPUProgramChild[];\n\n\t/**\n     * Create a GPUProgram.\n     * @param composer - The current GPUComposer instance.\n     * @param params - GPUProgram parameters.\n\t * @param params.name - Name of GPUProgram, used for error logging.\n\t * @param params.fragmentShader - Fragment shader source or array of sources to be joined.\n\t * @param params.uniforms - Array of uniforms to initialize with GPUProgram.  More uniforms can be added later with GPUProgram.setUniform().\n\t * @param params.compileTimeConstants - Compile time #define constants to include with fragment shader.\n     */\n\tconstructor(\n\t\tcomposer: GPUComposer,\n\t\tparams: {\n\t\t\tname: string,\n\t\t\t// We may want to pass in an array of shader string sources, if split across several files.\n\t\t\tfragmentShader: string | string[],\n\t\t\tuniforms?: UniformParams[],\n\t\t\t// We'll allow some compile time constants to be passed in as #define to the preprocessor for the fragment shader.\n\t\t\tcompileTimeConstants?: CompileTimeConstants,\n\t\t},\n\t) {\n\t\t// Check constructor parameters.\n\t\tconst { name } = (params || {});\n\t\tif (!composer) {\n\t\t\tthrow new Error(`Error initing GPUProgram \"${name}\": must pass GPUComposer instance to GPUProgram(composer, params).`);\n\t\t}\n\t\tif (!params) {\n\t\t\tthrow new Error(`Error initing GPUProgram: must pass params to GPUProgram(composer, params).`);\n\t\t}\n\t\tif (!isObject(params)) {\n\t\t\tthrow new Error(`Error initing GPUProgram: must pass valid params object to GPUProgram(composer, params), got ${JSON.stringify(params)}.`);\n\t\t}\n\t\t// Check params keys.\n\t\tconst validKeys = ['name', 'fragmentShader', 'uniforms', 'compileTimeConstants'];\n\t\tconst requiredKeys = ['name', 'fragmentShader'];\n\t\tconst keys = Object.keys(params);\n\t\tcheckValidKeys(keys, validKeys, 'GPUProgram(composer, params)', params.name);\n\t\tcheckRequiredKeys(keys, requiredKeys, 'GPUProgram(composer, params)', params.name);\n\n\t\tconst { fragmentShader, uniforms, compileTimeConstants } = params;\n\n\t\t// Save arguments.\n\t\tthis._composer = composer;\n\t\tthis.name = name;\n\n\t\t// Preprocess fragment shader source.\n\t\tconst fragmentShaderSource = isString(fragmentShader) ?\n\t\t\t\tfragmentShader as string :\n\t\t\t\t(fragmentShader as string[]).join('\\n');\n\t\tconst { shaderSource, samplerUniforms, additionalSources } = preprocessFragmentShader(\n\t\t\tfragmentShaderSource, composer.glslVersion, name,\n\t\t);\n\t\tthis._fragmentShaderSource = shaderSource;\n\t\tsamplerUniforms.forEach((name, i) => {\n\t\t\tthis._samplerUniformsIndices.push({\n\t\t\t\tname,\n\t\t\t\tinputIndex: 0, // All uniforms default to 0.\n\t\t\t\tshaderIndex: i,\n\t\t\t});\n\t\t});\n\t\tif (this.constructor === GPUProgram) { // This is not a child program.\n\t\t\tif (additionalSources) {\n\t\t\t\tthis._childPrograms = [];\n\t\t\t\tfor (let i = 0, numChildren = additionalSources.length; i < numChildren; i++) {\n\t\t\t\t\tthis._childPrograms.push(new GPUProgramChild(composer, params, { fragmentShaderSource: additionalSources[i] }));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Save compile time constants.\n\t\tif (compileTimeConstants) {\n\t\t\tthis._compileTimeConstants = { ...compileTimeConstants };\n\t\t}\n\n\t\t// Set program uniforms.\n\t\tif (uniforms) {\n\t\t\tfor (let i = 0; i < uniforms.length; i++) {\n\t\t\t\tconst { name, value, type } = uniforms[i];\n\t\t\t\tthis.setUniform(name, value, type);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Force compilation of GPUProgram with new compileTimeConstants.\n\t * @param compileTimeConstants - Compile time #define constants to include with fragment shader.\n\t */\n\trecompile(compileTimeConstants: CompileTimeConstants) {\n\t\tconst { _compileTimeConstants } = this;\n\t\t// Check if we have changed the compile-time constants.\n\t\t// compileTimeConstants may be a partial list.\n\t\tlet needsRecompile = false;\n\t\tObject.keys(compileTimeConstants).forEach(key => {\n\t\t\tif (_compileTimeConstants[key] !== compileTimeConstants[key]) {\n\t\t\t\tneedsRecompile = true;\n\t\t\t\t_compileTimeConstants[key] = compileTimeConstants[key];\n\t\t\t}\n\t\t});\n\t\tif (!needsRecompile) return;\n\t\tconst { \n\t\t\t_fragmentShaders,\n\t\t\t_programs,\n\t\t\t_programsKeyLookup,\n\t\t\t_composer,\n\t\t\t_uniforms,\n\t\t} = this;\n\t\tconst { gl } = _composer;\n\t\t// Delete cached compiled shaders and programs.\n\t\tconst programKeys = Object.keys(_programs);\n\t\tfor (let i = 0, numPrograms = programKeys.length; i < numPrograms; i++) {\n\t\t\tconst key = programKeys[i];\n\t\t\tconst program = _programs[key];\n\t\t\tgl.deleteProgram(program);\n\t\t\t_programsKeyLookup.delete(program);\n\t\t\tdelete _programs[key];\n\t\t}\n\t\tconst fragmentShaderKeys = Object.keys(_fragmentShaders);\n\t\tfor (let i = 0, numFragmentShaders = fragmentShaderKeys.length; i < numFragmentShaders; i++) {\n\t\t\tconst key = fragmentShaderKeys[i];\n\t\t\tgl.deleteShader(_fragmentShaders[key]);\n\t\t\tdelete _fragmentShaders[key];\n\t\t}\n\t\t// Delete all cached uniform locations.\n\t\tconst uniforms = Object.values(_uniforms);\n\t\tfor (let i = 0, numUniforms = uniforms.length; i < numUniforms; i++) {\n\t\t\tuniforms[i].location = new WeakMap();\n\t\t}\n\n\t\tif (this._childPrograms) {\n\t\t\tfor (let i = 0, numChildren = this._childPrograms.length; i < numChildren; i++) {\n\t\t\t\tthis._childPrograms[i].recompile(compileTimeConstants);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get fragment shader for GPUProgram, compile new one if needed.\n\t * Used internally.\n\t * @private\n\t */\n\tprivate _getFragmentShader(fragmentId: string, internalCompileTimeConstants: CompileTimeConstants, ) {\n\t\tconst { _fragmentShaders } = this;\n\t\tif (_fragmentShaders[fragmentId]) {\n\t\t\t// No need to recompile.\n\t\t\treturn _fragmentShaders[fragmentId];\n\t\t}\n\n\t\tconst { _composer, name, _fragmentShaderSource, _compileTimeConstants } = this;\n\t\tconst {\n\t\t\tgl,\n\t\t\t_errorCallback,\n\t\t\tverboseLogging,\n\t\t\tglslVersion,\n\t\t\tfloatPrecision,\n\t\t\tintPrecision,\n\t\t} = _composer;\n\t\t\n\t\t// Update compile time constants.\n\t\tconst keys = Object.keys(internalCompileTimeConstants);\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tconst key = keys[i];\n\t\t\t_compileTimeConstants[key] = internalCompileTimeConstants[key];\n\t\t}\n\n\t\tif (verboseLogging) console.log(`Compiling fragment shader for GPUProgram \"${name}\" with compile time constants: ${JSON.stringify(_compileTimeConstants)}`);\n\t\tconst shader = compileShader(\n\t\t\tgl,\n\t\t\tglslVersion,\n\t\t\tintPrecision,\n\t\t\tfloatPrecision,\n\t\t\t_fragmentShaderSource,\n\t\t\tgl.FRAGMENT_SHADER,\n\t\t\tname,\n\t\t\t_errorCallback,\n\t\t\t_compileTimeConstants,\n\t\t\tObject.keys(_fragmentShaders).length === 0,\n\t\t);\n\t\tif (!shader) {\n\t\t\t_errorCallback(`Unable to compile fragment shader for GPUProgram \"${name}\".`);\n\t\t\treturn;\n\t\t}\n\t\t_fragmentShaders[fragmentId] = shader;\n\t\treturn _fragmentShaders[fragmentId];\n\t}\n\n\t/**\n\t * Get GLProgram associated with a specific vertex shader.\n\t * @private\n\t */\n\t_getProgramWithName(name: PROGRAM_NAME_INTERNAL, vertexCompileConstants: CompileTimeConstants, input: GPULayerState[]) {\n\t\tconst { _samplerUniformsIndices, _composer } = this;\n\n\t\tlet fragmentID = '';\n\t\tconst fragmentCompileConstants: CompileTimeConstants = {};\n\t\tfor (let i = 0, length = _samplerUniformsIndices.length; i < length; i++) {\n\t\t\tconst { inputIndex } = _samplerUniformsIndices[i];\n\t\t\tconst { layer } = input[inputIndex];\n\t\t\tconst {\n\t\t\t\tfilter, wrapX, wrapY, type,\n\t\t\t\t_internalFilter, _internalWrapX, _internalWrapY,\n\t\t\t} = layer;\n\t\t\tconst wrapXVal = wrapX === _internalWrapX ? 0 : (wrapX === REPEAT ? 1 : 0);\n\t\t\tconst wrapYVal = wrapY === _internalWrapY ? 0 : (wrapY === REPEAT ? 1 : 0);\n\t\t\tconst filterVal = filter === _internalFilter ? 0 : (filter === LINEAR ? 1 : 0);\n\t\t\tfragmentID += `_IN${i}_${wrapXVal}_${wrapYVal}_${filterVal}`;\n\t\t\tfragmentCompileConstants[`${SAMPLER2D_WRAP_X}${i}`] = `${wrapXVal}`;\n\t\t\tfragmentCompileConstants[`${SAMPLER2D_WRAP_Y}${i}`] = `${wrapYVal}`;\n\t\t\tfragmentCompileConstants[`${SAMPLER2D_FILTER}${i}`] = `${filterVal}`;\n\t\t\tif (_composer.glslVersion === GLSL1 && isIntType(type)) {\n\t\t\t\tfragmentCompileConstants[`${SAMPLER2D_CAST_INT}${i}`] = '1';\n\t\t\t}\n\t\t}\n\t\tconst vertexID = Object.keys(vertexCompileConstants).map(key => `_${key}_${vertexCompileConstants[key]}`).join();\n\t\tconst key = `${name}${vertexID}${fragmentID}`;\n\n\t\t// Check if we've already compiled program.\n\t\tif (this._programs[key]) return this._programs[key];\n\n\t\t// Otherwise, we need to compile a new program on the fly.\n\t\tconst { _uniforms, _programs, _programsKeyLookup } = this;\n\t\tconst { gl, _errorCallback } = _composer;\n\n\t\tconst vertexShader = _composer._getVertexShader(name, vertexID, vertexCompileConstants, this.name);\n\t\tif (vertexShader === undefined) {\n\t\t\t_errorCallback(`Unable to init vertex shader \"${name}${vertexID}\" for GPUProgram \"${this.name}\".`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst fragmentShader = this._getFragmentShader(fragmentID, fragmentCompileConstants);\n\t\tif (fragmentShader === undefined) {\n\t\t\t_errorCallback(`Unable to init fragment shader \"${fragmentID}\" for GPUProgram \"${this.name}\".`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst program = initGLProgram(gl, vertexShader, fragmentShader, this.name, _errorCallback);\n\t\tif (program === undefined) {\n\t\t\tgl.deleteShader(fragmentShader);\n\t\t\t_errorCallback(`Unable to init program \"${key}\" for GPUProgram \"${this.name}\".`);\n\t\t\treturn;\n\t\t}\n\n\t\t// If we have any uniforms set for this GPUProgram, add those to WebGLProgram we just inited.\n\t\t// Set active program.\n\t\tgl.useProgram(program);\n\t\tconst uniformNames = Object.keys(_uniforms);\n\t\tfor (let i = 0, numUniforms = uniformNames.length; i < numUniforms; i++) {\n\t\t\tconst uniformName = uniformNames[i];\n\t\t\tconst uniform = _uniforms[uniformName];\n\t\t\tconst { value, type } = uniform;\n\t\t\tthis._setProgramUniform(program, uniformName, value, type);\n\t\t}\n\n\t\t_programs[key] = program;\n\t\t_programsKeyLookup.set(program, key);\n\t\treturn program;\n\t}\n\n\t/**\n\t * Set uniform for GLProgram.\n\t * @private\n\t */\n\tprivate _setProgramUniform(\n\t\tprogram: WebGLProgram,\n\t\tuniformName: string,\n\t\tvalue: UniformValue,\n\t\ttype: UniformInternalType,\n\t) {\n\t\tconst { _composer, _uniforms } = this;\n\t\tconst { gl, _errorCallback, glslVersion } = _composer;\n\n\t\t// We have already set gl.useProgram(program) outside this function.\n\n\t\tconst isGLSL3 = glslVersion === GLSL3;\n\n\t\tlet location = _uniforms[uniformName]?.location.get(program);\n\t\t// Init a location for WebGLProgram if needed (only do this once).\n\t\tif (location === undefined) {\n\t\t\tconst _location = gl.getUniformLocation(program, uniformName);\n\t\t\tif (_location === null) {\n\t\t\t\tconsole.warn(`Could not init uniform \"${uniformName}\" for program \"${this.name}\". Check that uniform is present in shader code, unused uniforms may be removed by compiler. Also check that uniform type in shader code matches type ${type}. Error code: ${gl.getError()}.`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlocation = _location;\n\n\t\t\t// Save location for future use.\n\t\t\tif (_uniforms[uniformName]) {\n\t\t\t\t_uniforms[uniformName].location.set(program, location);\n\t\t\t}\n\n\t\t\t// Since this is the first time we are initing the uniform, check that type is correct.\n\t\t\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getUniform\n\t\t\tconst uniform = gl.getUniform(program, location);\n\t\t\tlet badType = false;\n\t\t\tif (type === BOOL_1D_UNIFORM || type === BOOL_2D_UNIFORM || type === BOOL_3D_UNIFORM || type === BOOL_4D_UNIFORM) {\n\t\t\t\tif (!isBoolean(uniform) && uniform.constructor !== Array) {\n\t\t\t\t\tbadType = true;\n\t\t\t\t}\n\t\t\t} else if (type === FLOAT_1D_UNIFORM || type === FLOAT_2D_UNIFORM || type === FLOAT_3D_UNIFORM || type === FLOAT_4D_UNIFORM) {\n\t\t\t\tif (!isFiniteNumber(uniform) && uniform.constructor !== Float32Array) {\n\t\t\t\t\tbadType = true;\n\t\t\t\t}\n\t\t\t} else if (type === INT_1D_UNIFORM || type === INT_2D_UNIFORM || type === INT_3D_UNIFORM || type === INT_4D_UNIFORM) {\n\t\t\t\tif (!isInteger(uniform) && uniform.constructor !== Int32Array) {\n\t\t\t\t\tbadType = true;\n\t\t\t\t}\n\t\t\t} else if (type === UINT_1D_UNIFORM || type === UINT_2D_UNIFORM || type === UINT_3D_UNIFORM || type === UINT_4D_UNIFORM) {\n\t\t\t\tif (!isGLSL3) {\n\t\t\t\t\t// GLSL1 does not have uint type, expect int instead.\n\t\t\t\t\tif (!isNonNegativeInteger(uniform) && uniform.constructor !== Int32Array) {\n\t\t\t\t\t\tbadType = true;\n\t\t\t\t\t}\n\t\t\t\t} else if (!isNonNegativeInteger(uniform) && uniform.constructor !== Uint32Array) {\n\t\t\t\t\tbadType = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (badType) {\n\t\t\t\t_errorCallback(`Invalid uniform \"${uniformName}\" for program \"${this.name}\". Check that uniform type in shader code matches type ${type}, gl.getUniform(program, location) returned type: ${uniform.constructor.name}.`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Set uniform.\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform\n\t\tswitch (type) {\n\t\t\t// We are setting boolean uniforms with uniform[1234]i.\n\t\t\t// This suggest floats work as well, but ints seem more natural:\n\t\t\t// https://github.com/KhronosGroup/WebGL/blob/main/sdk/tests/conformance/uniforms/gl-uniform-bool.html\n\t\t\tcase BOOL_1D_UNIFORM:\n\t\t\t\tgl.uniform1i(location, value ? 1 : 0);\n\t\t\t\tbreak;\n\t\t\tcase BOOL_2D_UNIFORM:\n\t\t\t\tgl.uniform2i(location, (value as number[])[0] ? 1 : 0, (value as number[])[1] ? 1 : 0);\n\t\t\t\tbreak;\n\t\t\tcase BOOL_3D_UNIFORM:\n\t\t\t\tgl.uniform3i(location, (value as number[])[0] ? 1 : 0, (value as number[])[1] ? 1 : 0, (value as number[])[2] ? 1 : 0);\n\t\t\t\tbreak;\n\t\t\tcase BOOL_4D_UNIFORM:\n\t\t\t\tgl.uniform4i(location, (value as number[])[0] ? 1 : 0, (value as number[])[1] ? 1 : 0, (value as number[])[2] ? 1 : 0, (value as number[])[3] ? 1 : 0);\n\t\t\t\tbreak;\n\t\t\tcase FLOAT_1D_UNIFORM:\n\t\t\t\tgl.uniform1f(location, value as number);\n\t\t\t\tbreak;\n\t\t\tcase FLOAT_2D_UNIFORM:\n\t\t\t\tgl.uniform2fv(location, value as number[]);\n\t\t\t\tbreak;\n\t\t\tcase FLOAT_3D_UNIFORM:\n\t\t\t\tgl.uniform3fv(location, value as number[]);\n\t\t\t\tbreak;\n\t\t\tcase FLOAT_4D_UNIFORM:\n\t\t\t\tgl.uniform4fv(location, value as number[]);\n\t\t\t\tbreak;\n\t\t\tcase INT_1D_UNIFORM:\n\t\t\t\tgl.uniform1i(location, value as number);\n\t\t\t\tbreak;\n\t\t\tcase INT_2D_UNIFORM:\n\t\t\t\tgl.uniform2iv(location, value as number[]);\n\t\t\t\tbreak;\n\t\t\tcase INT_3D_UNIFORM:\n\t\t\t\tgl.uniform3iv(location, value as number[]);\n\t\t\t\tbreak;\n\t\t\tcase INT_4D_UNIFORM:\n\t\t\t\tgl.uniform4iv(location, value as number[]);\n\t\t\t\tbreak;\n\t\t\t// Uint not supported in GLSL1, use int instead.\n\t\t\tcase UINT_1D_UNIFORM:\n\t\t\t\tif (isGLSL3) (gl as WebGL2RenderingContext).uniform1ui(location, value as number);\n\t\t\t\telse gl.uniform1i(location, value as number);\n\t\t\t\tbreak;\n\t\t\tcase UINT_2D_UNIFORM:\n\t\t\t\tif (isGLSL3) (gl as WebGL2RenderingContext).uniform2uiv(location, value as number[]);\n\t\t\t\telse gl.uniform2iv(location, value as number[]);\n\t\t\t\tbreak;\n\t\t\tcase UINT_3D_UNIFORM:\n\t\t\t\tif (isGLSL3) (gl as WebGL2RenderingContext).uniform3uiv(location, value as number[]);\n\t\t\t\telse gl.uniform3iv(location, value as number[]);\n\t\t\t\tbreak;\n\t\t\tcase UINT_4D_UNIFORM:\n\t\t\t\tif (isGLSL3) (gl as WebGL2RenderingContext).uniform4uiv(location, value as number[]);\n\t\t\t\telse gl.uniform4iv(location, value as number[]);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unknown uniform type ${type} for GPUProgram \"${this.name}\".`);\n\t\t}\n\t}\n\n\t/**\n\t * Cache uniform value and return whether the value has changed.\n\t * @private\n\t */\n\tprivate _cacheUniformValue(name: string, value: UniformValue, type: UniformInternalType) {\n\t\tconst { _uniforms } = this;\n\t\t// Cache uniform values.\n\t\tconst uniform = _uniforms[name];\n\t\tif (!uniform) {\n\t\t\t// Init uniform if needed.\n\t\t\t_uniforms[name] = { location: new WeakMap(), value: isArray(value) ? (value as number[]).slice() : value, type };\n\t\t\treturn true;\n\t\t}\n\t\tconst oldValue = uniform.value;\n\t\t// Update value with a deep copy of input.\n\t\tuniform.value = isArray(value) ? (value as number[]).slice() : value;\n\t\t// Deep check if value has changed.\n\t\tif (isArray(value)) {\n\t\t\tfor (let i = 0, length = (value as number[]).length; i < length; i++) {\n\t\t\t\tif ((value as number[])[i] !== (oldValue as number[])[i]) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false; // No change.\n\t\t}\n\t\treturn value !== oldValue;\n\t}\n\n\t/**\n\t * Set fragment shader uniform for GPUProgram.\n\t * @param name - Uniform name as it appears in fragment shader.\n\t * @param value - Uniform value.\n\t */\n\tsetUniform(\n\t\tname: string,\n\t\tvalue: UniformValue,\n\t\ttype?: UniformType,\n\t) {\n\t\tconst { _programs, _uniforms, _composer, _samplerUniformsIndices } = this;\n\t\tconst { verboseLogging, gl } = _composer;\n\n\t\t// Check that length of value is correct.\n\t\tif (isArray(value)) {\n\t\t\tconst length = (value as number[]).length;\n\t\t\tif (length > 4) throw new Error(`Invalid uniform value: [${(value as number[]).join(', ')}] passed to GPUProgram \"${this.name}, uniforms must be of type number[] with length <= 4, number, or boolean.\"`)\n\t\t}\n\n\t\t// Get uniform internal type.\n\t\tlet currentType = _uniforms[name]?.type;\n\t\tif (type) {\n\t\t\tconst internalType = uniformInternalTypeForValue(value, type, name, this.name);\n\t\t\tif (currentType === undefined) currentType = internalType;\n\t\t\telse {\n\t\t\t\t// console.warn(`Don't need to pass in type to GPUProgram.setUniform for previously inited uniform \"${uniformName}\"`);\n\t\t\t\t// Check that types match previously set uniform.\n\t\t\t\tif (currentType !== internalType) {\n\t\t\t\t\tthrow new Error(`Uniform \"${name}\" for GPUProgram \"${this.name}\" cannot change from type ${currentType} to type ${internalType}.`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (currentType === undefined) {\n\t\t\tthrow new Error(`Unknown type for uniform \"${name}\", please pass in type to GPUProgram.setUniform(name, value, type) when initing a new uniform.`);\n\t\t}\n\n\t\tconst changed = this._cacheUniformValue(name, value, currentType);\n\t\tif (!changed) return;\n\n\t\t// Cache user-defined sampler uniform values.\n\t\tconst samplerUniform = _samplerUniformsIndices.find((uniform) => uniform.name === name);\n\t\tif (samplerUniform && isInteger(value)) {\n\t\t\tsamplerUniform.inputIndex = value as number;\n\t\t}\n\n\t\tif (verboseLogging) console.log(`Setting uniform \"${name}\" for program \"${this.name}\" to value ${JSON.stringify(value)}.`)\n\n\t\t// Update any active programs.\n\t\tconst programNames = Object.keys(_programs);\n\t\tfor (let i = 0, numPrograms = programNames.length; i < numPrograms; i++) {\n\t\t\tconst programName = programNames[i];\n\t\t\t// Set active program.\n\t\t\tconst program = _programs[programName]!;\n\t\t\tgl.useProgram(program);\n\t\t\tthis._setProgramUniform(program, name, value, currentType);\n\t\t}\n\n\t\t// this code is only executed in cases where we have a shader program with multiple outputs in a WebGL1 context.\n\t\t// Notify all child programs of the setUniform.\n\t\tif (this._childPrograms) {\n\t\t\tfor (let i = 0, numChildren = this._childPrograms.length; i < numChildren; i++) {\n\t\t\t\tthis._childPrograms[i].setUniform(name, value, type);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Set internal fragment shader uniforms for GPUProgram.\n\t * @private\n\t */\n\t_setInternalFragmentUniforms(\n\t\tprogram: WebGLProgram,\n\t\tinput: GPULayerState[],\n\t) {\n\t\tif (input.length === 0) return;\n\t\tif (!program) {\n\t\t\tthrow new Error('Must pass in valid WebGLProgram to GPUProgram._setInternalFragmentUniforms, got undefined.');\n\t\t}\n\t\tconst { _programsKeyLookup, _samplerUniformsIndices } = this;\n\t\tconst programName = _programsKeyLookup.get(program);\n\t\tif (!programName) {\n\t\t\tthrow new Error(`Could not find valid programName for WebGLProgram in GPUProgram \"${this.name}\".`);\n\t\t}\n\n\t\tconst indexLookup = new Array(_samplerUniformsIndices.length).fill(-1);\n\t\tfor (let i = 0, length = _samplerUniformsIndices.length; i < length; i++) {\n\t\t\tconst { inputIndex, shaderIndex } = _samplerUniformsIndices[i];\n\t\t\tif (indexLookup[inputIndex] >= 0) {\n\t\t\t\t// There is an index collision, this should not happen.\n\t\t\t\tconsole.warn(`Found > 1 sampler2D uniforms at texture index ${inputIndex} for GPUProgram \"${this.name}\".`);\n\t\t\t} else {\n\t\t\t\tindexLookup[inputIndex] = shaderIndex;\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0, length = input.length; i < length; i++) {\n\t\t\tconst { layer } = input[i];\n\t\t\tconst { width, height } = layer;\n\t\t\tconst index = indexLookup[i];\n\t\t\tif (index < 0) continue;\n\t\t\tconst { filter, wrapX, wrapY, _internalFilter, _internalWrapX, _internalWrapY } = layer;\n\t\t\tconst filterMismatch = filter !== _internalFilter;\n\t\t\tif (filterMismatch || wrapX !== _internalWrapX || wrapY !== _internalWrapY) {\n\t\t\t\tconst halfPxSize = [0.5 / width, 0.5 / height];\n\t\t\t\tconst halfPxUniform = `${SAMPLER2D_HALF_PX_UNIFORM}${index}`;\n\t\t\t\tconst halfPxUniformChanged = this._cacheUniformValue(halfPxUniform, halfPxSize, FLOAT_2D_UNIFORM);\n\t\t\t\tif (halfPxUniformChanged) {\n\t\t\t\t\tthis._setProgramUniform(\n\t\t\t\t\t\tprogram,\n\t\t\t\t\t\thalfPxUniform,\n\t\t\t\t\t\thalfPxSize,\n\t\t\t\t\t\tFLOAT_2D_UNIFORM,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (filterMismatch) {\n\t\t\t\t\tconst dimensions = [width, height];\n\t\t\t\t\tconst dimensionsUniform = `${SAMPLER2D_DIMENSIONS_UNIFORM}${index}`;\n\t\t\t\t\tconst dimensionsUniformChanged = this._cacheUniformValue(dimensionsUniform, dimensions, FLOAT_2D_UNIFORM);\n\t\t\t\t\tif (dimensionsUniformChanged) {\n\t\t\t\t\t\tthis._setProgramUniform(\n\t\t\t\t\t\t\tprogram,\n\t\t\t\t\t\t\tdimensionsUniform,\n\t\t\t\t\t\t\tdimensions,\n\t\t\t\t\t\t\tFLOAT_2D_UNIFORM,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Set vertex shader uniform for GPUProgram.\n\t * @private\n\t */\n\t_setVertexUniform(\n\t\tprogram: WebGLProgram,\n\t\tuniformName: string,\n\t\tvalue: UniformValue,\n\t\ttype: UniformType,\n\t) {\n\t\tif (!program) {\n\t\t\tthrow new Error('Must pass in valid WebGLProgram to GPUProgram._setVertexUniform, got undefined.');\n\t\t}\n\t\tconst { _programsKeyLookup } = this;\n\t\tconst programName = _programsKeyLookup.get(program);\n\t\tif (!programName) {\n\t\t\tthrow new Error(`Could not find valid programName for WebGLProgram in GPUProgram \"${this.name}\".`);\n\t\t}\n\t\tconst internalType = uniformInternalTypeForValue(value, type, uniformName, this.name);\n\t\t// const changed = this._cacheUniformValue(uniformName, value, internalType);\n\t\t// Don't cache vertex uniforms for now.\n\t\t// TODO: cached vertex uniforms need to be stored per WebGLProgram.\n\t\tthis._setProgramUniform(program, uniformName, value, internalType);\n\t}\n\n\t/**\n\t * Deallocate GPUProgram instance and associated WebGL properties.\n\t */\n\tdispose() {\n\t\tconst { _composer, _fragmentShaders, _programs, _programsKeyLookup } = this;\n\t\tconst { gl, verboseLogging } = _composer;\n\n\t\tif (verboseLogging) console.log(`Deallocating GPUProgram \"${this.name}\".`);\n\t\tif (!gl) throw new Error(`Must call dispose() on all GPUPrograms before calling dispose() on GPUComposer.`);\n\n\t\t// Unbind all gl data before deleting.\n\t\tObject.values(_programs).forEach(program => {\n\t\t\tif (program) {\n\t\t\t\tgl.deleteProgram(program);\n\t\t\t\t_programsKeyLookup.delete(program);\n\t\t\t}\n\t\t});\n\t\tObject.keys(_programs).forEach(key => {\n\t\t\tdelete _programs[key as PROGRAM_NAME_INTERNAL];\n\t\t});\n\n\t\t// Delete fragment shaders.\n\t\tObject.values(_fragmentShaders).forEach(shader => {\n\t\t\tgl.deleteShader(shader);\n\t\t});\n\t\tObject.keys(_fragmentShaders).forEach(key => {\n\t\t\tdelete _fragmentShaders[key];\n\t\t});\n\n\t\tif (this._childPrograms) {\n\t\t\tfor (let i = 0, numChildren = this._childPrograms.length; i < numChildren; i++) {\n\t\t\t\tthis._childPrograms[i].dispose();\n\t\t\t}\n\t\t\tthis._childPrograms.length;\n\t\t}\n\t\tdelete this._childPrograms;\n\t\t\n\t\t// Vertex shaders are owned by GPUComposer and shared across many GPUPrograms.\n\n\t\t// Delete all references.\n\t\t// @ts-ignore\n\t\tdelete this._composer;\n\t\t// @ts-ignore\n\t\tdelete this.name;\n\t\t// @ts-ignore\n\t\tdelete this._fragmentShaderSource;\n\t\t// @ts-ignore\n\t\tdelete this._compileTimeConstants;\n\t\t// @ts-ignore\n\t\tdelete this._uniforms;\n\t\t// @ts-ignore\n\t\tdelete this._programs;\n\t\t// @ts-ignore\n\t\tdelete this._programsKeyLookup;\n\t\t// @ts-ignore\n\t\tdelete this._fragmentShaders;\n\t\t// @ts-ignore\n\t\tdelete this._samplerUniformsIndices;\n\t}\n}\n\nclass GPUProgramChild extends GPUProgram {\n\tconstructor(\n\t\tcomposer: GPUComposer,\n\t\tparams: {\n\t\t\tname: string,\n\t\t\t// We may want to pass in an array of shader string sources, if split across several files.\n\t\t\tfragmentShader: string | string[],\n\t\t\tuniforms?: UniformParams[],\n\t\t\t// We'll allow some compile time constants to be passed in as #define to the preprocessor for the fragment shader.\n\t\t\tcompileTimeConstants?: CompileTimeConstants,\n\t\t},\n\t\t_gpuio_child_params: {\n\t\t\tfragmentShaderSource: string,\n\t\t},\n\t) {\n\t\tsuper(composer, params);\n\n\t\tconst { fragmentShaderSource } = _gpuio_child_params;\n\t\t// fragmentShader has already been pre-processed.\n\t\tthis._fragmentShaderSource = fragmentShaderSource;\n\t}\n}","import { isArray } from '@amandaghassaei/type-checks';\nimport {\n\tFLOAT,\n\tGLSLPrecision,\n\tGPULayerNumComponents,\n\tGPULayerType,\n\tINT,\n} from './constants';\nimport {\n\tglslComponentSelectionForNumComponents,\n\tglslPrefixForType,\n\tglslTypeForType,\n\tuniformTypeForType,\n} from './conversions';\nimport type { GPUComposer } from './GPUComposer';\nimport { GPUProgram } from './GPUProgram';\n\n/**\n * Init GPUProgram to copy contents of one GPULayer to another GPULayer.\n * @category GPUProgram Helper\n * @param composer - The current GPUComposer.\n * @param params - Program parameters.\n * @param params.type - The type of the input/output.\n * @param params.name - Optionally pass in a GPUProgram name, used for error logging.\n * @param params.precision - Optionally specify the precision of the input/output.\n * @returns\n */\nexport function copyProgram(composer: GPUComposer, params: {\n\ttype: GPULayerType,\n\tname?: string,\n\tprecision?: GLSLPrecision,\n}) {\n\tconst { type } = params;\n\tconst precision = params.precision || '';\n\tconst glslType = glslTypeForType(type, 4);\n\tconst name = params.name ||`copy_${uniformTypeForType(type, composer.glslVersion)}_layer`;\n\treturn new GPUProgram(composer, {\n\t\tname,\n\t\tfragmentShader: `\nin vec2 v_uv;\nuniform ${precision} ${glslPrefixForType(type)}sampler2D u_state;\nout ${precision} ${glslType} out_result;\nvoid main() {\n\tout_result = texture(u_state, v_uv);\n}`,\n\t\tuniforms: [\n\t\t\t{\n\t\t\t\tname: 'u_state',\n\t\t\t\tvalue: 0,\n\t\t\t\ttype: INT,\n\t\t\t},\n\t\t],\n\t});\n}\n\n/**\n * Init GPUProgram to add several GPULayers together.\n * @category GPUProgram Helper\n * @param composer - The current GPUComposer.\n * @param params - Program parameters.\n * @param params.type - The type of the inputs/output.\n * @param params.components - Component(s) of inputs to add, defaults to 'xyzw.\n * @param params.name - Optionally pass in a GPUProgram name, used for error logging.\n * @param params.numInputs - The number of inputs to add together, defaults to 2.\n * @param params.precision - Optionally specify the precision of the inputs/output.\n * @returns\n */\n export function addLayersProgram(composer: GPUComposer, params: {\n\ttype: GPULayerType,\n\tcomponents?: string,\n\tname?: string,\n\tnumInputs?: number,\n\tprecision?: GLSLPrecision,\n}) {\n\tconst { type } = params;\n\tconst numInputs = params.numInputs || 2;\n\tconst precision = params.precision || '';\n\tconst components = params.components || 'xyzw';\n\tconst glslType = glslTypeForType(type, components.length as GPULayerNumComponents);\n\tconst arrayOfLengthNumInputs = new Array(numInputs);\n\tconst name = params.name || `${numInputs}-way_add_${uniformTypeForType(type, composer.glslVersion)}_${components}`;\n\treturn new GPUProgram(composer, {\n\t\tname,\n\t\tfragmentShader: `\nin vec2 v_uv;\n${ arrayOfLengthNumInputs.map((el, i) => `uniform ${precision} ${glslPrefixForType(type)}sampler2D u_state${i};`).join('\\n') }\nout ${precision} ${glslType} out_result;\nvoid main() {\n\tout_result = ${ arrayOfLengthNumInputs.map((el, i) => `texture(u_state${i}, v_uv).${components}`).join(' + ') };\n}`,\n\t\tuniforms: arrayOfLengthNumInputs.map((el, i) => {\n\t\t\treturn {\n\t\t\t\tname: `u_state${i}`,\n\t\t\t\tvalue: i,\n\t\t\t\ttype: INT,\n\t\t\t};\n\t\t}),\n\t});\n}\n\n/**\n * Init GPUProgram to add uniform \"u_value\" to a GPULayer.\n * @category GPUProgram Helper\n * @param composer - The current GPUComposer.\n * @param params - Program parameters.\n * @param params.type - The type of the input/output (we assume \"u_value\" has the same type).\n * @param params.value - Initial value to add, if value has length 1 it will be applied to all components of GPULayer.  Change this later using uniform \"u_value\".\n * @param params.name - Optionally pass in a GPUProgram name, used for error logging.\n * @param params.precision - Optionally specify the precision of the input/output/\"u_value\".\n * @returns\n */\n export function addValueProgram(composer: GPUComposer, params: {\n\ttype: GPULayerType,\n\tvalue: number | number[],\n\tname?: string,\n\tprecision?: GLSLPrecision,\n}) {\n\tconst { type, value } = params;\n\tconst precision = params.precision || '';\n\tconst valueLength = isArray(value) ? (value as number[]).length : 1;\n\tconst valueType = glslTypeForType(type, valueLength as GPULayerNumComponents);\n\tconst numComponents = valueLength === 1 ? 4 : valueLength;\n\tconst outputType = glslTypeForType(type, numComponents as GPULayerNumComponents);\n\tconst componentSelection = glslComponentSelectionForNumComponents(numComponents as GPULayerNumComponents);\n\tconst name = params.name || `addValue_${valueType}_w_length_${valueLength}`;\n\treturn new GPUProgram(composer, {\n\t\tname,\n\t\tfragmentShader: `\nin vec2 v_uv;\nuniform ${precision} ${valueType} u_value;\nuniform ${precision} ${glslPrefixForType(type)}sampler2D u_state;\nout ${precision} ${outputType} out_result;\nvoid main() {\n\tout_result = ${valueType !== outputType ? outputType : ''}(u_value) + texture(u_state, v_uv)${componentSelection};\n}`,\n\t\tuniforms: [\n\t\t\t{\n\t\t\t\tname: 'u_state',\n\t\t\t\tvalue: 0,\n\t\t\t\ttype: INT,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'u_value',\n\t\t\t\tvalue,\n\t\t\t\ttype: uniformTypeForType(type, composer.glslVersion),\n\t\t\t},\n\t\t],\n\t});\n}\n\n/**\n * Init GPUProgram to multiply uniform \"u_value\" to a GPULayer.\n * @category GPUProgram Helper\n * @param composer - The current GPUComposer.\n * @param params - Program parameters.\n * @param params.type - The type of the input/output (we assume \"u_value\" has the same type).\n * @param params.value - Initial value to multiply, if value has length 1 it will be applied to all components of GPULayer.  Change this later using uniform \"u_value\".\n * @param params.name - Optionally pass in a GPUProgram name, used for error logging.\n * @param params.precision - Optionally specify the precision of the input/output/\"u_value\".\n * @returns\n */\n export function multiplyValueProgram(composer: GPUComposer, params: {\n\ttype: GPULayerType,\n\tvalue: number | number[],\n\tname?: string,\n\tprecision?: GLSLPrecision,\n}) {\n\tconst { type, value } = params;\n\tconst precision = params.precision || '';\n\tconst valueLength = isArray(value) ? (value as number[]).length : 1;\n\tconst valueType = glslTypeForType(type, valueLength as GPULayerNumComponents);\n\tconst numComponents = valueLength === 1 ? 4 : valueLength;\n\tconst outputType = glslTypeForType(type, numComponents as GPULayerNumComponents);\n\tconst componentSelection = glslComponentSelectionForNumComponents(numComponents as GPULayerNumComponents);\n\tconst name = params.name || `addValue_${valueType}_w_length_${valueLength}`;\n\treturn new GPUProgram(composer, {\n\t\tname,\n\t\tfragmentShader: `\nin vec2 v_uv;\nuniform ${precision} ${valueType} u_value;\nuniform ${precision} ${glslPrefixForType(type)}sampler2D u_state;\nout ${precision} ${outputType} out_result;\nvoid main() {\n\tout_result = ${valueType !== outputType ? outputType : ''}(u_value) * texture(u_state, v_uv)${componentSelection};\n}`,\n\t\tuniforms: [\n\t\t\t{\n\t\t\t\tname: 'u_state',\n\t\t\t\tvalue: 0,\n\t\t\t\ttype: INT,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'u_value',\n\t\t\t\tvalue,\n\t\t\t\ttype: uniformTypeForType(type, composer.glslVersion),\n\t\t\t},\n\t\t],\n\t});\n}\n\n/**\n * Init GPUProgram to set all elements in a GPULayer to uniform \"u_value\".\n * @category GPUProgram Helper\n * @param composer - The current GPUComposer.\n * @param params - Program parameters.\n * @param params.type - The type of the output (we assume \"u_value\" has same type).\n * @param params.value - Initial value to set, if value has length 1 it will be applied to all components of GPULayer.  Change this later using uniform \"u_value\".\n * @param params.name - Optionally pass in a GPUProgram name, used for error logging.\n * @param params.precision - Optionally specify the precision of the output/\"u_value\".\n * @returns\n */\nexport function setValueProgram(composer: GPUComposer, params: {\n\ttype: GPULayerType,\n\tvalue: number | number[],\n\tname?: string,\n\tprecision?: GLSLPrecision,\n}) {\n\tconst { type, value } = params;\n\tconst precision = params.precision || '';\n\tconst valueLength = isArray(value) ? (value as number[]).length : 1;\n\tconst valueType = glslTypeForType(type, valueLength as GPULayerNumComponents);\n\tconst numComponents = valueLength === 1 ? 4 : valueLength;\n\tconst outputType = glslTypeForType(type, numComponents as GPULayerNumComponents);\n\tconst name = params.name || `setValue_${valueType}_w_length_${valueLength}`;\n\treturn new GPUProgram(composer, {\n\t\tname,\n\t\tfragmentShader: `\nuniform ${precision} ${valueType} u_value;\nout ${precision} ${outputType} out_result;\nvoid main() {\n\tout_result = ${valueType !== outputType ? outputType : ''}(u_value);\n}`,\n\t\tuniforms: [\n\t\t\t{\n\t\t\t\tname: 'u_value',\n\t\t\t\tvalue,\n\t\t\t\ttype: uniformTypeForType(type, composer.glslVersion),\n\t\t\t},\n\t\t],\n\t});\n}\n\n/**\n * Init GPUProgram to set all elements in a GPULayer to uniform \"u_value\".\n * @category GPUProgram Helper\n * @param composer - The current GPUComposer.\n * @param params - Program parameters.\n * @param params.type - The type of the output.\n * @param params.color - Initial color as RGB in range [0, 1], defaults to [0, 0, 0].  Change this later using uniform \"u_color\".\n * @param params.opacity - Initial opacity in range [0, 1], defaults to 1.  Change this later using uniform \"u_opacity\".\n * @param params.name - Optionally pass in a GPUProgram name, used for error logging.\n * @param params.precision - Optionally specify the precision of the output/uniforms.\n * @returns\n */\n export function setColorProgram(composer: GPUComposer, params: {\n\ttype: GPULayerType,\n\tcolor?: number[],\n\topacity?: number,\n\tname?: string,\n\tprecision?: GLSLPrecision,\n}) {\n\tconst { type } = params;\n\tconst precision = params.precision || '';\n\tconst opacity = params.opacity === undefined ? 1 : params.opacity;\n\tconst color = params.color || [0, 0, 0];\n\tconst name = params.name || `setColor`;\n\tconst glslType = glslTypeForType(type, 4);\n\treturn new GPUProgram(composer, {\n\t\tname,\n\t\tfragmentShader: `\nuniform ${precision} vec3 u_color;\nuniform ${precision} float u_opacity;\nout ${precision} ${glslType} out_result;\nvoid main() {\n\tout_result = ${glslType}(u_color, u_opacity);\n}`,\n\t\tuniforms: [\n\t\t\t{\n\t\t\t\tname: 'u_color',\n\t\t\t\tvalue: color,\n\t\t\t\ttype: FLOAT,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'u_opacity',\n\t\t\t\tvalue: opacity,\n\t\t\t\ttype: FLOAT,\n\t\t\t},\n\t\t],\n\t});\n}\n\n/**\n * Init GPUProgram to zero output GPULayer.\n * @category GPUProgram Helper\n * @param composer - The current GPUComposer.\n * @param params - Program parameters.\n * @param params.name - Optionally pass in a GPUProgram name, used for error logging.\n * @returns\n */\n export function zeroProgram(composer: GPUComposer, params: {\n\tname?: string,\n}) {\n\treturn setValueProgram(composer, {\n\t\ttype: FLOAT,\n\t\tvalue: 0,\n\t\tname: params.name,\n\t});\n}\n\n/**\n * Init GPUProgram to render RGBA amplitude of an input GPULayer's components, defaults to grayscale rendering and works for scalar and vector fields.\n * @category GPUProgram Helper\n * @param composer - The current GPUComposer.\n * @param params - Program parameters.\n * @param params.type - The type of the input.\n * @param params.components - Component(s) of input GPULayer to render, defaults to 'xyzw'.\n * @param params.name - Optionally pass in a GPUProgram name, used for error logging.\n * @param params.scale - Scaling factor, defaults to 1.  Change this later using uniform \"u_scale\".\n * @param params.opacity - Opacity, defaults to 1.  Change this later using uniform \"u_opacity\".\n * @param params.color - RGB color for non-zero amplitudes, scaled to [-0,1] range, defaults to white.  Change this later using uniform \"u_color\".\n * @param params.colorZero - RGB color for zero amplitudes, scaled to [-0,1] range, defaults to black.  Change this later using uniform \"u_colorZero\".\n * @param params.precision - Optionally specify the precision of the input.\n * @returns\n */\n export function renderAmplitudeProgram(composer: GPUComposer, params: {\n\ttype: GPULayerType,\n\tcomponents?: string,\n\tname?: string,\n\tscale?: number,\n\topacity?: number,\n\tcolor?: number[],\n\tcolorZero: number[],\n\tprecision?: GLSLPrecision,\n}) {\n\tconst { type } = params;\n\tconst precision = params.precision || '';\n\tconst components = params.components || 'xyzw';\n\tconst numComponents = components.length as GPULayerNumComponents;\n\tconst glslType = glslTypeForType(type, numComponents);\n\tconst glslFloatType = glslTypeForType(FLOAT, numComponents);\n\tconst glslPrefix = glslPrefixForType(type);\n\tconst shouldCast = glslFloatType === glslType;\n\tconst name = params.name || `renderAmplitude_${glslType}_w_${numComponents}_components`;\n\treturn new GPUProgram(composer, {\n\t\tname,\n\t\tfragmentShader: `\nin vec2 v_uv;\nuniform float u_opacity;\nuniform float u_scale;\nuniform vec3 u_color;\nuniform vec3 u_colorZero;\nuniform ${precision} ${glslPrefix}sampler2D u_state;\nout vec4 out_result;\nvoid main() {\n\tfloat amplitude = u_scale * ${ numComponents === 1 ? 'abs' : 'length'}(${shouldCast ? '' : glslFloatType}(texture(u_state, v_uv)${components === 'xyzw' || components === 'rgba' || components === 'stpq' ? '' : `.${components}`}));\n\tvec3 color = mix(u_colorZero, u_color, amplitude);\n\tout_result = vec4(color, u_opacity);\n}`,\n\t\tuniforms: [\n\t\t\t{\n\t\t\t\tname: 'u_state',\n\t\t\t\tvalue: 0,\n\t\t\t\ttype: INT,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'u_scale',\n\t\t\t\tvalue: params.scale !== undefined ? params.scale : 1,\n\t\t\t\ttype: FLOAT,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'u_opacity',\n\t\t\t\tvalue: params.opacity !== undefined ? params.opacity : 1,\n\t\t\t\ttype: FLOAT,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'u_color',\n\t\t\t\tvalue: params.color || [1, 1, 1],\n\t\t\t\ttype: FLOAT,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'u_colorZero',\n\t\t\t\tvalue: params.colorZero || [0, 0, 0],\n\t\t\t\ttype: FLOAT,\n\t\t\t},\n\t\t],\n\t});\n}\n\n/**\n * Init GPUProgram to render signed amplitude of an input GPULayer to linearly interpolated colors.\n * @category GPUProgram Helper\n * @param composer - The current GPUComposer.\n * @param params - Program parameters.\n * @param params.type - The type of the input.\n * @param params.name - Optionally pass in a GPUProgram name, used for error logging.\n * @param params.scale - Scaling factor, defaults to 1.  Change this later using uniform \"u_scale\".\n * @param params.bias - Bias for center point of color range, defaults to 0.  Change this later using uniform \"u_bias\".\n * @param params.opacity - Opacity, defaults to 1.  Change this later using uniform \"u_opacity\".\n * @param params.colorNegative - RGB color for negative amplitudes, scaled to [-0,1] range, defaults to blue.  Change this later using uniform \"u_colorNegative\".\n * @param params.colorPositive - RGB color for positive amplitudes, scaled to [-0,1] range, defaults to red.  Change this later using uniform \"u_colorPositive\".\n * @param params.colorZero - RGB color for zero amplitudes, scaled to [-0,1] range, defaults to white.  Change this later using uniform \"u_colorZero\".\n * @param params.component - Component of input GPULayer to render, defaults to \"x\".\n * @param params.precision - Optionally specify the precision of the input.\n * @returns\n */\n export function renderSignedAmplitudeProgram(composer: GPUComposer, params: {\n\ttype: GPULayerType,\n\tcomponent?: 'x' | 'y' | 'z' | 'w',\n\tname?: string,\n\tscale?: number,\n\tbias?: number,\n\topacity?: number,\n\tcolorNegative?: number[],\n\tcolorPositive?: number[],\n\tcolorZero?: number[],\n\tprecision?: GLSLPrecision,\n}) {\n\tconst { type } = params;\n\tconst precision = params.precision || '';\n\tconst glslType = glslTypeForType(type, 1);\n\tconst glslPrefix = glslPrefixForType(type);\n\tconst castFloat = glslType === 'float';\n\tconst component = params.component || 'x';\n\tconst name = params.name || `renderAmplitude_${glslType}_${component}`;\n\treturn new GPUProgram(composer, {\n\t\tname,\n\t\tfragmentShader: `\nin vec2 v_uv;\nuniform float u_opacity;\nuniform float u_scale;\nuniform float u_bias;\nuniform vec3 u_colorNegative;\nuniform vec3 u_colorPositive;\nuniform vec3 u_colorZero;\nuniform ${precision} ${glslPrefix}sampler2D u_state;\nout vec4 out_result;\nvoid main() {\n\tfloat signedAmplitude = u_scale * (${castFloat ? '' : 'float'}(texture(u_state, v_uv).${component}) - u_bias);\n\tfloat amplitudeSign = sign(signedAmplitude);\n\tvec3 interpColor = mix(u_colorNegative, u_colorPositive, amplitudeSign / 2.0 + 0.5);\n\tvec3 color = mix(u_colorZero, interpColor, signedAmplitude * amplitudeSign);\n\tout_result = vec4(color, u_opacity);\n}`,\n\t\tuniforms: [\n\t\t\t{\n\t\t\t\tname: 'u_state',\n\t\t\t\tvalue: 0,\n\t\t\t\ttype: INT,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'u_scale',\n\t\t\t\tvalue: params.scale !== undefined ? params.scale : 1,\n\t\t\t\ttype: FLOAT,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'u_bias',\n\t\t\t\tvalue: params.bias || 0,\n\t\t\t\ttype: FLOAT,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'u_opacity',\n\t\t\t\tvalue: params.opacity !== undefined ? params.opacity : 1,\n\t\t\t\ttype: FLOAT,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'u_colorNegative',\n\t\t\t\tvalue: params.colorNegative || [0, 0, 1],\n\t\t\t\ttype: FLOAT,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'u_colorPositive',\n\t\t\t\tvalue: params.colorPositive || [1, 0, 0],\n\t\t\t\ttype: FLOAT,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'u_colorZero',\n\t\t\t\tvalue: params.colorZero || [1, 1, 1],\n\t\t\t\ttype: FLOAT,\n\t\t\t},\n\t\t],\n\t});\n}\n\n/**\n * @private\n */\nexport function wrappedLineColorProgram(composer: GPUComposer) {\n\treturn new GPUProgram(composer, {\n\t\tname: `wrappedLineColor`,\n\t\tfragmentShader: `\nin vec2 v_lineWrapping;\nuniform vec4 u_value;\nout vec4 out_result;\nvoid main() {\n\t// Check if this line has wrapped.\n\tif ((v_lineWrapping.x != 0.0 && v_lineWrapping.x != 1.0) || (v_lineWrapping.y != 0.0 && v_lineWrapping.y != 1.0)) {\n\t\t// Render nothing.\n\t\tdiscard;\n\t\treturn;\n\t}\n\tout_result = vec4(u_value);\n}`,\n\t});\n}\n","/**\n * These are the parts of threejs Vector4 that we need.\n * Used internally.\n * @private\n */\nexport class Vector4 {\n\tx: number;\n\ty: number;\n\tz: number;\n\tw: number;\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\t}\n\tget width() {\n\t\treturn this.z;\n\t}\n\tget height() {\n\t\treturn this.w;\n\t}\n\tcopy(v: Vector4) {\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\t\tthis.w = v.w;\n\t\treturn this;\n\t}\n}","import {\n\tisArray,\n\tisFiniteNumber,\n\tisInteger,\n\tisNonNegativeInteger,\n} from '@amandaghassaei/type-checks';\nimport {\n\tvalidDataTypes,\n\tvalidFilters,\n\tvalidWraps,\n\tGPULayerType,\n\tHALF_FLOAT,\n\tFLOAT,\n\tBYTE,\n\tSHORT,\n\tINT,\n\tUNSIGNED_BYTE,\n\tUNSIGNED_SHORT,\n\tUNSIGNED_INT,\n\tvalidImageFormats,\n\tvalidImageTypes,\n} from './constants';\n\n/**\n * Checks if type is valid GPULayer data type.\n * @private\n */\nexport function isValidDataType(type: string) {\n\treturn validDataTypes.indexOf(type) > -1;\n}\n\n/**\n * Checks if filter is valid GPULayer filter type.\n * @private\n */\nexport function isValidFilter(type: string) {\n\treturn validFilters.indexOf(type) > -1;\n}\n\n/**\n * Checks if wrap is valid GPULayer wrap type.\n * @private\n */\nexport function isValidWrap(type: string) {\n\treturn validWraps.indexOf(type) > -1;\n}\n\n/**\n * For image urls that are passed in and inited as GPULayers.\n * @private\n */\nexport function isValidImageFormat(type: string) {\n\treturn validImageFormats.indexOf(type) > -1;\n}\n/**\n * For image urls that are passed in and inited as GPULayers.\n * @private\n */\nexport function isValidImageType(type: string) {\n\treturn validImageTypes.indexOf(type) > -1;\n}\n\n/**\n * Checks if value is valid GPULayer clear value for numComponents and type.\n * @private\n */\nexport function isValidClearValue(clearValue: number | number[], numComponents: number, type: GPULayerType) {\n\tif (isArray(clearValue)) {\n\t\t// Length of clearValue must match numComponents.\n\t\tif ((clearValue as number[]).length !== numComponents) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < (clearValue as number[]).length; i++) {\n\t\t\tif (!isNumberOfType((clearValue as number[])[i], type)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif (!isNumberOfType(clearValue, type)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n * Checks if value is valid number for a given GPULayer type.\n * Checks extrema values.\n * @private\n */\nexport function isNumberOfType(value: any, type: GPULayerType) {\n\tswitch (type) {\n\t\tcase HALF_FLOAT:\n\t\tcase FLOAT:\n\t\t\treturn isFiniteNumber(value);\n\t\tcase BYTE:\n\t\t\t// -(2 ** 7)\n\t\t\tif (value < -128) return false;\n\t\t\t// 2 ** 7 - 1\n\t\t\tif (value > 127) return false;\n\t\t\treturn isInteger(value);\n\t\tcase SHORT:\n\t\t\t// -(2 ** 15)\n\t\t\tif (value < -32768) return false;\n\t\t\t// 2 ** 15 - 1\n\t\t\tif (value > 32767) return false;\n\t\t\treturn isInteger(value);\n\t\tcase INT:\n\t\t\t// -(2 ** 31)\n\t\t\tif (value < -2147483648) return false;\n\t\t\t// 2 ** 31 - 1\n\t\t\tif (value > 2147483647) return false;\n\t\t\treturn isInteger(value);\n\t\tcase UNSIGNED_BYTE:\n\t\t\t// 2 ** 8 - 1\n\t\t\tif (value > 255) return false;\n\t\t\treturn isNonNegativeInteger(value);\n\t\tcase UNSIGNED_SHORT:\n\t\t\t// 2 ** 16 - 1\n\t\t\tif (value > 65535) return false;\n\t\t\treturn isNonNegativeInteger(value);\n\t\tcase UNSIGNED_INT:\n\t\t\t// 2 ** 32 - 1\n\t\t\tif (value > 4294967295) return false;\n\t\t\treturn isNonNegativeInteger(value);\n\t\tdefault:\n\t\t\tthrow new Error(`Unknown type ${type}`);\n\t}\n}\n\nexport function checkValidKeys(keys: string[], validKeys: string[], methodName: string, name?: string) {\n\tkeys.forEach(key => {\n\t\tif (validKeys.indexOf(key) < 0) {\n\t\t\tconsole.warn(`Invalid params key \"${key}\" passed to ${methodName}${name ? ` with name \"${name}\"` : ''}.  Valid keys are ${JSON.stringify(validKeys)}.`);\n\t\t}\n\t});\n}\n\nexport function checkRequiredKeys(keys: string[], requiredKeys: string[], methodName: string, name?: string) {\n\trequiredKeys.forEach(key => {\n\t\tif (keys.indexOf(key) < 0) {\n\t\t\tthrow new Error(`Required params key \"${key}\" was not passed to ${methodName}${name ? ` with name \"${name}\"` : ''}.`);\n\t\t}\n\t});\n}","import type { GPULayer } from './GPULayer';\n\n// Data types and constants.\n\n/**\n * Half float data type.\n */\nexport const HALF_FLOAT = 'HALF_FLOAT';\n/**\n * Float data type.\n */\nexport const FLOAT = 'FLOAT';\n/**\n * Unsigned byte data type.\n */\nexport const UNSIGNED_BYTE = 'UNSIGNED_BYTE';\n/**\n * Byte data type.\n */\nexport const BYTE = 'BYTE';\n/**\n * Unsigned short data type.\n */\nexport const UNSIGNED_SHORT = 'UNSIGNED_SHORT';\n/**\n * Short data type.\n */\nexport const SHORT = 'SHORT';\n/**\n * Unsigned int data type.\n */\nexport const UNSIGNED_INT = 'UNSIGNED_INT';\n/**\n * Int data type.\n */\nexport const INT = 'INT';\n/**\n * Boolean data type (GPUProgram uniforms only).\n */\nexport const BOOL = 'BOOL';\n/**\n * Unsigned int data type (GPUProgram uniforms only).\n */\nexport const UINT = 'UINT';\n\n// Filter types.\n/**\n * Nearest texture filtering.\n */\nexport const NEAREST = 'NEAREST';\n/**\n * Linear texture filtering.\n */\nexport const LINEAR = 'LINEAR';\n\n// Wrap types.\n/**\n * Clamp to edge wrapping (no wrapping).\n */\nexport const CLAMP_TO_EDGE = 'CLAMP_TO_EDGE';\n/**\n * Repeat/periodic wrapping.\n */\nexport const REPEAT = 'REPEAT';\n// export const MIRRORED_REPEAT = 'MIRRORED_REPEAT';\n\n// GPULayer parameter types.\n/**\n * GPULayer array types.\n */\nexport type GPULayerArray =  Float32Array | Uint8Array | Int8Array | Uint16Array | Int16Array | Uint32Array | Int32Array;\n/**\n * @private\n */\nexport const validArrayTypes = [Float32Array, Uint8Array, Int8Array, Uint16Array, Int16Array, Uint32Array, Int32Array, Array];\n/**\n * GPULayer data types.\n */\nexport type GPULayerType = typeof HALF_FLOAT | typeof FLOAT | typeof UNSIGNED_BYTE | typeof BYTE | typeof UNSIGNED_SHORT | typeof SHORT | typeof UNSIGNED_INT | typeof INT;\n/**\n * @private\n */\nexport const validDataTypes = [HALF_FLOAT, FLOAT, UNSIGNED_BYTE, BYTE, UNSIGNED_SHORT, SHORT, UNSIGNED_INT, INT];\n/**\n * GPULayer numComponents options.\n */\nexport type GPULayerNumComponents = 1 | 2 | 3 | 4;\n/**\n * GPULayer filter/interpolation types.\n */\nexport type GPULayerFilter = typeof LINEAR | typeof NEAREST;\n/**\n * @private\n */\nexport const validFilters = [NEAREST, LINEAR];\n/**\n * @private\n */\n/**\n * GPULayer wrap types.\n */\nexport type GPULayerWrap = typeof REPEAT | typeof CLAMP_TO_EDGE;// | typeof MIRRORED_REPEAT;\n/**\n * @private\n */\nexport const validWraps = [CLAMP_TO_EDGE, REPEAT]; // MIRRORED_REPEAT\n/**\n * The WebGLTexture corresponding to a GPULayer buffer (e.g. currentState or lastState).\n * This data structure also includes a reference back to the GPULayer that it originated from.\n */\nexport type GPULayerState = {\n\ttexture: WebGLTexture,\n\tlayer: GPULayer,\n}\n\n// For image urls that are passed in and inited as textures.\n/**\n * RGB image format.\n */\nexport const RGB = 'RGB';\n/**\n * RGBA image format.\n */\nexport const RGBA = 'RGBA';\n/**\n * Image formats for GPULayer.initFromImage().\n */\nexport type ImageFormat = typeof RGB | typeof RGBA;\n/**\n * Image types for GPULayer.initFromImage().\n */\n export type ImageType = typeof UNSIGNED_BYTE | typeof FLOAT | typeof HALF_FLOAT;\n/**\n * @private\n */\nexport const validImageFormats = [RGB, RGBA];\n/**\n * @private\n */\n export const validImageTypes = [UNSIGNED_BYTE, FLOAT, HALF_FLOAT];\n\n// GLSL versions.\n/**\n * GLSL version 300 (WebGL2 only).\n */\nexport const GLSL3 = '300 es';\n/**\n * GLSL version 100 (WebGL1 and WebGL2).\n */\nexport const GLSL1 = '100';\n/**\n * GLSL available versions.\n */\nexport type GLSLVersion = typeof GLSL1 | typeof GLSL3;\n\n// WebGL versions.\n/**\n * WebGL2 context ID.\n */\nexport const WEBGL2 = 'webgl2';\n/**\n * WebGL1 context ID.\n */\nexport const WEBGL1 = 'webgl';\n/**\n * Experimental WebGL context ID.\n */\nexport const EXPERIMENTAL_WEBGL = 'experimental-webgl';\n/**\n * Experimental WebGL context ID.\n */\n export const EXPERIMENTAL_WEBGL2 = 'experimental-webgl2';\n\n// Precision declarations.\n/**\n * GLSL lowp precision declaration.\n */\nexport const PRECISION_LOW_P = 'lowp';\n/**\n * GLSL mediump precision declaration.\n */\nexport const PRECISION_MEDIUM_P = 'mediump';\n/**\n * GLSL highp precision declaration.\n */\nexport const PRECISION_HIGH_P = 'highp';\n/**\n * GLSL available precision declarations.\n */\nexport type GLSLPrecision = typeof PRECISION_LOW_P | typeof PRECISION_MEDIUM_P | typeof PRECISION_HIGH_P;\n\n// Uniform types.\n/**\n * @private\n */\nexport const FLOAT_1D_UNIFORM = 'FLOAT_1D_UNIFORM';\n/**\n * @private\n */\nexport const FLOAT_2D_UNIFORM = 'FLOAT_2D_UNIFORM';\n/**\n * @private\n */\nexport const FLOAT_3D_UNIFORM = 'FLOAT_3D_UNIFORM';\n/**\n * @private\n */\nexport const FLOAT_4D_UNIFORM = 'FLOAT_4D_UNIFORM';\n/**\n * @private\n */\nexport const INT_1D_UNIFORM = 'INT_1D_UNIFORM';\n/**\n * @private\n */\nexport const INT_2D_UNIFORM = 'INT_2D_UNIFORM';\n/**\n * @private\n */\nexport const INT_3D_UNIFORM = 'INT_3D_UNIFORM';\n/**\n * @private\n */\nexport const INT_4D_UNIFORM = 'INT_4D_UNIFORM';\n/**\n * @private\n */\nexport const UINT_1D_UNIFORM = 'UINT_1D_UNIFORM';\n/**\n * @private\n */\nexport const UINT_2D_UNIFORM = 'UINT_2D_UNIFORM';\n/**\n * @private\n */\nexport const UINT_3D_UNIFORM = 'UINT_3D_UNIFORM';\n/**\n * @private\n */\nexport const UINT_4D_UNIFORM = 'UINT_4D_UNIFORM';\n/**\n * @private\n */\n export const BOOL_1D_UNIFORM = 'BOOL_1D_UNIFORM';\n /**\n * @private\n */\n  export const BOOL_2D_UNIFORM = 'BOOL_2D_UNIFORM';\n  /**\n * @private\n */\n export const BOOL_3D_UNIFORM = 'BOOL_3D_UNIFORM';\n /**\n * @private\n */\n  export const BOOL_4D_UNIFORM = 'BOOL_4D_UNIFORM';\n\n// Uniform types and values.\n/**\n * GPUProgram uniform types.\n */\nexport type UniformType = typeof FLOAT | typeof INT | typeof UINT | typeof BOOL;\n/**\n * @private\n */\nexport type UniformInternalType = \n\ttypeof BOOL_1D_UNIFORM |\n\ttypeof BOOL_2D_UNIFORM |\n\ttypeof BOOL_3D_UNIFORM |\n\ttypeof BOOL_4D_UNIFORM |\n\ttypeof FLOAT_1D_UNIFORM |\n\ttypeof FLOAT_2D_UNIFORM |\n\ttypeof FLOAT_3D_UNIFORM |\n\ttypeof FLOAT_4D_UNIFORM |\n\ttypeof INT_1D_UNIFORM |\n\ttypeof INT_2D_UNIFORM |\n\ttypeof INT_3D_UNIFORM |\n\ttypeof INT_4D_UNIFORM |\n\ttypeof UINT_1D_UNIFORM |\n\ttypeof UINT_2D_UNIFORM |\n\ttypeof UINT_3D_UNIFORM |\n\ttypeof UINT_4D_UNIFORM;\n/**\n * GPUProgram uniform values.\n */\nexport type UniformValue = boolean | boolean[] | number | number[];\n/**\n * GPUProgram uniform parameters.\n */\nexport type UniformParams = {\n\tname: string,\n\tvalue: UniformValue,\n\ttype: UniformType,\n};\n/**\n * @private\n */\nexport type Uniform = { \n\tlocation: WeakMap<WebGLProgram, WebGLUniformLocation>,\n\tvalue: UniformValue,\n\ttype: UniformInternalType,\n};\n\n// Vertex shader types.\n/**\n * @private\n */\nexport const DEFAULT_PROGRAM_NAME = 'DEFAULT';\n/**\n * @private\n */\nexport const SEGMENT_PROGRAM_NAME = 'SEGMENT';\n/**\n * @private\n */\nexport const LAYER_POINTS_PROGRAM_NAME = 'LAYER_POINTS';\n/**\n * @private\n */\nexport const LAYER_LINES_PROGRAM_NAME = 'LAYER_LINES';\n/**\n * @private\n */\nexport const LAYER_VECTOR_FIELD_PROGRAM_NAME = 'LAYER_VECTOR_FIELD';\n// Vertex shader compile time constants.\n/**\n * @private\n */\nexport const GPUIO_VS_WRAP_X = 'GPUIO_VS_WRAP_X';\n/**\n * @private\n */\nexport const GPUIO_VS_WRAP_Y = 'GPUIO_VS_WRAP_Y';\n/**\n * @private\n */\n export const GPUIO_VS_INDEXED_POSITIONS = 'GPUIO_VS_INDEXED_POSITIONS';\n/**\n * @private\n */\nexport const GPUIO_VS_UV_ATTRIBUTE = 'GPUIO_VS_UV_ATTRIBUTE';\n /**\n * @private\n */\nexport const GPUIO_VS_NORMAL_ATTRIBUTE = 'GPUIO_VS_NORMAL_ATTRIBUTE';\n/**\n * @private\n */\nexport const GPUIO_VS_POSITION_W_ACCUM = 'GPUIO_VS_POSITION_W_ACCUM';\n\n/**\n * @private\n */\nexport type PROGRAM_NAME_INTERNAL =\n\ttypeof DEFAULT_PROGRAM_NAME |\n\ttypeof SEGMENT_PROGRAM_NAME |\n\ttypeof LAYER_POINTS_PROGRAM_NAME |\n\ttypeof LAYER_LINES_PROGRAM_NAME |\n\ttypeof LAYER_VECTOR_FIELD_PROGRAM_NAME;\n\n// Pass in #defines as strings to make it easier to control float vs int.\n/**\n * Object containing compile time #define constants for GPUProgram fragment shader.\n */\nexport type CompileTimeConstants = { [key: string]: string };\n\n// Error callback, defaults to throwing an error.\nexport type ErrorCallback = (message: string) => void;\n/**\n * @private\n */\nexport const DEFAULT_ERROR_CALLBACK = (message: string) => { throw new Error(message); };\n\n// For stepCircle() and stepSegment() (with end caps).\n/**\n * @private\n */\nexport const DEFAULT_CIRCLE_NUM_SEGMENTS = 18;// Must be divisible by 6 to work with stepSegment().\n\n// Extrema values.\n/**\n * @private\n */\nexport const MIN_UNSIGNED_BYTE = 0;\n/**\n * @private\n */\nexport const MAX_UNSIGNED_BYTE = 2 ** 8 - 1;\n/**\n * @private\n */\nexport const MIN_BYTE = -(2 ** 7);\n/**\n * @private\n */\nexport const MAX_BYTE = 2 ** 7 - 1;\n/**\n * @private\n */\nexport const MIN_UNSIGNED_SHORT = 0;\n/**\n * @private\n */\nexport const MAX_UNSIGNED_SHORT = 2 ** 16 - 1;\n/**\n * @private\n */\nexport const MIN_SHORT = -(2 ** 15);\n/**\n * @private\n */\nexport const MAX_SHORT = 2 ** 15 - 1;\n/**\n * @private\n */\nexport const MIN_UNSIGNED_INT = 0;\n/**\n * @private\n */\nexport const MAX_UNSIGNED_INT = 2 ** 32 - 1;\n/**\n * @private\n */\nexport const MIN_INT = -(2 ** 31);\n/**\n * @private\n */\nexport const MAX_INT = 2 ** 31 - 1;\n// There are larger HALF_FLOAT and FLOAT ints, but they may be spaced out by > 1.\n/**\n * @private\n */\nexport const MIN_HALF_FLOAT_INT = -2048;\n/**\n * @private\n */\nexport const MAX_HALF_FLOAT_INT = 2048;\n/**\n * @private\n */\nexport const MIN_FLOAT_INT = -16777216;\n/**\n * @private\n */\nexport const MAX_FLOAT_INT = 16777216;\n\n// Precision compile time constants\n/**\n * @private\n */\nexport const GPUIO_INT_PRECISION = 'GPUIO_INT_PRECISION';\n/**\n * @private\n */\nexport const GPUIO_FLOAT_PRECISION = 'GPUIO_FLOAT_PRECISION';\n\nexport const BOUNDARY_TOP = 'BOUNDARY_TOP';\nexport const BOUNDARY_BOTTOM = 'BOUNDARY_BOTTOM';\nexport const BOUNDARY_LEFT = 'BOUNDARY_LEFT';\nexport const BOUNDARY_RIGHT = 'BOUNDARY_RIGHT';\nexport type BoundaryEdge = typeof BOUNDARY_TOP | typeof BOUNDARY_BOTTOM | typeof BOUNDARY_LEFT | typeof BOUNDARY_RIGHT;","import {\n\tBYTE,\n\tFLOAT,\n\tGLSL1,\n\tGLSLPrecision,\n\tGLSLVersion,\n\tGPULayerNumComponents,\n\tGPULayerType,\n\tHALF_FLOAT,\n\tINT,\n\tPRECISION_HIGH_P,\n\tPRECISION_LOW_P,\n\tPRECISION_MEDIUM_P,\n\tSHORT,\n\tUINT,\n\tUNSIGNED_BYTE,\n\tUNSIGNED_INT,\n\tUNSIGNED_SHORT,\n} from './constants';\n\n/**\n * Enum for precision values.\n * See src/glsl/common/precision.ts for more info.\n * @private\n */\n export function intForPrecision(precision: GLSLPrecision) {\n\tif (precision === PRECISION_HIGH_P) return 2;\n\tif (precision === PRECISION_MEDIUM_P) return 1;\n\tif (precision === PRECISION_LOW_P) return 0;\n\tthrow new Error(`Unknown shader precision value: ${JSON.stringify(precision)}.`);\n}\n\n/**\n * @private\n */\nexport function uniformTypeForType(type: GPULayerType, glslVersion: GLSLVersion) {\n\tswitch (type) {\n\t\tcase HALF_FLOAT:\n\t\tcase FLOAT:\n\t\t\treturn FLOAT;\n\t\tcase UNSIGNED_BYTE:\n\t\tcase UNSIGNED_SHORT:\n\t\tcase UNSIGNED_INT:\n\t\t\tif (glslVersion === GLSL1) return INT;\n\t\t\treturn UINT;\n\t\tcase BYTE:\n\t\tcase SHORT:\n\t\tcase INT:\n\t\t\treturn INT;\n\t\tdefault:\n\t\t\tthrow new Error(`Invalid type: ${type} passed to glslKeyForType.`);\n\t}\n}\n\n/**\n * @private\n */\nexport function arrayConstructorForType(\n\ttype: GPULayerType,\n\thalfFloatsAsFloats = false,\n) {\n\tswitch (type) {\n\t\tcase HALF_FLOAT:\n\t\t\tif (halfFloatsAsFloats) return Float32Array;\n\t\t\treturn Uint16Array;\n\t\tcase FLOAT:\n\t\t\treturn Float32Array;\n\t\tcase UNSIGNED_BYTE:\n\t\t\treturn Uint8Array;\n\t\tcase BYTE:\n\t\t\treturn Int8Array;\n\t\tcase UNSIGNED_SHORT:\n\t\t\treturn Uint16Array;\n\t\tcase SHORT:\n\t\t\treturn Int16Array;\n\t\tcase UNSIGNED_INT:\n\t\t\treturn Uint32Array;\n\t\tcase INT:\n\t\t\treturn Int32Array;\n\t\tdefault:\n\t\t\tthrow new Error(`Unsupported type: \"${type}\".`);\n\t}\n}\n\n/**\n * @private\n */\nexport function glslTypeForType(type: GPULayerType, numComponents: GPULayerNumComponents) {\n\tswitch (type) {\n\t\tcase HALF_FLOAT:\n\t\tcase FLOAT:\n\t\t\tif (numComponents === 1) return 'float';\n\t\t\treturn `vec${numComponents}`;\n\t\tcase UNSIGNED_BYTE:\n\t\tcase UNSIGNED_SHORT:\n\t\tcase UNSIGNED_INT:\n\t\t\tif (numComponents === 1) return 'uint';\n\t\t\treturn `uvec${numComponents}`;\n\t\tcase BYTE:\n\t\tcase SHORT:\n\t\tcase INT:\n\t\t\tif (numComponents === 1) return 'int';\n\t\t\treturn `ivec${numComponents}`;\n\t}\n\tthrow new Error(`Invalid type: ${type} passed to glslTypeForType.`);\n}\n\n/**\n * @private\n */\n export function glslPrefixForType(type: GPULayerType) {\n\tswitch (type) {\n\t\tcase HALF_FLOAT:\n\t\tcase FLOAT:\n\t\t\treturn '';\n\t\tcase UNSIGNED_BYTE:\n\t\tcase UNSIGNED_SHORT:\n\t\tcase UNSIGNED_INT:\n\t\t\treturn 'u';\n\t\tcase BYTE:\n\t\tcase SHORT:\n\t\tcase INT:\n\t\t\treturn 'i';\n\t}\n\tthrow new Error(`Invalid type: ${type} passed to glslPrefixForType.`);\n}\n\n/**\n * @private\n */\nexport function glslComponentSelectionForNumComponents(numComponents: GPULayerNumComponents) {\n\tswitch (numComponents) {\n\t\tcase 1:\n\t\t\treturn '.x';\n\t\tcase 2:\n\t\t\treturn '.xy';\n\t\tcase 3:\n\t\t\treturn '.xyz';\n\t\tcase 4:\n\t\t\treturn '';\n\t}\n\tthrow new Error(`Invalid numComponents: ${numComponents} passed to glslComponentSelectionForNumComponents.`);\n}","import type { GPUComposer } from './GPUComposer';\n\n// https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_float\n// Float is provided by default in WebGL2 contexts.\n// This extension implicitly enables the WEBGL_color_buffer_float extension (if supported), which allows rendering to 32-bit floating-point color buffers.\nexport const OES_TEXTURE_FLOAT = 'OES_texture_float';\n// https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float\n// Half float is supported by modern mobile browsers, float not yet supported.\n// Half float is provided by default for Webgl2 contexts.\n// This extension implicitly enables the EXT_color_buffer_half_float extension (if supported), which allows rendering to 16-bit floating point formats.\nexport const OES_TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n// https://www.khronos.org/registry/OpenGL/extensions/OES/OES_texture_float_linear.txt\nexport const OES_TEXTURE_FLOAT_LINEAR = 'OES_texture_float_linear';\nexport const OES_TEXTURE_HAlF_FLOAT_LINEAR = 'OES_texture_half_float_linear';\n// https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_depth_texture\n// Adds gl.UNSIGNED_SHORT, gl.UNSIGNED_INT types to textImage2D in WebGL1.0\nexport const WEBGL_DEPTH_TEXTURE = 'WEBGL_depth_texture';\n// EXT_COLOR_BUFFER_FLOAT adds ability to render to a variety of floating pt textures.\n// This is needed for the WebGL2 contexts that do not support OES_TEXTURE_FLOAT / OES_TEXTURE_HALF_FLOAT extensions.\n// https://developer.mozilla.org/en-US/docs/Web/API/EXT_color_buffer_float\n// https://stackoverflow.com/questions/34262493/framebuffer-incomplete-attachment-for-texture-with-internal-format\n// https://stackoverflow.com/questions/36109347/framebuffer-incomplete-attachment-only-happens-on-android-w-firefox\nexport const EXT_COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n// On WebGL 2, EXT_COLOR_BUFFER_HALF_FLOAT is an alternative to using the EXT_color_buffer_float extension on platforms\n// that support 16-bit floating point render targets but not 32-bit floating point render targets.\nexport const EXT_COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n// Vertex array extension is used by threejs.\nexport const OES_VERTEX_ARRAY_OBJECT = 'OES_vertex_array_object';\n\nexport function getExtension(\n\tcomposer: GPUComposer,\n\textensionName: string,\n\toptional = false,\n) {\n\t// Check if we've already loaded the extension.\n\tif (composer._extensions[extensionName] !== undefined) return composer._extensions[extensionName];\n\n\tconst { gl, _errorCallback, _extensions, verboseLogging } = composer;\n\tlet extension;\n\ttry {\n\t\textension = gl.getExtension(extensionName);\n\t} catch (e) {}\n\tif (extension) {\n\t\t// Cache this extension.\n\t\t_extensions[extensionName] = extension;\n\t\tif (composer.verboseLogging) console.log(`Loaded extension: ${extensionName}.`);\n\t} else {\n\t\t_extensions[extensionName] = false; // Cache the bad extension lookup.\n\t\tif (composer.verboseLogging) console.log(`Unsupported ${optional ? 'optional ' : ''}extension: ${extensionName}.`);\n\t}\n\t// If the extension is not optional, throw error.\n\tif (!extension && !optional) {\n\t\t_errorCallback(`Required extension unsupported by this device / browser: ${extensionName}.`);\n\t}\n\treturn extension;\n}","import type { GPUComposer } from './GPUComposer';\nimport type { GPULayer } from './GPULayer';\n\n// Cache framebuffers to minimize invalidating FBO attachment bindings:\n// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#avoid_invalidating_fbo_attachment_bindings\nconst framebufferMap: WeakMap<WebGLTexture | WebGLTexture[], WebGLFramebuffer> = new WeakMap();\nconst allTextureFramebuffersMap: WeakMap<WebGLTexture, WebGLFramebuffer[]> = new WeakMap();\n\nfunction initFrameBuffer(\n\tcomposer: GPUComposer,\n\tlayer0: GPULayer,\n\ttexture0: WebGLTexture,\n\tadditionalTextures?: WebGLTexture[],\n) {\n\tconst { gl, _errorCallback, isWebGL2 } = composer;\n\t// Init a framebuffer for this texture so we can write to it.\n\tconst framebuffer = gl.createFramebuffer();\n\tif (!framebuffer) {\n\t\t_errorCallback(`Could not init framebuffer for GPULayer \"${layer0.name}\": ${gl.getError()}.`);\n\t\treturn;\n\t}\n\tgl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/framebufferTexture2D\n\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture0, 0);\n\tif (additionalTextures) {\n\t\t// Check if length additional textures exceeds a max.\n\t\tif (!isWebGL2) {\n\t\t\tthrow new Error('WebGL1 does not support drawing to multiple outputs.');\n\t\t}\n\t\tif (additionalTextures.length > 15) {\n\t\t\tthrow new Error(`Can't draw to more than 16 outputs.`);\n\t\t}\n\t\tfor (let i = 0, numTextures = additionalTextures.length; i < numTextures; i++) {\n\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, additionalTextures[i], 0);\n\t\t}\n\t}\n\n\tconst status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\tif(status !== gl.FRAMEBUFFER_COMPLETE){\n\t\t_errorCallback(`Invalid status for framebuffer for GPULayer \"${layer0.name}\": ${status}.`);\n\t}\n\n\treturn framebuffer;\n}\n\n/**\n * Bind framebuffer for write operation.\n * @private\n */\nexport function bindFrameBuffer(\n\tcomposer: GPUComposer,\n\tlayer0: GPULayer,\n\ttexture0: WebGLTexture,\n\tadditionalTextures?: WebGLTexture[],\n) {\n\tconst { gl } = composer;\n\tconst key = additionalTextures ? [texture0, ...additionalTextures] : texture0;\n\tlet framebuffer = framebufferMap.get(key);\n\tif (!framebuffer) {\n\t\tframebuffer = initFrameBuffer(composer, layer0, texture0, additionalTextures);\n\t\tif (!framebuffer) return;\n\t\tframebufferMap.set(key, framebuffer);\n\t\tconst allFramebuffers = allTextureFramebuffersMap.get(texture0) || [];\n\t\tallFramebuffers.push(framebuffer);\n\t\tallTextureFramebuffersMap.set(texture0, allFramebuffers);\n\t\tif (additionalTextures) {\n\t\t\tfor (let i = 0, numTextures = additionalTextures.length; i < numTextures; i++) {\n\t\t\t\tconst texture = additionalTextures[i];\n\t\t\t\tconst allFramebuffers = allTextureFramebuffersMap.get(texture) || [];\n\t\t\t\tallFramebuffers.push(framebuffer);\n\t\t\t\tallTextureFramebuffersMap.set(texture, allFramebuffers);\n\t\t\t}\n\t\t}\n\t}\n\tgl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n}\n\n/**\n * Delete framebuffers when no longer needed.\n * @private\n */\nexport function disposeFramebuffers(gl: WebGLRenderingContext | WebGL2RenderingContext, texture: WebGLTexture) {\n\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t// Delete all framebuffers associated with this texture.\n\tconst allFramebuffers = allTextureFramebuffersMap.get(texture);\n\tif (allFramebuffers) {\n\t\tfor (let i = 0, numFramebuffers = allFramebuffers.length; i < numFramebuffers; i++) {\n\t\t\tgl.deleteFramebuffer(allFramebuffers[i]);\n\t\t}\n\t}\n\tallTextureFramebuffersMap.delete(texture);\n}","import {\n\tGPUIO_FLOAT_PRECISION,\n\tGPUIO_INT_PRECISION,\n\tPRECISION_LOW_P,\n\tPRECISION_MEDIUM_P,\n} from '../../constants';\nimport { intForPrecision } from '../../conversions';\n\n// These precision definitions are applied to all vertex and fragment shaders.\n// Default to highp, but fallback to mediump if highp not available.\n// These defaults can be set in GPUComposer constructor as intPrecision and floatPrecision parameters.\n// https://webglfundamentals.org/webgl/lessons/webgl-precision-issues.html\nexport const PRECISION_SOURCE = `\n#if (${GPUIO_INT_PRECISION} == ${intForPrecision(PRECISION_LOW_P)})\n\tprecision lowp int;\n\t#if (__VERSION__ == 300)\n\t\tprecision lowp isampler2D;\n\t\tprecision lowp usampler2D;\n\t#endif\n#elif (${GPUIO_INT_PRECISION} == ${intForPrecision(PRECISION_MEDIUM_P)})\n\tprecision mediump int;\n\t#if (__VERSION__ == 300)\n\t\tprecision mediump isampler2D;\n\t\tprecision mediump usampler2D;\n\t#endif\n#else \n\t#ifdef GL_FRAGMENT_PRECISION_HIGH\n\t\tprecision highp int;\n\t\t#if (__VERSION__ == 300)\n\t\t\tprecision highp isampler2D;\n\t\t\tprecision highp usampler2D;\n\t\t#endif\n\t#else\n\t\tprecision mediump int;\n\t\t#if (__VERSION__ == 300)\n\t\t\tprecision mediump isampler2D;\n\t\t\tprecision mediump usampler2D;\n\t\t#endif\n\t#endif\n#endif\n#if (${GPUIO_FLOAT_PRECISION} == ${intForPrecision(PRECISION_LOW_P)})\n\tprecision lowp float;\n\tprecision lowp sampler2D;\n#elif (${GPUIO_FLOAT_PRECISION} == ${intForPrecision(PRECISION_MEDIUM_P)})\n\tprecision mediump float;\n\tprecision mediump sampler2D;\n#else\n\t#ifdef GL_FRAGMENT_PRECISION_HIGH\n\t\tprecision highp float;\n\t\tprecision highp sampler2D;\n\t#else\n\t\tprecision mediump float;\n\t\tprecision mediump sampler2D;\n\t#endif\n#endif\n`;","import {\n\tGPUIO_VS_UV_ATTRIBUTE,\n\tGPUIO_VS_NORMAL_ATTRIBUTE,\n} from '../../constants';\n\nexport const DEFAULT_VERT_SHADER_SOURCE = `\nin vec2 a_gpuio_position;\n#ifdef ${GPUIO_VS_UV_ATTRIBUTE}\n\tin vec2 a_gpuio_uv;\n#endif\n#ifdef ${GPUIO_VS_NORMAL_ATTRIBUTE}\n\tin vec2 a_gpuio_normal;\n#endif\n\nuniform vec2 u_gpuio_scale;\nuniform vec2 u_gpuio_translation;\n\nout vec2 v_uv;\nout vec2 v_uv_local;\n#ifdef ${GPUIO_VS_NORMAL_ATTRIBUTE}\n\tout vec2 v_normal;\n#endif\n\nvoid main() {\n\t// Optional varyings.\n\t#ifdef ${GPUIO_VS_UV_ATTRIBUTE}\n\t\tv_uv_local = a_gpuio_uv;\n\t#else\n\t\tv_uv_local = 0.5 * (a_gpuio_position + 1.0);\n\t#endif\n\t#ifdef ${GPUIO_VS_NORMAL_ATTRIBUTE}\n\t\tv_normal = a_gpuio_normal;\n\t#endif\n\n\t// Apply transformations.\n\tvec2 position = u_gpuio_scale * a_gpuio_position + u_gpuio_translation;\n\n\t// Calculate a global uv for the viewport.\n\tv_uv = 0.5 * (position + 1.0);\n\n\t// Calculate vertex position.\n\tgl_Position = vec4(position, 0, 1);\n}`;","import {\n\tGPUIO_VS_INDEXED_POSITIONS, GPUIO_VS_POSITION_W_ACCUM, GPUIO_VS_WRAP_X, GPUIO_VS_WRAP_Y,\n} from '../../constants';\nimport { VERTEX_SHADER_HELPERS_SOURCE } from './VertexShaderHelpers';\n\nexport const LAYER_LINES_VERTEX_SHADER_SOURCE = `\n${VERTEX_SHADER_HELPERS_SOURCE}\n\n#if (__VERSION__ != 300 || ${GPUIO_VS_INDEXED_POSITIONS} == 1)\n\t// Cannot use int vertex attributes.\n\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer\n\tin float a_gpuio_index;\n#endif\n\nuniform sampler2D u_gpuio_positions; // Texture lookup with position data.\nuniform vec2 u_gpuio_positionsDimensions;\nuniform vec2 u_gpuio_scale;\n\nout vec2 v_uv;\nout vec2 v_lineWrapping; // Use this to test if line is only half wrapped and should not be rendered.\nflat out int v_index;\n\nvoid main() {\n\t// Calculate a uv based on the point's index attribute.\n\t#if (__VERSION__ != 300 || ${GPUIO_VS_INDEXED_POSITIONS} == 1)\n\t\tvec2 positionUV = uvFromIndex(a_gpuio_index, u_gpuio_positionsDimensions);\n\t\tv_index = int(a_gpuio_index);\n\t#else\n\t\tvec2 positionUV = uvFromIndex(gl_VertexID, u_gpuio_positionsDimensions);\n\t\tv_index = gl_VertexID;\n\t#endif\n\n\t// Calculate a global uv for the viewport.\n\t// Lookup vertex position and scale to [0, 1] range.\n\t#ifdef ${GPUIO_VS_POSITION_W_ACCUM}\n\t\t// We have packed a 2D displacement with the position.\n\t\tvec4 positionData = texture(u_gpuio_positions, positionUV);\n\t\t// position = first two components plus last two components (optional accumulation buffer).\n\t\tv_uv = (positionData.rg + positionData.ba) * u_gpuio_scale;\n\t#else\n\t\tv_uv = texture(u_gpuio_positions, positionUV).rg  * u_gpuio_scale;\n\t#endif\n\n\t// Wrap if needed.\n\tv_lineWrapping = vec2(0.0);\n\t#ifdef ${GPUIO_VS_WRAP_X}\n\t\tv_lineWrapping.x = max(step(1.0, v_uv.x), step(v_uv.x, 0.0));\n\t\tv_ux.x = fract(v_uv.x + 1.0);\n\t#endif\n\t#ifdef ${GPUIO_VS_WRAP_Y}\n\t\tv_lineWrapping.y = max(step(1.0, v_uv.y), step(v_uv.y, 0.0));\n\t\tv_ux.y = fract(v_uv.y + 1.0);\n\t#endif\n\n\t// Calculate position in [-1, 1] range.\n\tvec2 position = v_uv * 2.0 - 1.0;\n\n\tgl_Position = vec4(position, 0, 1);\n}`;","import {\n\tGPUIO_VS_POSITION_W_ACCUM, GPUIO_VS_WRAP_X, GPUIO_VS_WRAP_Y,\n} from '../../constants';\nimport { VERTEX_SHADER_HELPERS_SOURCE } from './VertexShaderHelpers';\n\nexport const LAYER_POINTS_VERTEX_SHADER_SOURCE = `\n${VERTEX_SHADER_HELPERS_SOURCE}\n\n#if (__VERSION__ != 300)\n\t// Cannot use int vertex attributes.\n\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer\n\tin float a_gpuio_index;\n#endif\n\nuniform sampler2D u_gpuio_positions; // Texture lookup with position data.\nuniform vec2 u_gpuio_positionsDimensions;\nuniform vec2 u_gpuio_scale;\nuniform float u_gpuio_pointSize;\n\nout vec2 v_uv;\nout vec2 v_uv_1d;\nout vec2 v_position;\nflat out int v_index;\n\nvoid main() {\n\t// Calculate a uv based on the point's index attribute.\n\t#if (__VERSION__ == 300)\n\t\tv_uv_1d = uvFromIndex(gl_VertexID, u_gpuio_positionsDimensions);\n\t\tv_index = gl_VertexID;\n\t#else\n\t\tv_uv_1d = uvFromIndex(a_gpuio_index, u_gpuio_positionsDimensions);\n\t\tv_index = int(a_gpuio_index);\n\t#endif\n\n\t// Calculate a global uv for the viewport.\n\t// Lookup vertex position and scale to [0, 1] range.\n\t#ifdef ${GPUIO_VS_POSITION_W_ACCUM}\n\t\t// We have packed a 2D displacement with the position.\n\t\tvec4 positionData = texture(u_gpuio_positions, v_uv_1d);\n\t\t// position = first two components plus last two components (optional accumulation buffer).\n\t\tv_position = positionData.rg + positionData.ba;\n\t\tv_uv = v_position * u_gpuio_scale;\n\t#else\n\t\tv_position = texture(u_gpuio_positions, v_uv_1d).rg;\n\t\tv_uv = v_position * u_gpuio_scale;\n\t#endif\n\n\t// Wrap if needed.\n\t#ifdef ${GPUIO_VS_WRAP_X}\n\t\tv_uv.x = fract(v_uv.x + ceil(abs(v_uv.x)));\n\t#endif\n\t#ifdef ${GPUIO_VS_WRAP_Y}\n\t\tv_uv.y = fract(v_uv.y + ceil(abs(v_uv.y)));\n\t#endif\n\n\t// Calculate position in [-1, 1] range.\n\tvec2 position = v_uv * 2.0 - 1.0;\n\n\tgl_PointSize = u_gpuio_pointSize;\n\tgl_Position = vec4(position, 0, 1);\n}`;","import { VERTEX_SHADER_HELPERS_SOURCE } from './VertexShaderHelpers';\n\nexport const LAYER_VECTOR_FIELD_VERTEX_SHADER_SOURCE = `\n${VERTEX_SHADER_HELPERS_SOURCE}\n\n#if (__VERSION__ != 300)\n\t// Cannot use int vertex attributes.\n\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer\n\tin float a_gpuio_index;\n#endif\n\nuniform sampler2D u_gpuio_vectors; // Texture lookup with vector data.\nuniform vec2 u_gpuio_dimensions;\nuniform vec2 u_gpuio_scale;\n\nout vec2 v_uv;\nflat out int v_index;\n\nvoid main() {\n\t#if (__VERSION__ == 300)\n\t\t// Divide index by 2.\n\t\tint index = gl_VertexID / 2;\n\t\tv_index = index;\n\t#else\n\t\t// Divide index by 2.\n\t\tfloat index = floor((a_gpuio_index + 0.5) / 2.0);\n\t\tv_index = int(index);\n\t#endif\n\n\t// Calculate a uv based on the vertex index attribute.\n\tv_uv = uvFromIndex(index, u_gpuio_dimensions);\n\t#if (__VERSION__ == 300)\n\t\t// Add vector displacement if needed.\n\t\tv_uv += float(gl_VertexID - 2 * index) * texture(u_gpuio_vectors, v_uv).xy * u_gpuio_scale;\n\t#else\n\t\t// Add vector displacement if needed.\n\t\tv_uv += (a_gpuio_index - 2.0 * index) * texture(u_gpuio_vectors, v_uv).xy * u_gpuio_scale;\n\t#endif\n\n\n\t// Calculate position in [-1, 1] range.\n\tvec2 position = v_uv * 2.0 - 1.0;\n\n\tgl_Position = vec4(position, 0, 1);\n}`;","export const SEGMENT_VERTEX_SHADER_SOURCE = `\nin vec2 a_gpuio_position;\n\nuniform float u_gpuio_halfThickness;\nuniform vec2 u_gpuio_scale;\nuniform float u_gpuio_length;\nuniform float u_gpuio_rotation;\nuniform vec2 u_gpuio_translation;\n\nout vec2 v_uv_local;\nout vec2 v_uv;\n\nmat2 rotate2d(float _angle){\n\treturn mat2(cos(_angle), -sin(_angle), sin(_angle), cos(_angle));\n}\n\nvoid main() {\n\t// Calculate UV coordinates of current rendered object.\n\tv_uv_local = 0.5 * (a_gpuio_position + 1.0);\n\n\tvec2 position = a_gpuio_position;\n\t// Apply thickness / radius.\n\tposition *= u_gpuio_halfThickness;\n\t// Stretch center of shape to form a round-capped line segment.\n\tfloat signX = sign(position.x);\n\tposition.x += signX * u_gpuio_length / 2.0;\n\tv_uv_local.x = (signX + 1.0) / 2.0;// Set entire cap uv.x to 1 or 0.\n\t// Apply transformations.\n\tposition = u_gpuio_scale * (rotate2d(-u_gpuio_rotation) * position) + u_gpuio_translation;\n\n\t// Calculate a global uv for the viewport.\n\tv_uv = 0.5 * (position + 1.0);\n\n\t// Calculate vertex position.\n\tgl_Position = vec4(position, 0, 1);\n}`;","export const VERTEX_SHADER_HELPERS_SOURCE = `\n/**\n * Create UV coordinates from a 1D index for data stored in a texture of size \"dimensions\".\n */\nvec2 uvFromIndex(const float index, const vec2 dimensions) {\n\tfloat y = floor((index + 0.5) / dimensions.x);\n\tfloat x = floor(index - y * dimensions.x + 0.5);\n\treturn vec2(x + 0.5, y + 0.5) / dimensions;\n}\nvec2 uvFromIndex(const int index, const vec2 dimensions) {\n    int width = int(dimensions.x);\n    int y = index / width;\n\tint x = index - y * width;\n    return vec2(float(x) + 0.5, float(y) + 0.5) / dimensions;\n}\nvec2 uvFromIndex(const float index, const ivec2 dimensions) {\n\tfloat width = float(dimensions.x);\n    float y = floor((index + 0.5) / width);\n\tfloat x = floor(index - y * width + 0.5);\n    return vec2(x + 0.5, y + 0.5) / vec2(dimensions);\n}\nvec2 uvFromIndex(const int index, const ivec2 dimensions) {\n    int y = index / dimensions.x;\n\tint x = index - y * dimensions.x;\n    return vec2(float(x) + 0.5, float(y) + 0.5) / vec2(dimensions);\n}`\n","import * as utils from './utils';\nimport { GPUComposer } from './GPUComposer';\nimport { GPULayer } from './GPULayer';\nimport * as GPULayerHelpers from './GPULayerHelpers';\nimport { GPUProgram } from './GPUProgram';\nimport * as checks from './checks';\nimport * as regex from './regex';\nimport * as extensions from './extensions';\nimport * as polyfills from './polyfills';\nimport * as conversions from './conversions';\nimport * as Programs from './Programs';\n\n// These exports are only used for testing.\n/**\n * @private\n */\nconst _testing = {\n\tisFloatType: utils.isFloatType,\n\tisUnsignedIntType: utils.isUnsignedIntType,\n\tisSignedIntType: utils.isSignedIntType,\n\tisIntType: utils.isIntType,\n\tmakeShaderHeader: utils.makeShaderHeader,\n\tcompileShader: utils.compileShader,\n\tinitGLProgram: utils.initGLProgram,\n\treadyToRead: utils.readyToRead,\n\tpreprocessVertexShader: utils.preprocessVertexShader,\n\tpreprocessFragmentShader: utils.preprocessFragmentShader,\n\tisPowerOf2: utils.isPowerOf2,\n\tinitSequentialFloatArray: utils.initSequentialFloatArray,\n\tuniformInternalTypeForValue: utils.uniformInternalTypeForValue,\n\tindexOfLayerInArray: utils.indexOfLayerInArray,\n\treadPixelsAsync: utils.readPixelsAsync,\n\t...extensions,\n\t...regex,\n\t...checks,\n\t...GPULayerHelpers,\n\t...polyfills,\n\t...conversions,\n}\n\n// Named exports.\nconst {\n\tisWebGL2,\n\tisWebGL2Supported,\n\tisHighpSupportedInVertexShader,\n\tisHighpSupportedInFragmentShader,\n\tgetVertexShaderMediumpPrecision,\n\tgetFragmentShaderMediumpPrecision,\n} = utils;\nconst {\n\tcopyProgram,\n\taddLayersProgram,\n\taddValueProgram,\n\tmultiplyValueProgram,\n\trenderAmplitudeProgram,\n\trenderSignedAmplitudeProgram,\n\tsetValueProgram,\n\tsetColorProgram,\n} = Programs;\n\nexport {\n\tGPUComposer,\n\tGPULayer,\n\tGPUProgram,\n\tisWebGL2,\n\tisWebGL2Supported,\n\tisHighpSupportedInVertexShader,\n\tisHighpSupportedInFragmentShader,\n\tgetVertexShaderMediumpPrecision,\n\tgetFragmentShaderMediumpPrecision,\n\tcopyProgram,\n\taddLayersProgram,\n\taddValueProgram,\n\tmultiplyValueProgram,\n\trenderAmplitudeProgram,\n\trenderSignedAmplitudeProgram,\n\tsetValueProgram,\n\tsetColorProgram,\n\t_testing,\n}\nexport * from './constants';","import { getSampler2DsInProgram } from './regex';\n\n/**\n * Wrap type to use in polyfill.\n * (0) Default behavior (no polyfill).\n * (1) REPEAT polyfill.\n * @private\n */\nexport const SAMPLER2D_WRAP_X = 'GPUIO_WRAP_X';\n/**\n * Wrap type to use in polyfill.\n * (0) Default behavior (no polyfill).\n * (1) REPEAT polyfill.\n * @private\n */\nexport const SAMPLER2D_WRAP_Y = 'GPUIO_WRAP_Y';\n/**\n * Flag to cast texture() result to int type (needed for GLSL1).\n * @private\n */\n export const SAMPLER2D_CAST_INT = 'GPUIO_CAST_INT';\n\n/**\n * Filter type to use in polyfill.\n * (0) Default behavior (no polyfill).\n * (0) LINEAR polyfill.\n * @private\n */\nexport const SAMPLER2D_FILTER = 'GPUIO_FILTER';\n\n/**\n * UV size of half a pixel for this texture.\n * @private\n */\nexport const SAMPLER2D_HALF_PX_UNIFORM = 'u_gpuio_half_px';\n\n/**\n * Dimensions of texture\n * @private\n */\nexport const SAMPLER2D_DIMENSIONS_UNIFORM = 'u_gpuio_dimensions';\n\n/**\n * Override texture function to perform polyfill filter/wrap.\n * https://www.codeproject.com/Articles/236394/Bi-Cubic-and-Bi-Linear-Interpolation-with-GLSL\n * @private\n */\nexport function texturePolyfill(shaderSource: string) {\n\tconst textureCalls = shaderSource.match(/\\btexture\\(/g);\n\tif (!textureCalls || textureCalls.length === 0) return { shaderSource, samplerUniforms: [] };\n\tconst samplerUniforms = getSampler2DsInProgram(shaderSource);\n\tif (samplerUniforms.length === 0) return { shaderSource, samplerUniforms };\n\tsamplerUniforms.forEach((name, i) => {\n\t\tconst regex = new RegExp(`\\\\btexture(2D)?\\\\(\\\\s?${name}\\\\b`, 'gs');\n\t\tshaderSource = shaderSource.replace(regex, `GPUIO_TEXTURE_POLYFILL${i}(${name}`);\n\t});\n\tconst remainingTextureCalls = shaderSource.match(/\\btexture(2D)?\\(/g);\n\tif (remainingTextureCalls?.length) {\n\t\tconsole.warn('Fragment shader polyfill has missed some calls to texture().', shaderSource);\n\t}\n\t\n\tlet polyfillUniforms: {[key: string] : string } = {};\n\tfor (let i = 0; i < samplerUniforms.length; i++) {\n\t\t// Init uniforms with a type.\n\t\tpolyfillUniforms[`${SAMPLER2D_HALF_PX_UNIFORM}${i}`] = 'vec2';\n\t\tpolyfillUniforms[`${SAMPLER2D_DIMENSIONS_UNIFORM}${i}`] = 'vec2';\n\t}\n\n\tfunction make_GPUIO_TEXTURE_POLYFILL(i: number, prefix: string, castOpening = '') {\n\t\tconst castEnding = castOpening === '' ? '' : ')';\n\t\tconst returnPrefix = castOpening === '' ? prefix : 'i';\n\t\treturn `\n${returnPrefix}vec4 GPUIO_TEXTURE_POLYFILL${i}(const ${prefix}sampler2D sampler, const vec2 uv) {\n\t${ prefix === '' ? `#if (${SAMPLER2D_FILTER}${i} == 0)` : ''}\n\t\t#if (${SAMPLER2D_WRAP_X}${i} == 0)\n\t\t\t#if (${SAMPLER2D_WRAP_Y}${i} == 0)\n\t\t\t\treturn ${castOpening}texture(sampler, uv)${castEnding};\n\t\t\t#else\n\t\t\t\treturn ${castOpening}GPUIO_TEXTURE_WRAP_CLAMP_REPEAT(sampler, uv, ${SAMPLER2D_HALF_PX_UNIFORM}${i})${castEnding};\n\t\t\t#endif\n\t\t#else\n\t\t\t#if (${SAMPLER2D_WRAP_Y}${i} == 0)\n\t\t\t\treturn ${castOpening}GPUIO_TEXTURE_WRAP_REPEAT_CLAMP(sampler, uv, ${SAMPLER2D_HALF_PX_UNIFORM}${i})${castEnding};\n\t\t\t#else\n\t\t\t\treturn ${castOpening}GPUIO_TEXTURE_WRAP_REPEAT_REPEAT(sampler, uv, ${SAMPLER2D_HALF_PX_UNIFORM}${i})${castEnding};\n\t\t\t#endif\n\t\t#endif\n\t${ prefix === '' ? `#else\n\t\t#if (${SAMPLER2D_WRAP_X}${i} == 0)\n\t\t\t#if (${SAMPLER2D_WRAP_Y}${i} == 0)\n\t\t\t\treturn ${castOpening}GPUIO_TEXTURE_BILINEAR_INTERP(sampler, uv, ${SAMPLER2D_HALF_PX_UNIFORM}${i}, ${SAMPLER2D_DIMENSIONS_UNIFORM}${i})${castEnding};\n\t\t\t#else\n\t\t\t\treturn ${castOpening}GPUIO_TEXTURE_BILINEAR_INTERP_WRAP_CLAMP_REPEAT(sampler, uv, ${SAMPLER2D_HALF_PX_UNIFORM}${i}, ${SAMPLER2D_DIMENSIONS_UNIFORM}${i})${castEnding};\n\t\t\t#endif\n\t\t#else\n\t\t\t#if (${SAMPLER2D_WRAP_Y}${i} == 0)\n\t\t\t\treturn ${castOpening}GPUIO_TEXTURE_BILINEAR_INTERP_WRAP_REPEAT_CLAMP(sampler, uv, ${SAMPLER2D_HALF_PX_UNIFORM}${i}, ${SAMPLER2D_DIMENSIONS_UNIFORM}${i})${castEnding};\n\t\t\t#else\n\t\t\t\treturn ${castOpening}GPUIO_TEXTURE_BILINEAR_INTERP_WRAP_REPEAT_REPEAT(sampler, uv, ${SAMPLER2D_HALF_PX_UNIFORM}${i}, ${SAMPLER2D_DIMENSIONS_UNIFORM}${i})${castEnding};\n\t\t\t#endif\n\t\t#endif\n\t#endif` : '' }\n}\\n`;\n\t}\n\n\tfunction make_GPUIO_TEXTURE_WRAP(prefix: string) {\n\t\treturn `\n${prefix}vec4 GPUIO_TEXTURE_WRAP_REPEAT_REPEAT(const ${prefix}sampler2D sampler, const vec2 uv, const vec2 halfPx) {\n\treturn texture(sampler, GPUIO_WRAP_REPEAT_UV(uv));\n}\n${prefix}vec4 GPUIO_TEXTURE_WRAP_REPEAT_CLAMP(const ${prefix}sampler2D sampler, vec2 uv, const vec2 halfPx) {\n\tuv.x = GPUIO_WRAP_REPEAT_UV_COORD(uv.x);\n\t// uv.y = GPUIO_WRAP_CLAMP_UV_COORD(uv.y, halfPx.y);\n\treturn texture(sampler, uv);\n}\n${prefix}vec4 GPUIO_TEXTURE_WRAP_CLAMP_REPEAT(const ${prefix}sampler2D sampler, vec2 uv, const vec2 halfPx) {\n\t// uv.x = GPUIO_WRAP_CLAMP_UV_COORD(uv.x, halfPx.x);\n\tuv.y = GPUIO_WRAP_REPEAT_UV_COORD(uv.y);\n\treturn texture(sampler, uv);\n}\\n`;\n\t}\n\n\tfunction make_GPUIO_BILINEAR_INTERP(wrapType: string | null) {\n\t\tconst lookupFunction = wrapType ? `GPUIO_TEXTURE_WRAP_${wrapType}` : 'texture';\n\t\tconst extraParams =  wrapType ? `, halfPx` : '';\n\t\treturn`\nvec4 GPUIO_TEXTURE_BILINEAR_INTERP${ wrapType ? `_WRAP_${wrapType}` : '' }(const sampler2D sampler, const vec2 uv, const vec2 halfPx, const vec2 dimensions) {\n\tvec2 pxFraction = fract(uv * dimensions);\n\tvec2 offset = halfPx - vec2(0.00001, 0.00001) * max(\n\t\t\tstep(abs(pxFraction.x - 0.5), 0.001),\n\t\t\tstep(abs(pxFraction.y - 0.5), 0.001)\n\t\t);\n\tvec2 baseUV = uv - offset;\n\tvec2 diagOffset = vec2(offset.x, -offset.y);\n\tvec4 minmin = ${lookupFunction}(sampler, baseUV${extraParams});\n\tvec4 maxmin = ${lookupFunction}(sampler, uv + diagOffset${extraParams});\n\tvec4 minmax = ${lookupFunction}(sampler, uv - diagOffset${extraParams});\n\tvec4 maxmax = ${lookupFunction}(sampler, uv + offset${extraParams});\n\tvec2 t = fract(baseUV * dimensions);\n\tvec4 yMin = mix(minmin, maxmin, t.x);\n\tvec4 yMax = mix(minmax, maxmax, t.x);\n\treturn mix(yMin, yMax, t.y);\n}\\n`;\n\t}\n\n\tshaderSource = `\n${ Object.keys(polyfillUniforms).map((key) => `uniform ${polyfillUniforms[key]} ${key};`).join('\\n') }\n\nfloat GPUIO_WRAP_REPEAT_UV_COORD(const float coord) {\n\treturn fract(coord + ceil(abs(coord)));\n}\nvec2 GPUIO_WRAP_REPEAT_UV(const vec2 uv) {\n\treturn fract(uv + ceil(abs(uv)));\n}\n// float GPUIO_WRAP_CLAMP_UV_COORD(const float coord, const float halfPx) {\n// \treturn clamp(coord, halfPx, 1.0 - halfPx);\n// }\n\n${ make_GPUIO_TEXTURE_WRAP('') }\n#if (__VERSION__ == 300)\n${ ['u', 'i'].map(prefix => make_GPUIO_TEXTURE_WRAP(prefix)).join('\\n') }\n#endif\n\n${ [ null,\n\t'REPEAT_REPEAT',\n\t'REPEAT_CLAMP',\n\t'CLAMP_REPEAT',\n].map(wrap => make_GPUIO_BILINEAR_INTERP(wrap)).join('\\n') }\n\n${ samplerUniforms.map((uniform, index) => {\nreturn `#ifndef ${SAMPLER2D_CAST_INT}${index}\n\t${ make_GPUIO_TEXTURE_POLYFILL(index, '') }\n#endif`}).join('\\n') }\n#if (__VERSION__ == 300)\n${ ['u', 'i'].map(prefix => {\n\treturn samplerUniforms.map((uniform, index) => {\n\t\treturn make_GPUIO_TEXTURE_POLYFILL(index, prefix);\n\t}).join('\\n');\n}).join('\\n') }\n#else\n\t${ samplerUniforms.map((uniform, index) => {\nreturn `#ifdef ${SAMPLER2D_CAST_INT}${index}\n\t${make_GPUIO_TEXTURE_POLYFILL(index, '', 'ivec4(') }\n#endif`}).join('\\n') }\n#endif\n\n${shaderSource}`;\n\treturn {\n\t\tshaderSource,\n\t\tsamplerUniforms,\n\t}\n}\n\ntype T = 'float' | 'vec2' | 'vec3' | 'vec4';\ntype TI = 'int' | 'ivec2' | 'ivec3' | 'ivec4';\ntype TU = 'uint' | 'uvec2' | 'uvec3' | 'uvec4';\ntype TB = 'bool' | 'bvec2' | 'bvec3' | 'bvec4';\n\nfunction floatTypeForIntType(type: TI | TU): T {\n\tswitch(type) {\n\t\tcase 'int':\n\t\tcase 'uint':\n\t\t\treturn 'float';\n\t\tcase 'ivec2':\n\t\tcase 'uvec2':\n\t\t\treturn 'vec2';\n\t\tcase 'ivec3':\n\t\tcase 'uvec3':\n\t\t\treturn 'vec3';\n\t\tcase 'ivec4':\n\t\tcase 'uvec4':\n\t\t\treturn 'vec4';\n\t}\n\tthrow new Error(`Unknown type ${type}.`);\n}\n\nfunction floatTypeForBoolType(type: TB): T {\n\tswitch(type) {\n\t\tcase 'bool':\n\t\t\treturn 'float';\n\t\tcase 'bvec2':\n\t\t\treturn 'vec2';\n\t\tcase 'bvec3':\n\t\t\treturn 'vec3';\n\t\tcase 'bvec4':\n\t\t\treturn 'vec4';\n\t}\n\tthrow new Error(`Unknown type ${type}.`);\n}\n\nlet GLSL1_POLYFILLS: string;\n/**\n * Polyfill common functions/operators that GLSL1 lacks.\n * @private\n */\nexport function GLSL1Polyfills() {\n\tif (GLSL1_POLYFILLS) return GLSL1_POLYFILLS;\n\n\tconst abs = (type: TI) => `${type} abs(const ${type} a) { return ${type}(abs(${floatTypeForIntType(type)}(a))); }`;\n\tconst sign = (type: TI) => `${type} sign(const ${type} a) { return ${type}(sign(${floatTypeForIntType(type)}(a))); }`;\n\tconst trunc = (type: T) => `${type} trunc(const ${type} a) { return round(a - fract(a) * sign(a)); }`;\n\tconst round = (type: T) => `${type} round(const ${type} a) { return floor(a + 0.5); }`;\n\tconst roundEven = (type: T) => `${type} roundEven(const ${type} a) { return 2.0 * round(a / 2.0); }`;\n\tconst min = (type1: TI, type2: TI) => `${type1} min(const ${type1} a, const ${type2} b) { return ${type1}(min(${floatTypeForIntType(type1)}(a), ${floatTypeForIntType(type2)}(b))); }`;\n\tconst max = (type1: TI, type2: TI) => `${type1} max(const ${type1} a, const ${type2} b) { return ${type1}(max(${floatTypeForIntType(type1)}(a), ${floatTypeForIntType(type2)}(b))); }`;\n\tconst clamp = (type1: TI, type2: TI) => `${type1} clamp(const ${type1} a, const ${type2} min, const ${type2} max) { return ${type1}(clamp(${floatTypeForIntType(type1)}(a), ${floatTypeForIntType(type2)}(min), ${floatTypeForIntType(type2)}(max))); }`;\n\tconst mix = (type1: T, type2: TB) => `${type1} mix(const ${type1} a, const ${type1} b, const ${type2} c) { return mix(a, b, ${floatTypeForBoolType(type2)}(c)); }`;\n\tconst det2 = (n: number, m: number, size: number) => `a[${n}][${m}] * a[${(n + 1) % size}][${(m + 1) % size}] - a[${(n + 1) % size}][${m}] * a[${n}][${(m + 1) % size}]`;\n\t// TODO: I don't think these are quite right yet.\n\tconst det3 = (n: number, m: number, size: number) => [0, 1, 2].map(offset => `a[${n}][${(m + offset) % size}] * (${det2((n + 1) % size, (m + 1 + offset) % size, size)})`).join(' + ');\n\tconst det4 = (n: number, m: number, size: number) => [0, 1, 2, 3].map(offset => `a[${n}][${(m + offset) % size}] * (${det3((n + 1) % size, (m + 1 + offset) % size, size)})`).join(' + ');\n\n\t// We don't need to create unsigned int polyfills, bc unsigned int is not a supported type in GLSL1.\n\t// All unsigned int variables will be cast as int and be caught by the signed int polyfills.\n\tGLSL1_POLYFILLS = `\n${abs('int')}\n${abs('ivec2')}\n${abs('ivec3')}\n${abs('ivec4')}\n\n${sign('int')}\n${sign('ivec2')}\n${sign('ivec3')}\n${sign('ivec4')}\n\n${round('float')}\n${round('vec2')}\n${round('vec3')}\n${round('vec4')}\n\n${trunc('float')}\n${trunc('vec2')}\n${trunc('vec3')}\n${trunc('vec4')}\n\n${roundEven('float')}\n${roundEven('vec2')}\n${roundEven('vec3')}\n${roundEven('vec4')}\n\n${min('int', 'int')}\n${min('ivec2', 'ivec2')}\n${min('ivec3', 'ivec3')}\n${min('ivec4', 'ivec4')}\n${min('ivec2', 'int')}\n${min('ivec3', 'int')}\n${min('ivec4', 'int')}\n\n${max('int', 'int')}\n${max('ivec2', 'ivec2')}\n${max('ivec3', 'ivec3')}\n${max('ivec4', 'ivec4')}\n${max('ivec2', 'int')}\n${max('ivec3', 'int')}\n${max('ivec4', 'int')}\n\n${clamp('int', 'int')}\n${clamp('ivec2', 'ivec2')}\n${clamp('ivec3', 'ivec3')}\n${clamp('ivec4', 'ivec4')}\n${clamp('ivec2', 'int')}\n${clamp('ivec3', 'int')}\n${clamp('ivec4', 'int')}\n\n${mix('float', 'bool')}\n${mix('vec2', 'bvec2')}\n${mix('vec3', 'bvec3')}\n${mix('vec4', 'bvec4')}\n\nmat2 outerProduct(const vec2 a, const vec2 b) {\n\treturn mat2(\n\t\ta.x * b.x, a.x * b.y,\n\t\ta.y * b.x, a.y * b.y\n\t);\n}\nmat3 outerProduct(const vec3 a, const vec3 b) {\n\treturn mat3(\n\t\ta.x * b.x, a.x * b.y, a.x * b.z,\n\t\ta.y * b.x, a.y * b.y, a.y * b.z,\n\t\ta.z * b.x, a.z * b.y, a.z * b.z\n\t);\n}\nmat4 outerProduct(const vec4 a, const vec4 b) {\n\treturn mat4(\n\t\ta.x * b.x, a.x * b.y, a.x * b.z, a.x * b.w,\n\t\ta.y * b.x, a.y * b.y, a.y * b.z, a.y * b.w,\n\t\ta.z * b.x, a.z * b.y, a.z * b.z, a.z * b.w,\n\t\ta.w * b.x, a.w * b.y, a.w * b.z, a.w * b.w\n\t);\n}\nmat2 transpose(mat2 a) {\n\tfloat temp = a[0][1];\n\ta[0][1] = a[1][0];\n\ta[1][0] = temp;\n\treturn a;\n}\nmat3 transpose(mat3 a) {\n\tfloat temp = a[0][2];\n\ta[0][2] = a[2][0];\n\ta[2][0] = temp;\n\ttemp = a[0][1];\n\ta[0][1] = a[1][0];\n\ta[1][0] = temp;\n\ttemp = a[1][2];\n\ta[1][2] = a[2][1];\n\ta[2][1] = temp;\n\treturn a;\n}\nmat4 transpose(mat4 a) {\n\tfloat temp = a[0][3];\n\ta[0][3] = a[3][0];\n\ta[3][0] = temp;\n\ttemp = a[0][2];\n\ta[0][2] = a[2][0];\n\ta[2][0] = temp;\n\ttemp = a[2][3];\n\ta[2][3] = a[3][2];\n\ta[3][2] = temp;\n\ttemp = a[0][1];\n\ta[0][1] = a[1][0];\n\ta[1][0] = temp;\n\ttemp = a[1][2];\n\ta[1][2] = a[2][1];\n\ta[2][1] = temp;\n\ttemp = a[2][3];\n\ta[2][3] = a[3][2];\n\ta[3][2] = temp;\n\treturn a;\n}\n\nfloat determinant(const mat2 a) {\n\treturn ${ det2(0, 0, 2) };\n}\nfloat determinant(const mat3 a) {\n\treturn ${ det3(0, 0, 3) };\n}\nfloat determinant(const mat4 a) {\n\treturn ${ det4(0, 0, 4) };\n}\n` + \n// Copied from https://github.com/gpujs/gpu.js/blob/master/src/backend/web-gl/fragment-shader.js\n`\nfloat cosh(const float x) {\n\treturn (pow(${Math.E}, x) + pow(${Math.E}, -x)) / 2.0; \n}\nfloat sinh(const float x) {\n\treturn (pow(${Math.E}, x) - pow(${Math.E}, -x)) / 2.0;\n}\nfloat tanh(const float x) {\n\tfloat e = exp(2.0 * x);\n\treturn (e - 1.0) / (e + 1.0);\n}\nfloat asinh(const float x) {\n\treturn log(x + sqrt(x * x + 1.0));\n}\nfloat acosh(const float x) {\n\treturn log(x + sqrt(x * x - 1.0));\n}\nfloat atanh(float x) {\n\tx = (x + 1.0) / (x - 1.0);\n\treturn 0.5 * log(x * sign(x));\n}`;\n\treturn GLSL1_POLYFILLS;\n}\n\nlet FRAGMENT_SHADER_POLYFILLS: string;\n/**\n * Polyfills to be make available for both GLSL1 and GLSL3 fragment shaders.\n * @private\n */\nexport function fragmentShaderPolyfills() {\n\tif (FRAGMENT_SHADER_POLYFILLS) return FRAGMENT_SHADER_POLYFILLS;\n\n\tconst modi = (type1: TI | TU, type2: TI | TU) => `${type1} modi(const ${type1} x, const ${type2} y) { return x - y * (x / y); }`;\n\tconst stepi = (type1: TI | TU, type2: TI | TU) => `${type2} stepi(const ${type1} x, const ${type2} y) { return ${type2}(step(${floatTypeForIntType(type1)}(x), ${floatTypeForIntType(type2)}(y))); }`;\n\tconst bitshiftLeft = (type1: TI | TU, type2: TI | TU) => {\nreturn`${type1} bitshiftLeft(const ${type1} a, const ${type2} b) {\n\t#if (__VERSION__ == 300)\n\t\treturn a << b;\n\t#else\n\t\treturn a * ${type1}(pow(${floatTypeForIntType(type2)}(2.0), ${floatTypeForIntType(type2)}(b)));\n\t#endif\n}`;\n\t}\n\tconst bitshiftRight = (type1: TI | TU, type2: TI | TU) => {\nreturn `${type1} bitshiftRight(const ${type1} a, const ${type2} b) {\n\t#if (__VERSION__ == 300)\n\t\treturn a >> b;\n\t#else\n\t\treturn ${type1}(round(${floatTypeForIntType(type1)}(a) / pow(${floatTypeForIntType(type2)}(2.0), ${floatTypeForIntType(type2)}(b))));\n\t#endif\n}`;\n\t}\n\t// Copied from https://github.com/gpujs/gpu.js/blob/master/src/backend/web-gl/fragment-shader.js\n\t// Seems like these could be optimized.\n\tconst bitwiseOr = (numBits: 8 | 16 | 32) => {\nreturn `int bitwiseOr${numBits === 32 ? '' : numBits}(int a, int b) {\n\t#if (__VERSION__ == 300)\n\t\treturn a | b;\n\t#else\n\t\tint result = 0;\n\t\tint n = 1;\n\t\t\n\t\tfor (int i = 0; i < ${numBits}; i++) {\n\t\t\tif ((modi(a, 2) == 1) || (modi(b, 2) == 1)) {\n\t\t\t\tresult += n;\n\t\t\t}\n\t\t\ta = a / 2;\n\t\t\tb = b / 2;\n\t\t\tn = n * 2;\n\t\t\tif(!(a > 0 || b > 0)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t#endif\n}`; };\nconst bitwiseXOR = (numBits: 8 | 16 | 32) => {\nreturn `int bitwiseXOR${numBits === 32 ? '' : numBits}(int a, int b) {\n\t#if (__VERSION__ == 300)\n\t\treturn a ^ b;\n\t#else\n\t\tint result = 0;\n\t\tint n = 1;\n\t\t\n\t\tfor (int i = 0; i < ${numBits}; i++) {\n\t\t\tif ((modi(a, 2) == 1) != (modi(b, 2) == 1)) {\n\t\t\t\tresult += n;\n\t\t\t}\n\t\t\ta = a / 2;\n\t\t\tb = b / 2;\n\t\t\tn = n * 2;\n\t\t\tif(!(a > 0 || b > 0)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t#endif\n}`; }\n\tconst bitwiseAnd = (numBits: 8 | 16 | 32) => {\nreturn `int bitwiseAnd${numBits === 32 ? '' : numBits}(int a, int b) {\n\t#if (__VERSION__ == 300)\n\t\treturn a & b;\n\t#else\n\t\tint result = 0;\n\t\tint n = 1;\n\t\tfor (int i = 0; i < ${numBits}; i++) {\n\t\t\tif ((modi(a, 2) == 1) && (modi(b, 2) == 1)) {\n\t\t\t\tresult += n;\n\t\t\t}\n\t\t\ta = a / 2;\n\t\t\tb = b / 2;\n\t\t\tn = n * 2;\n\t\t\tif(!(a > 0 && b > 0)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t#endif\n}`; };\n\tconst bitwiseNot = (numBits: 8 | 16 | 32) => {\nreturn `int bitwiseNot${numBits === 32 ? '' : numBits}(int a) {\n\t#if (__VERSION__ == 300)\n\t\treturn ~a;\n\t#else\n\t\tint result = 0;\n\t\tint n = 1;\n\n\t\tfor (int i = 0; i < ${numBits}; i++) {\n\t\t\tif (modi(a, 2) == 0) {\n\t\t\t\tresult += n;\n\t\t\t}\n\t\t\ta = a / 2;\n\t\t\tn = n * 2;\n\t\t}\n\t\treturn result;\n\t#endif\n}`; }\n\n\tFRAGMENT_SHADER_POLYFILLS = `\n${modi('int', 'int')}\n${modi('ivec2', 'ivec2')}\n${modi('ivec3', 'ivec3')}\n${modi('ivec4', 'ivec4')}\n${modi('ivec2', 'int')}\n${modi('ivec3', 'int')}\n${modi('ivec4', 'int')}\n#if (__VERSION__ == 300)\n${modi('uint', 'uint')}\n${modi('uvec2', 'uvec2')}\n${modi('uvec3', 'uvec3')}\n${modi('uvec4', 'uvec4')}\n${modi('uvec2', 'uint')}\n${modi('uvec3', 'uint')}\n${modi('uvec4', 'uint')}\n#endif\n\n${stepi('int', 'int')}\n${stepi('ivec2', 'ivec2')}\n${stepi('ivec3', 'ivec3')}\n${stepi('ivec4', 'ivec4')}\n${stepi('int', 'ivec2')}\n${stepi('int', 'ivec3')}\n${stepi('int', 'ivec4')}\n#if (__VERSION__ == 300)\n${stepi('uint', 'uint')}\n${stepi('uvec2', 'uvec2')}\n${stepi('uvec3', 'uvec3')}\n${stepi('uvec4', 'uvec4')}\n${stepi('uint', 'uvec2')}\n${stepi('uint', 'uvec3')}\n${stepi('uint', 'uvec4')}\n#endif\n\n${bitshiftLeft('int', 'int')}\n${bitshiftLeft('ivec2', 'ivec2')}\n${bitshiftLeft('ivec3', 'ivec3')}\n${bitshiftLeft('ivec4', 'ivec4')}\n${bitshiftLeft('ivec2', 'int')}\n${bitshiftLeft('ivec3', 'int')}\n${bitshiftLeft('ivec4', 'int')}\n#if (__VERSION__ == 300)\n${bitshiftLeft('uint', 'uint')}\n${bitshiftLeft('uvec2', 'uvec2')}\n${bitshiftLeft('uvec3', 'uvec3')}\n${bitshiftLeft('uvec4', 'uvec4')}\n${bitshiftLeft('uvec2', 'uint')}\n${bitshiftLeft('uvec3', 'uint')}\n${bitshiftLeft('uvec4', 'uint')}\n#endif\n\n${bitshiftRight('int', 'int')}\n${bitshiftRight('ivec2', 'ivec2')}\n${bitshiftRight('ivec3', 'ivec3')}\n${bitshiftRight('ivec4', 'ivec4')}\n${bitshiftRight('ivec2', 'int')}\n${bitshiftRight('ivec3', 'int')}\n${bitshiftRight('ivec4', 'int')}\n#if (__VERSION__ == 300)\n${bitshiftRight('uint', 'uint')}\n${bitshiftRight('uvec2', 'uvec2')}\n${bitshiftRight('uvec3', 'uvec3')}\n${bitshiftRight('uvec4', 'uvec4')}\n${bitshiftRight('uvec2', 'uint')}\n${bitshiftRight('uvec3', 'uint')}\n${bitshiftRight('uvec4', 'uint')}\n#endif\n\n${bitwiseOr(8)}\n${bitwiseOr(16)}\n${bitwiseOr(32)}\n\n${bitwiseXOR(8)}\n${bitwiseXOR(16)}\n${bitwiseXOR(32)}\n\n${bitwiseAnd(8)}\n${bitwiseAnd(16)}\n${bitwiseAnd(32)}\n\n${bitwiseNot(8)}\n${bitwiseNot(16)}\n${bitwiseNot(32)}\n\n#if (__VERSION__ == 300)\n${ [8, 16, ''].map(suffix => {\nreturn `\nuint bitwiseOr${suffix}(uint a, uint b) {\n\treturn uint(bitwiseOr${suffix}(int(a), int(b)));\n}\nuint bitwiseXOR${suffix}(uint a, uint b) {\n\treturn uint(bitwiseXOR${suffix}(int(a), int(b)));\n}\nuint bitwiseAnd${suffix}(uint a, uint b) {\n\treturn uint(bitwiseAnd${suffix}(int(a), int(b)));\n}\nuint bitwiseNot${suffix}(uint a) {\n\treturn uint(bitwiseNot${suffix}(int(a)));\n}` }).join('\\n')}\n\n#endif\n`;\n\treturn FRAGMENT_SHADER_POLYFILLS;\n}\n","import { GLSLVersion, GLSL3 } from './constants';\n\n/**\n * Helper functions for converting GLSL3 to GLSL1 and checking for valid shader code.\n * Note: there is no positive lookbehind support in some browsers, use capturing parens instead.\n * https://stackoverflow.com/questions/3569104/positive-look-behind-in-javascript-regular-expression/3569116#3569116\n */\n\ntype GLSLType = 'float' | 'int' | 'uint' | 'vec2' | 'vec3' | 'vec4' | 'ivec2' | 'ivec3' | 'ivec4' | 'uvec2' | 'uvec3' | 'uvec4';\n\n/**\n * Convert vertex shader \"in\" to \"attribute\".\n * @private\n */\nexport function glsl1VertexIn(shaderSource: string) {\n\treturn shaderSource.replace(/\\bin\\b/g, 'attribute');\n}\n\nfunction escapeRegExp(string: string){\n\treturn string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\n/**\n * Typecast variable assignment.\n * This is used in cases when e.g. varyings have to be converted to float in GLSL1.\n */\nfunction typecastVariable(shaderSource: string, variableName: string, type: string) {\n\t// \"s\" makes this work for multiline values.\n\t// Do this without lookbehind to support older browsers.\n\t// const regexMatch = new RegExp(`(?<=\\\\b${escapeRegExp(variableName)}\\\\s*=\\\\s*)\\\\S[^;]*(?=;)`, 'sg');\n\tconst regexMatch = new RegExp(`\\\\b${escapeRegExp(variableName)}\\\\s*=\\\\s*\\\\S[^;]*;`, 'sg');\n\tconst assignmentExpressions = shaderSource.match(regexMatch);\n\tif (assignmentExpressions) {\n\t\t// Loop through all places where variable is assigned and typecast.\n\t\tfor (let i = 0; i < assignmentExpressions.length; i++) {\n\t\t\tconst regexValueMatch = new RegExp(`\\\\b${escapeRegExp(variableName)}\\\\s*=\\\\s*(\\\\S[^;]*);`, 's');\n\t\t\tconst value = assignmentExpressions[i].match(regexValueMatch);\n\t\t\tif (value && value[1]) {\n\t\t\t\tconst regexReplace = new RegExp(`\\\\b${escapeRegExp(variableName)}\\\\s*=\\\\s*${escapeRegExp(value[1])}\\\\s*;`, 's');\n\t\t\t\tshaderSource = shaderSource.replace(regexReplace, `${variableName} = ${type}(${value[1]});`);\n\t\t\t} else {\n\t\t\t\tconsole.warn(`Could not find value in expression: \"${assignmentExpressions[i]}\"`);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tconsole.warn(`No assignment found for shader variable ${variableName}.`);\n\t}\n\treturn shaderSource;\n}\n\n/**\n * Convert int varyings to float types.\n * Also update any variable assignments so that they are cast to float.\n * @private\n */\nfunction _castVaryingToFloat(shaderSource: string, regexString: string, type: string) {\n\t// Do this without lookbehind to support older browsers.\n\t// const regexMatch = new RegExp(`(?<=${regexString}\\\\s+)\\\\S[^;]*(?=;)`, 'g');\n\tconst regexMatch = new RegExp(`${regexString}\\\\s+\\\\S[^;]*;`, 'g');\n\tconst castToFloatExpressions = shaderSource.match(regexMatch);\n\tif (castToFloatExpressions) {\n\t\t// Replace all with new type.\n\t\tconst regexReplace = new RegExp(`${regexString}\\\\b`, 'g');\n\t\tshaderSource = shaderSource.replace(regexReplace, `varying ${type}`);\n\t\t// Loop through each expression, grab variable name, and cast all assignments.\n\t\tfor (let i = 0; i < castToFloatExpressions.length; i++) {\n\t\t\tconst regexVariableMatch = new RegExp(`${regexString}\\\\s+(\\\\S[^;]*);`);\n\t\t\tconst variable = castToFloatExpressions[i].match(regexVariableMatch);\n\t\t\tif (variable && variable[2]) {\n\t\t\t\tshaderSource = typecastVariable(shaderSource, variable[2], type);\n\t\t\t} else {\n\t\t\t\tconsole.warn(`Could not find variable name in expression: \"${castToFloatExpressions[i]}\"`);\n\t\t\t}\n\t\t}\n\t}\n\treturn shaderSource;\n}\n\n/**\n * Convert int varyings to float types.\n * Only exported for testing.\n * @private\n */\nexport function castVaryingToFloat(shaderSource: string) {\n\t// Need to init all expressions with the same number of capturing groups\n\t// so that this will work in _castVaryingToFloat.\n\tshaderSource = _castVaryingToFloat(shaderSource, '\\\\bvarying\\\\s+(u)?int', 'float');\n\tshaderSource = _castVaryingToFloat(shaderSource, '\\\\bvarying\\\\s+(i|u)vec2', 'vec2');\n\tshaderSource = _castVaryingToFloat(shaderSource, '\\\\bvarying\\\\s+(i|u)vec3', 'vec3');\n\tshaderSource = _castVaryingToFloat(shaderSource, '\\\\bvarying\\\\s+(i|u)vec4', 'vec4');\n\treturn shaderSource;\n}\n\n/**\n * Convert vertex shader \"out\" to \"varying\".\n * Also remove \"flat\" if necessary.\n * Also cast as float if necessary.\n * @private\n */\nexport function glsl1VertexOut(shaderSource: string) {\n\tshaderSource = shaderSource.replace(/(\\bflat\\s+)?\\bout\\b/g, 'varying');\n\tshaderSource = castVaryingToFloat(shaderSource);\n\treturn shaderSource;\n}\n\n/**\n * Convert fragment shader \"in\" to \"varying\".\n * Also remove \"flat\" if necessary.\n * Also cast as float if necessary.\n * @private\n */\nexport function glsl1FragmentIn(shaderSource: string) {\n\tshaderSource = shaderSource.replace(/(\\bflat\\s+)?\\bin\\b/g, 'varying');\n\tshaderSource = castVaryingToFloat(shaderSource);\n\treturn shaderSource;\n}\n\n/**\n * Get variable name, type, and layout number for out variables.\n * Only exported for testing.\n * @private\n */\nexport function getFragmentOuts(shaderSource: string, programName: string) {\n\tconst outs: { [key: string]: {\n\t\tlocation: number,\n\t\ttype: GLSLType,\n\t}} = {};\n\tlet maxLocation = 0;\n\twhile (true) {\n\t\t// Do this without lookbehind to support older browsers.\n\t\tconst match = shaderSource.match(/\\b(layout\\s*\\(\\s*location\\s*=\\s*([0-9]+)\\s*\\)\\s*)?out\\s+((lowp|mediump|highp)\\s+)?((float|int|uint|([iu]?vec[234]))\\s+)?([_$a-zA-Z0-9]+)\\s*;/);\n\t\tif (!match) {\n\t\t\tif (Object.keys(outs).length === 0) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\t// Sort by location.\n\t\t\tconst variableNames = Object.keys(outs);\n\t\t\tconst numVariables = variableNames.length;\n\t\t\tconst outsSorted: {\n\t\t\t\tname: string,\n\t\t\t\ttype: GLSLType,\n\t\t\t}[] = new Array(maxLocation).fill(undefined);\n\t\t\t\n\t\t\tfor (let i = 0; i < numVariables; i++) {\n\t\t\t\tconst name = variableNames[i];\n\t\t\t\tconst { location, type } = outs[name];\n\t\t\t\tif (outsSorted[location] !== undefined) {\n\t\t\t\t\tthrow new Error(`Must be exactly one out declaration per layout location in GPUProgram \"${programName}\", conflicting declarations found at location ${location}.`);\n\t\t\t\t}\n\t\t\t\toutsSorted[location] =  { name, type };\n\t\t\t}\n\t\t\tif (variableNames.length !== maxLocation + 1) {\n\t\t\t\tthrow new Error(`Must be exactly one out declaration per layout location in GPUProgram \"${programName}\", layout locations must be sequential (no missing location numbers) starting from 0.`);\n\t\t\t}\n\t\t\tfor (let i = 0; i <= maxLocation; i++) {\n\t\t\t\tif (outsSorted[i] === undefined) {\n\t\t\t\t\tthrow new Error(`Missing out declaration at location ${i} in GPUProgram \"${programName}\", layout locations must be sequential (no missing location numbers) starting from 0.`);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn outsSorted;\n\t\t}\n\t\t// Save out parameters.\n\t\tconst name = match[8];\n\t\tconst location = parseInt(match[2] || '0');\n\t\tconst type = match[6] as GLSLType;\n\t\tif (!type) {\n\t\t\tthrow new Error(`No type found for out declaration \"${match[0]}\" for GPUProgram \"${programName}\".`);\n\t\t}\n\t\tif (!name) {\n\t\t\tthrow new Error(`No variable name found for out declaration \"${match[0]}\" for GPUProgram \"${programName}\".`);\n\t\t}\n\t\tif (outs[name]) {\n\t\t\tif (outs[name].location !== location) {\n\t\t\t\tthrow new Error(`All out declarations for variable \"${name}\" must have same location in GPUProgram \"${programName}\".`);\n\t\t\t}\n\t\t} else {\n\t\t\tif (location > maxLocation) maxLocation = location;\n\t\t\touts[name] = {\n\t\t\t\tlocation,\n\t\t\t\ttype,\n\t\t\t};\n\t\t}\n\t\t// Remove out definition so we can match to the next one.\n\t\tshaderSource = shaderSource.replace(match[0], '');\n\t}\n}\n\n/**\n * Convert out variables to gl_FragColor.\n * @private\n */\nexport function glsl1FragmentOut(shaderSource: string, programName: string) {\n\tconst outs = getFragmentOuts(shaderSource, programName);\n\tif (outs.length === 0) {\n\t\treturn [shaderSource];\n\t}\n\t// Remove layout declarations.\n\tshaderSource = shaderSource.replace(/\\blayout\\s*\\(\\s*location\\s*=\\s*([0-9]+)\\s*\\)\\s*/g, '');\n\t// If we detect multiple out declarations, we need to split the shader source.\n\n\tconst shaderSources: string[] = [];\n\tfor (let i = 0, numOuts = outs.length; i < numOuts; i++) {\n\t\tconst { type, name } = outs[i];\n\n\t\t// Remove out declaration for this variable.\n\t\tconst outRegex = new RegExp(`\\\\bout\\\\s+((lowp|mediump|highp)\\\\s+)?(float|int|uint|([iu]?vec[234]))\\\\s+${name}\\\\s*;`, 'g');\n\t\tlet outShaderSource = shaderSource.replace(outRegex, '');\n\t\t// Remove any other out declarations.\n\t\toutShaderSource = outShaderSource.replace(/\\bout\\b/g, '');\n\n\t\tlet assignmentFound = false;\n\t\t// Replace each instance of \"name =\" with gl_FragColor = and cast to vec4.\n\t\t// Do this without lookbehind to support older browsers.\n\t\t// const output = outShaderSource.match(/(?<=\\b${name}\\s*=\\s*)\\S.*(?=;)/s); // /s makes this work for multiline.\n\t\t// ? puts this in lazy mode (match shortest strings).\n\t\tconst regex = new RegExp(`\\\\b${name}\\\\s*=\\\\s*(\\\\S.*?);`, 's'); // 's' makes this work for multiline.\n\t\twhile (true) {\n\t\t\tconst output = outShaderSource.match(regex);\n\t\t\tif (output && output[1]) {\n\t\t\t\tassignmentFound = true;\n\t\t\t\tlet filler = '';\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'float':\n\t\t\t\t\tcase 'int':\n\t\t\t\t\tcase 'uint':\n\t\t\t\t\t\tfiller = ', 0, 0, 0';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'vec2':\n\t\t\t\t\tcase 'ivec2':\n\t\t\t\t\tcase 'uvec2':\n\t\t\t\t\t\tfiller = ', 0, 0';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'vec3':\n\t\t\t\t\tcase 'ivec3':\n\t\t\t\t\tcase 'uvec3':\n\t\t\t\t\t\tfiller = ', 0';\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\toutShaderSource = outShaderSource.replace(regex, `gl_FragColor = vec4(${output[1]}${filler});`);\n\t\t\t} else {\n\t\t\t\tif (!assignmentFound) throw new Error(`No assignment found for out declaration in GPUProgram \"${programName}\".`);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tshaderSources.push(outShaderSource);\n\t}\n\treturn shaderSources;\n}\n\n/**\n * Contains gl_FragColor.\n * @private\n */\n function containsGLFragColor(shaderSource: string) {\n\treturn !!shaderSource.match(/\\bgl_FragColor\\b/);\n}\n\n/**\n * Check for presence of gl_FragColor in fragment shader source.\n * @private \n */\n export function checkFragmentShaderForFragColor(shaderSource: string, glslVersion: GLSLVersion, name: string) {\n\tconst gl_FragColor = containsGLFragColor(shaderSource);\n\tif (glslVersion === GLSL3) {\n\t\t// Check that fragment shader source DOES NOT contain gl_FragColor\n\t\tif (gl_FragColor) {\n\t\t\tthrow new Error(`Found \"gl_FragColor\" declaration in fragment shader for GPUProgram \"${name}\": either init GPUComposer with glslVersion = GLSL1 or use GLSL3 syntax in your fragment shader.`);\n\t\t}\n\t}\n}\n\n/**\n * Convert texture to texture2D.\n * @private\n */\nexport function glsl1Texture(shaderSource: string) {\n\treturn shaderSource.replace(/\\btexture\\(/g, 'texture2D(');\n}\n\n/**\n * Convert isampler2D and usampler2D to sampler2D.\n * @private\n */\nexport function glsl1Sampler2D(shaderSource: string) {\n\treturn shaderSource.replace(/\\b(i|u)sampler2D\\b/g, 'sampler2D');\n}\n\n/**\n * Unsigned int types are not supported, use int types instead.\n * @private\n */\nexport function glsl1Uint(shaderSource: string) {\n\tshaderSource = shaderSource.replace(/\\buint\\b/g, 'int');\n\tshaderSource = shaderSource.replace(/\\buvec2\\b/g, 'ivec2');\n\tshaderSource = shaderSource.replace(/\\buvec3\\b/g, 'ivec3');\n\tshaderSource = shaderSource.replace(/\\buvec4\\b/g, 'ivec4');\n\tshaderSource = shaderSource.replace(/\\buint\\(/g, 'int(');\n\tshaderSource = shaderSource.replace(/\\buvec2\\(/g, 'ivec2(');\n\tshaderSource = shaderSource.replace(/\\buvec3\\(/g, 'ivec3(');\n\tshaderSource = shaderSource.replace(/\\buvec4\\(/g, 'ivec4(');\n\treturn shaderSource;\n}\n\n/**\n * Replace all highp with mediump.\n * @private\n */\nexport function highpToMediump(shaderSource: string) {\n\treturn shaderSource.replace(/\\bhighp\\b/, 'mediump');\n}\n\n/**\n * Strip out any version numbers.\n * https://github.com/Jam3/glsl-version-regex\n * @private\n */\nexport function stripVersion(shaderSource: string) {\n\tconst origLength = shaderSource.length;\n\tshaderSource = shaderSource.replace(/^\\s*\\#version\\s+([0-9]+(\\s+(es)+)?)\\s*/, '');\n\tif (shaderSource.length !== origLength) {\n\t\tconsole.warn('GPUIO expects shader source that does not contain #version declarations, removing....');\n\t}\n\treturn shaderSource;\n}\n\n/**\n * Strip out any precision declarations.\n * @private\n */\nexport function stripPrecision(shaderSource: string) {\n\tconst origLength = shaderSource.length;\n\tshaderSource = shaderSource.replace(/\\s*precision\\s+((highp)|(mediump)|(lowp))\\s+[a-zA-Z0-9]+\\s*;/g, '');\n\tif (shaderSource.length !== origLength) {\n\t\tconsole.warn('GPUIO expects shader source that does not contain precision declarations, removing....');\n\t}\n\treturn shaderSource;\n}\n\n/**\n * Strip out comments from shader code.\n * @private\n */\nexport function stripComments(shaderSource: string) {\n\tshaderSource = shaderSource.replace(/[\\t ]*\\/\\/.*\\n/g, ''); // Remove single-line comments.\n\t// ? puts this in lazy mode (match shortest strings).\n\tshaderSource = shaderSource.replace(/\\/\\*.*?\\*\\//gs, ''); /* Remove multi-line comments */\n\treturn shaderSource;\n}\n\n/**\n * Get the number of sampler2D's in a fragment shader program.\n * @private\n */\nexport function getSampler2DsInProgram(shaderSource: string) {\n\t// Do this without lookbehind to support older browsers.\n\t// const samplers = shaderSource.match(/(?<=\\buniform\\s+(((highp)|(mediump)|(lowp))\\s+)?(i|u)?sampler2D\\s+)\\w+(?=\\s?;)/g);\n\tconst samplersNoDuplicates: {[key: string]: boolean} = {};\n\tconst regex = '\\\\buniform\\\\s+(((highp)|(mediump)|(lowp))\\\\s+)?(i|u)?sampler2D\\\\s+(\\\\w+)\\\\s*;';\n\tconst samplers = shaderSource.match(new RegExp(regex, 'g'));\n\tif (!samplers || samplers.length === 0) return [];\n\t// We need to be a bit careful as same sampler could be declared multiple times if compile time conditionals are used.\n\t// Extract uniform name.\n\tconst uniformMatch = new RegExp(regex);\n\tsamplers.forEach(sampler => {\n\t\tconst uniform = sampler.match(uniformMatch);\n\t\tif (!uniform || !uniform[7]) {\n\t\t\tconsole.warn(`Could not find sampler2D uniform name in string \"${sampler}\".`);\n\t\t\treturn;\n\t\t}\n\t\tsamplersNoDuplicates[uniform[7]] = true;\n\t})\n\treturn Object.keys(samplersNoDuplicates);\n}","import {\n\tisArray,\n\tisBoolean,\n\tisFiniteNumber,\n\tisInteger,\n\tisNonNegativeInteger,\n\tisString,\n} from '@amandaghassaei/type-checks';\nimport {\n\tBOOL,\n\tBOOL_1D_UNIFORM,\n\tBOOL_2D_UNIFORM,\n\tBOOL_3D_UNIFORM,\n\tBOOL_4D_UNIFORM,\n\tBYTE,\n\tCompileTimeConstants,\n\tDEFAULT_ERROR_CALLBACK,\n\tErrorCallback,\n\tFLOAT,\n\tFLOAT_1D_UNIFORM,\n\tFLOAT_2D_UNIFORM,\n\tFLOAT_3D_UNIFORM,\n\tFLOAT_4D_UNIFORM,\n\tGLSL1,\n\tGLSL3,\n\tGLSLPrecision,\n\tGLSLVersion,\n\tGPUIO_FLOAT_PRECISION,\n\tGPUIO_INT_PRECISION,\n\tGPULayerState,\n\tGPULayerType,\n\tHALF_FLOAT,\n\tINT,\n\tINT_1D_UNIFORM,\n\tINT_2D_UNIFORM,\n\tINT_3D_UNIFORM,\n\tINT_4D_UNIFORM,\n\tPRECISION_HIGH_P,\n\tPRECISION_MEDIUM_P,\n\tSHORT,\n\tUINT,\n\tUINT_1D_UNIFORM,\n\tUINT_2D_UNIFORM,\n\tUINT_3D_UNIFORM,\n\tUINT_4D_UNIFORM,\n\tUniformType,\n\tUniformValue,\n\tUNSIGNED_BYTE,\n\tUNSIGNED_INT,\n\tUNSIGNED_SHORT,\n\tWEBGL1,\n\tWEBGL2,\n} from './constants';\nimport { intForPrecision } from './conversions';\nimport { PRECISION_SOURCE } from './glsl/common/precision';\nimport type { GPULayer } from './GPULayer';\nimport { fragmentShaderPolyfills, GLSL1Polyfills, texturePolyfill } from './polyfills';\nimport {\n\tcheckFragmentShaderForFragColor,\n\tglsl1FragmentIn,\n\tglsl1FragmentOut,\n\tglsl1Sampler2D,\n\tglsl1Texture,\n\tglsl1Uint,\n\tglsl1VertexIn,\n\tglsl1VertexOut,\n\thighpToMediump,\n\tstripComments,\n\tstripPrecision,\n\tstripVersion,\n} from './regex';\n\n/**\n * Memoize results of more complex WebGL tests (that require allocations/deallocations).\n * @private\n */\nconst results = {\n\tsupportsWebGL2: undefined as undefined | boolean,\n\tsupportsHighpVertex: undefined as  undefined | boolean,\n\tsupportsHighpFragment: undefined as undefined | boolean,\n\tmediumpVertexPrecision: undefined as undefined | typeof PRECISION_HIGH_P | typeof PRECISION_MEDIUM_P,\n\tmediumpFragmentPrecision: undefined as undefined | typeof PRECISION_HIGH_P | typeof PRECISION_MEDIUM_P,\n}\n\n/**\n * Test whether a GPULayer type is a float type.\n * @private\n */\nexport function isFloatType(type: GPULayerType) {\n\treturn type === FLOAT || type === HALF_FLOAT;\n}\n\n/**\n * Test whether a GPULayer type is an unsigned int type.\n * @private\n */\n export function isUnsignedIntType(type: GPULayerType) {\n\treturn type === UNSIGNED_BYTE || type === UNSIGNED_SHORT || type === UNSIGNED_INT;\n}\n\n/**\n * Test whether a GPULayer type is a signed int type.\n * @private\n */\n export function isSignedIntType(type: GPULayerType) {\n\treturn type === BYTE || type === SHORT || type === INT;\n}\n\n/**\n * Test whether a GPULayer type is a int type.\n * @private\n */\n export function isIntType(type: GPULayerType) {\n\treturn isUnsignedIntType(type) || isSignedIntType(type);\n}\n\n/**\n * Create a string to pass compile time constants into shader.\n * @private\n */\nfunction convertCompileTimeConstantsToString(compileTimeConstants: CompileTimeConstants) {\n\tlet CTCSource = '';\n\tconst keys = Object.keys(compileTimeConstants);\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tconst key = keys[i];\n\t\t// Check that define is passed in as a string.\n\t\tif (!isString(key) || !isString(compileTimeConstants[key])) {\n\t\t\tthrow new Error(`GPUProgram compile time constants must be passed in as key value pairs that are both strings, got key value pair of type [${typeof key} : ${typeof compileTimeConstants[key]}] for key ${key}.`)\n\t\t}\n\t\tCTCSource += `#define ${key} ${compileTimeConstants[key]}\\n`;\n\t}\n\treturn CTCSource;\n}\n\n/**\n * Create header string for fragment and vertex shaders.\n * Export this for testing purposes.\n * @private\n */\nexport function makeShaderHeader(\n\tglslVersion: GLSLVersion,\n\tintPrecision: GLSLPrecision,\n\tfloatPrecision: GLSLPrecision,\n\tcompileTimeConstants?: CompileTimeConstants,\n) {\n\tconst versionSource = glslVersion === GLSL3 ? `#version ${GLSL3}\\n` : '';\n\tconst compileTimeConstantsSource = compileTimeConstants ? convertCompileTimeConstantsToString(compileTimeConstants) : '';\n\tconst precisionConstantsSource = convertCompileTimeConstantsToString({\n\t\t[GPUIO_INT_PRECISION]: `${intForPrecision(intPrecision)}`,\n\t\t[GPUIO_FLOAT_PRECISION]: `${intForPrecision(floatPrecision)}`,\n\t});\n\treturn `${versionSource}${compileTimeConstantsSource}${precisionConstantsSource}${PRECISION_SOURCE}`;\n}\n\n/**\n * Compile vertex or fragment shaders.\n * Fragment shaders may be compiled on the fly, so keep this efficient.\n * Copied from http://webglfundamentals.org/webgl/lessons/webgl-boilerplate.html\n * @private\n */\nexport function compileShader(\n\tgl: WebGLRenderingContext | WebGL2RenderingContext,\n\tglslVersion: GLSLVersion,\n\tintPrecision: GLSLPrecision,\n\tfloatPrecision: GLSLPrecision,\n\tshaderSource: string,\n\tshaderType: number,\n\tprogramName: string,\n\terrorCallback: ErrorCallback,\n\tcompileTimeConstants?: CompileTimeConstants,\n\tcheckCompileStatus = false,\n) {\n\t// Create the shader object\n\tconst shader = gl.createShader(shaderType);\n\tif (!shader) {\n\t\terrorCallback('Unable to init gl shader.');\n\t\treturn null;\n\t}\n\n\t// Set the shader source code.\n\tconst shaderHeader = makeShaderHeader(\n\t\tglslVersion,\n\t\tintPrecision,\n\t\tfloatPrecision,\n\t\tcompileTimeConstants,\n\t);\n\tconst fullShaderSource = `${shaderHeader}${shaderSource}`;\n\tgl.shaderSource(shader, fullShaderSource);\n\n\t// Compile the shader\n\tgl.compileShader(shader);\n\n\tif (checkCompileStatus) {\n\t\t// Check if shaders compiled - do this only on the first compilation bc of:\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#dont_check_shader_compile_status_unless_linking_fails\n\t\tconst success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\t\tif (!success) {\n\t\t\t// Something went wrong during compilation - print shader source (with line number) and the error.\n\t\t\tconsole.log(fullShaderSource.split('\\n').map((line, i) => `${i}\\t${line}`).join('\\n'));\n\t\t\terrorCallback(`Could not compile ${shaderType === gl.FRAGMENT_SHADER ? 'fragment' : 'vertex'} shader for program \"${programName}\": ${gl.getShaderInfoLog(shader)}.`);\n\t\t\treturn null;\n\t\t}\n\t}\n\treturn shader;\n}\n\n/**\n * Init a WebGL program from vertex and fragment shaders.\n * GLPrograms may be inited on the fly, so keep this efficient.\n * @private\n */\nexport function initGLProgram(\n\tgl: WebGLRenderingContext | WebGL2RenderingContext,\n\tvertexShader: WebGLShader,\n\tfragmentShader: WebGLShader,\n\tname: string,\n\terrorCallback: ErrorCallback,\n) {\n\t// Create a program.\n\tconst program = gl.createProgram();\n\tif (!program) {\n\t\terrorCallback(`Unable to init GL program for GPUProgram \"${name}\", gl.createProgram() has failed.`);\n\t\treturn;\n\t}\n\t// Link the program.\n\tgl.attachShader(program, vertexShader);\n\tgl.attachShader(program, fragmentShader);\n\tgl.linkProgram(program);\n\t// Check if it linked.\n\tconst success = gl.getProgramParameter(program, gl.LINK_STATUS);\n\tif (!success) {\n\t\t// Something went wrong with the link.\n\t\terrorCallback(`GPUProgram \"${name}\" failed to link: ${gl.getProgramInfoLog(program)}`);\n\t\treturn;\n\t}\n\treturn program;\n}\n\n/**\n * Returns whether a WebGL context is WebGL2.\n * This code is pulled from https://github.com/mrdoob/three.js/blob/master/src/renderers/webgl/WebGLCapabilities.js\n * @param gl - WebGL context to test.\n * @returns - true if WebGL2 context, else false.\n */\nexport function isWebGL2(gl: WebGLRenderingContext | WebGL2RenderingContext) {\n\t// @ts-ignore\n\treturn (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) || (typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext);\n}\n\n/**\n * Returns whether WebGL2 is supported by the current browser.\n * @returns - true if WebGL2 is supported, else false.\n*/\nexport function isWebGL2Supported() {\n\tif (results.supportsWebGL2 === undefined) {\n\t\tconst gl = document.createElement('canvas').getContext(WEBGL2);\n\t\t// GL context and canvas will be garbage collected.\n\t\tresults.supportsWebGL2 = isWebGL2(gl!); // Will return false in case of gl = null.\n\t}\n\treturn results.supportsWebGL2;\n}\n\n/**\n * Checks if the framebuffer is ready to read.\n * @private\n */\nexport function readyToRead(gl: WebGLRenderingContext | WebGL2RenderingContext) {\n\treturn gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE;\n};\n\n/**\n * Detects whether highp is supported by this browser.\n * This is supposed to be relatively easy. You call gl.getShaderPrecisionFormat, you pass in the shader type,\n * VERTEX_SHADER or FRAGMENT_SHADER and you pass in one of LOW_FLOAT, MEDIUM_FLOAT, HIGH_FLOAT, LOW_INT, MEDIUM_INT, HIGH_INT,\n * and it returns the precision info.\n * Unfortunately Safari has a bug here which means checking this way will fail on iPhone, at least as of April 2020.\n * https://webglfundamentals.org/webgl/webgl-precision-lowp-mediump-highp.html\n * @private\n */\nfunction isHighpSupported(vsSource: string, fsSource: string) {\n\tconst gl = document.createElement('canvas').getContext(WEBGL1);\n\tif (!gl) {\n\t\tthrow new Error(`Unable to init webgl context.`);\n\t}\n\ttry {\n\t\tconst vs = compileShader(\n\t\t\tgl,\n\t\t\tGLSL1,\n\t\t\tPRECISION_HIGH_P,\n\t\t\tPRECISION_HIGH_P,\n\t\t\tvsSource,\n\t\t\tgl.VERTEX_SHADER,\n\t\t\t'highpFragmentTest',\n\t\t\tDEFAULT_ERROR_CALLBACK,\n\t\t)!;\n\t\tconst fs = compileShader(\n\t\t\tgl,\n\t\t\tGLSL1,\n\t\t\tPRECISION_HIGH_P,\n\t\t\tPRECISION_HIGH_P,\n\t\t\tfsSource,\n\t\t\tgl.FRAGMENT_SHADER,\n\t\t\t'highpFragmentTest',\n\t\t\tDEFAULT_ERROR_CALLBACK,\n\t\t)!;\n\t\tconst program = initGLProgram(gl, vs, fs, 'highpFragmentTest', DEFAULT_ERROR_CALLBACK)!;\n\t\t// Deallocate everything.\n\t\tgl.deleteProgram(program);\n\t\tgl.deleteShader(vs);\n\t\tgl.deleteShader(fs);\n\t\t// GL context and canvas will be garbage collected.\n\t} catch {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\n/**\n * Detects whether highp precision is supported in vertex shaders in the current browser.\n * @returns - true is highp is supported in vertex shaders, else false.\n */\nexport function isHighpSupportedInVertexShader() {\n\tif (results.supportsHighpVertex === undefined) {\n\t\tconst vertexSupport = isHighpSupported(\n\t\t\t'void main() { highp float test = 0.524; gl_Position = vec4(test, test, 0, 1); }',\n\t\t\t'void main() { gl_FragColor = vec4(0); }',\n\t\t);\n\t\tresults.supportsHighpVertex = vertexSupport;\n\t}\n\treturn results.supportsHighpVertex;\n}\n\n/**\n * Detects whether highp precision is supported in fragment shaders in the current browser.\n * @returns - true is highp is supported in fragment shaders, else false.\n */\nexport function isHighpSupportedInFragmentShader() {\n\tif (results.supportsHighpFragment === undefined) {\n\t\tconst fragmentSupport = isHighpSupported(\n\t\t\t'void main() { gl_Position = vec4(0.5, 0.5, 0, 1); }',\n\t\t\t'void main() { highp float test = 1.35; gl_FragColor = vec4(test); }',\n\t\t);\n\t\tresults.supportsHighpFragment = fragmentSupport;\n\t}\n\treturn results.supportsHighpFragment;\n}\n\n/**\n * Helper function to perform a 1px math calculation in order to determine WebGL capabilities.\n * From https://webglfundamentals.org/\n * @private\n */\nfunction test1PxCalc(\n\tname: string,\n\tgl: WebGL2RenderingContext | WebGLRenderingContext,\n\tfs: WebGLShader,\n\tvs: WebGLShader,\n\taddUniforms: (program: WebGLProgram) => void,\n) {\n\tconst program = initGLProgram(gl, vs, fs, name, DEFAULT_ERROR_CALLBACK);\n\tif (!program) {\n\t\tthrow new Error(`Unable to init WebGLProgram.`);\n\t}\n\tconst positionLocation = gl.getAttribLocation(program, 'position');\n\n\t// create a buffer and setup an attribute\n\t// We wouldn't need this except for a bug in Safari.\n\t// See https://webglfundamentals.org/webgl/lessons/webgl-smallest-programs.html\n\t// and https://bugs.webkit.org/show_bug.cgi?id=197592\n\tconst buffer = gl.createBuffer();\n\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\tgl.bufferData(gl.ARRAY_BUFFER, 1, gl.STATIC_DRAW);\n\tgl.enableVertexAttribArray(positionLocation);\n\tgl.vertexAttribPointer(\n\t\tpositionLocation,\n\t\t1,                // pull 1 value per vertex shader iteration from buffer\n\t\tgl.UNSIGNED_BYTE, // type of data in buffer,\n\t\tfalse,            // don't normalize\n\t\t0,                // bytes to advance per iteration (0 = compute from size and type)\n\t\t0,                // offset into buffer\n\t);\n\n\tgl.viewport(0, 0, 1, 1);\n\tgl.useProgram(program);\n\n\taddUniforms(program);\n\t\n\tgl.drawArrays(\n\t\tgl.POINTS,\n\t\t0, // offset\n\t\t1, // number of vertices to process\n\t);\n\n\tconst pixel = new Uint8Array(4);\n\tgl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixel);\n\n\t// Deallocate everything.\n\tgl.disableVertexAttribArray(positionLocation);\n\tgl.deleteProgram(program);\n\tgl.deleteShader(vs);\n\tgl.deleteShader(fs);\n\tgl.deleteBuffer(buffer);\n\t// GL context and canvas will be garbage collected.\n\n\treturn pixel;\n}\n\n/**\n * Returns the actual precision of mediump inside vertex shader.\n * From https://webglfundamentals.org/webgl/lessons/webgl-precision-issues.html\n * @returns - Vertex shader mediump precision.\n */\nexport function getVertexShaderMediumpPrecision() {\n\tif (results.mediumpVertexPrecision === undefined) {\n\t\t// This entire program is only needed because of a bug in Safari.\n\t\t// Safari doesn't correctly report precision from getShaderPrecisionFormat\n\t\t// at least as of April 2020\n\t\t// see: https://bugs.webkit.org/show_bug.cgi?id=211013\n\n\t\t// Get A WebGL context\n\t\t/** @type {HTMLCanvasElement} */\n\t\tconst canvas = document.createElement(\"canvas\");\n\t\tconst gl = canvas.getContext(\"webgl\");\n\t\tif (!gl) {\n\t\t\tthrow new Error(`Unable to init webgl context.`);\n\t\t}\n\n\t\tconst vs = compileShader(gl, GLSL1, PRECISION_MEDIUM_P, PRECISION_MEDIUM_P, `\n\tattribute vec4 position;  // needed because of another bug in Safari\n\tuniform mediump vec3 v;\n\tvarying mediump vec4 v_result;\n\tvoid main() {\n\t\tgl_Position = position;\n\t\tgl_PointSize = 1.0;\n\t\tv_result = vec4(normalize(v) * 0.5 + 0.5, 1);\n\t}\n\t\t`, gl.VERTEX_SHADER, 'mediumpPrecisionVertexTest', DEFAULT_ERROR_CALLBACK);\n\t\tif (!vs) {\n\t\t\tthrow new Error(`Unable to init vertex shader.`);\n\t\t}\n\n\t\tconst fs = compileShader(gl, GLSL1, PRECISION_MEDIUM_P, PRECISION_MEDIUM_P, `\n\tvarying mediump vec4 v_result;\n\tvoid main() {\n\t\tgl_FragColor = v_result;\n\t}\n\t\t`, gl.FRAGMENT_SHADER, 'mediumpPrecisionVertexTest', DEFAULT_ERROR_CALLBACK);\n\t\tif (!fs) {\n\t\t\tthrow new Error(`Unable to init fragment shader.`);\n\t\t}\n\n\t\t// we're going to compute the normalize vector of\n\t\t// (sqrt(2^31-1), sqrt(2^31-1), sqrt(2^31-1))\n\t\t// which should be impossible on mediump\n\t\tconst value = 2 ** 31 - 1;\n\t\tconst input = Math.sqrt(value);\n\t\tconst expected = ((input / Math.sqrt(input * input * 3)) * 0.5 + 0.5) * 255 | 0;\n\n\t\tconst pixel = test1PxCalc(\n\t\t\t'mediumpPrecisionVertexTest',\n\t\t\tgl,\n\t\t\tfs,\n\t\t\tvs,\n\t\t\t(program: WebGLProgram) => {\n\t\t\t\tconst vLocation = gl.getUniformLocation(program, 'v');\n\t\t\t\tgl.uniform3f(vLocation, input, input, input);\n\t\t\t},\n\t\t);\n\n\t\tconst mediumpPrecision = Math.abs(pixel[0] - expected) > 16;\n\t\tresults.mediumpVertexPrecision = mediumpPrecision ? PRECISION_MEDIUM_P : PRECISION_HIGH_P;\n\t}\n\treturn results.mediumpVertexPrecision;\n}\n\n/**\n * Returns the actual precision of mediump inside fragment shader.\n * From https://webglfundamentals.org/webgl/lessons/webgl-precision-issues.html\n * @returns - Fragment shader supported mediump precision.\n */\nexport function getFragmentShaderMediumpPrecision() {\n\tif (results.mediumpFragmentPrecision === undefined) {\n\t\t// This entire program is only needed because of a bug in Safari.\n\t\t// Safari doesn't correctly report precision from getShaderPrecisionFormat\n\t\t// at least as of April 2020\n\t\t// see: https://bugs.webkit.org/show_bug.cgi?id=211013\n\n\t\t// Get A WebGL context\n\t\tconst canvas = document.createElement(\"canvas\");\n\t\tconst gl = canvas.getContext(\"webgl\");\n\t\tif (!gl) {\n\t\t\tthrow new Error(`Unable to init webgl context.`);\n\t\t}\n\n\t\tconst vs = compileShader(gl, GLSL1, PRECISION_MEDIUM_P, PRECISION_MEDIUM_P,`\n\tattribute vec4 position;  // needed because of another bug in Safari\n\tvoid main() {\n\t\tgl_Position = position;\n\t\tgl_PointSize = 1.0;\n\t}\n\t\t`, gl.VERTEX_SHADER, 'mediumpPrecisionFragmentTest', DEFAULT_ERROR_CALLBACK);\n\t\tif (!vs) {\n\t\t\tthrow new Error(`Unable to init vertex shader.`);\n\t\t}\n\n\t\tconst fs = compileShader(gl, GLSL1, PRECISION_MEDIUM_P, PRECISION_MEDIUM_P, `\n\tuniform mediump vec3 v;\n\tvoid main() {\n\t\tgl_FragColor = vec4(normalize(v) * 0.5 + 0.5, 1);\n\t}\n\t\t`, gl.FRAGMENT_SHADER, 'mediumpPrecisionFragmentTest', DEFAULT_ERROR_CALLBACK);\n\t\tif (!fs) {\n\t\t\tthrow new Error(`Unable to init fragment shader.`);\n\t\t}\n\n\t\t// we're going to compute the normalize vector of\n\t\t// (sqrt(2^31-1), sqrt(2^31-1), sqrt(2^31-1))\n\t\t// which should be impossible on mediump\n\t\tconst value = 2 ** 31 - 1;\n\t\tconst input = Math.sqrt(value);\n\t\tconst expected = ((input / Math.sqrt(input * input * 3)) * 0.5 + 0.5) * 255 | 0;\n\n\t\tconst pixel = test1PxCalc(\n\t\t\t'mediumpPrecisionFragmentTest',\n\t\t\tgl,\n\t\t\tfs,\n\t\t\tvs,\n\t\t\t(program: WebGLProgram) => {\n\t\t\t\tconst vLocation = gl.getUniformLocation(program, 'v');\n\t\t\t\tgl.uniform3f(vLocation, input, input, input);\n\t\t\t},\n\t\t);\n\n\t\tconst mediumpPrecision = Math.abs(pixel[0] - expected) > 16;\n\t\tresults.mediumpFragmentPrecision =  mediumpPrecision ? PRECISION_MEDIUM_P : PRECISION_HIGH_P;\n\t}\n\treturn results.mediumpFragmentPrecision;\n}\n\n/**\n * Returns whether a number is a power of 2.\n * @private\n */\nexport function isPowerOf2(value: number) {\n\t// Use bitwise operation to evaluate this.\n\treturn value > 0 && (value & (value - 1)) == 0;\n}\n\n/**\n * Returns a Float32 array with sequential values [0, 1, 2, 3...].\n * @private\n */\nexport function initSequentialFloatArray(length: number) {\n\tconst array = new Float32Array(length);\n\tfor (let i = 0; i < length; i++) {\n\t\tarray[i] = i;\n\t}\n\treturn array;\n}\n\n/**\n * Strip out any unnecessary elements in shader source, e.g. #version and precision declarations.\n * This is called once on initialization, so doesn't need to be extremely efficient.\n * @private\n */\nfunction preprocessShader(shaderSource: string) {\n\t// Strip out any version numbers.\n\tshaderSource = stripVersion(shaderSource);\n\t// Strip out any precision declarations.\n\tshaderSource = stripPrecision(shaderSource);\n\t// Strip out comments.\n\tshaderSource = stripComments(shaderSource);\n\treturn shaderSource;\n}\n\n/**\n * Common code for converting vertex/fragment shader source to GLSL1.\n * This is called once on initialization, so doesn't need to be extremely efficient.\n * @private\n */\nfunction convertShaderToGLSL1(shaderSource: string) {\n\t// No isampler2D or usampler2D.\n\tshaderSource = glsl1Sampler2D(shaderSource);\n\t// Unsigned int types are not supported, use int types instead.\n\tshaderSource = glsl1Uint(shaderSource);\n\t// Convert texture to texture2D.\n\tshaderSource = glsl1Texture(shaderSource);\n\treturn shaderSource;\n}\n\n/**\n * Convert vertex shader source to GLSL1.\n * This is called once on initialization, so doesn't need to be extremely efficient.\n * @private\n */\nfunction convertVertexShaderToGLSL1(shaderSource: string) {\n\tshaderSource = convertShaderToGLSL1(shaderSource);\n\t// Convert in to attribute.\n\tshaderSource = glsl1VertexIn(shaderSource);\n\t// Convert out to varying.\n\tshaderSource = glsl1VertexOut(shaderSource);\n\treturn shaderSource;\n}\n\n/**\n * Convert fragment shader source to GLSL1.\n * This is called once on initialization, so doesn't need to be extremely efficient.\n * @private\n */\nexport function convertFragmentShaderToGLSL1(shaderSource: string, name: string) {\n\tshaderSource = convertShaderToGLSL1(shaderSource);\n\t// Convert in to varying.\n\tshaderSource = glsl1FragmentIn(shaderSource);\n\t// Convert out to gl_FragColor.\n\treturn glsl1FragmentOut(shaderSource, name);\n}\n\n/**\n * Preprocess vertex shader for glslVersion and browser capabilities.\n * This is called once on initialization, so doesn't need to be extremely efficient.\n * @private\n */\nexport function preprocessVertexShader(shaderSource: string, glslVersion: GLSLVersion) {\n\tshaderSource = preprocessShader(shaderSource);\n\t// Check if highp supported in vertex shaders.\n\tif (!isHighpSupportedInVertexShader()) {\n\t\tconsole.warn('highp not supported in vertex shader in this browser, falling back to mediump.');\n\t\t// Replace all highp with mediump.\n\t\tshaderSource = highpToMediump(shaderSource);\n\t}\n\tif (glslVersion === GLSL3) {\n\t\treturn shaderSource;\n\t}\n\treturn convertVertexShaderToGLSL1(shaderSource);\n}\n\n\n\n/**\n * Preprocess fragment shader for glslVersion and browser capabilities.\n * This is called once on initialization of GPUProgram, so doesn't need to be extremely efficient.\n * @private\n */\nexport function preprocessFragmentShader(shaderSource: string, glslVersion: GLSLVersion, name: string) {\n\tshaderSource = preprocessShader(shaderSource);\n\tcheckFragmentShaderForFragColor(shaderSource, glslVersion, name);\n\t// Check if highp supported in fragment shaders.\n\tif (!isHighpSupportedInFragmentShader()) {\n\t\tconsole.warn('highp not supported in fragment shader in this browser, falling back to mediump.');\n\t\t// Replace all highp with mediump.\n\t\tshaderSource = highpToMediump(shaderSource);\n\t}\n\t// Add function/operator polyfills.\n\tshaderSource = fragmentShaderPolyfills() + shaderSource;\n\t// Add texture() polyfills.\n\tlet samplerUniforms: string[];\n\t({ shaderSource, samplerUniforms } = texturePolyfill(shaderSource));\n\tif (glslVersion !== GLSL3) {\n\t\tconst sources = convertFragmentShaderToGLSL1(shaderSource, name);\n\t\t// If this shader has multiple outputs, it is split into multiple sources.\n\t\tfor (let i = 0, numSources = sources.length; i < numSources; i++) {\n\t\t\t// Add glsl1 specific polyfills.\n\t\t\tsources[i] = GLSL1Polyfills() + sources[i];\n\t\t}\n\t\tshaderSource = sources.shift()!;\n\t\tif (sources.length) {\n\t\t\treturn { shaderSource, samplerUniforms, additionalSources: sources };\n\t\t}\n\t}\n\treturn { shaderSource, samplerUniforms };\n}\n\n/**\n * Check uniforms and return internal WebGL type (e.g. [1234][u]?[if])\n * @private\n */\nexport function uniformInternalTypeForValue(\n\tvalue: UniformValue,\n\ttype: UniformType,\n\tuniformName: string,\n\tprogramName: string,\n) {\n\tif (type === FLOAT) {\n\t\t// Check that we are dealing with a number.\n\t\tif (isArray(value)) {\n\t\t\tfor (let i = 0; i < (value as number[]).length; i++) {\n\t\t\t\tif (!isFiniteNumber((value as number[])[i])) {\n\t\t\t\t\tthrow new Error(`Invalid value ${JSON.stringify(value)} for uniform \"${uniformName}\" in program \"${programName}\", expected float or float[] of length 1-4.`);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (!isFiniteNumber(value)) {\n\t\t\t\tthrow new Error(`Invalid value ${JSON.stringify(value)} for uniform \"${uniformName}\" in program \"${programName}\", expected float or float[] of length 1-4.`);\n\t\t\t}\n\t\t}\n\t\tif (!isArray(value) || (value as number[]).length === 1) {\n\t\t\treturn FLOAT_1D_UNIFORM;\n\t\t}\n\t\tif ((value as number[]).length === 2) {\n\t\t\treturn FLOAT_2D_UNIFORM;\n\t\t}\n\t\tif ((value as number[]).length === 3) {\n\t\t\treturn FLOAT_3D_UNIFORM;\n\t\t}\n\t\tif ((value as number[]).length === 4) {\n\t\t\treturn FLOAT_4D_UNIFORM;\n\t\t}\n\t\tthrow new Error(`Invalid value ${JSON.stringify(value)} for uniform \"${uniformName}\" in program \"${programName}\", expected float or float[] of length 1-4.`);\n\t} else if (type === INT) {\n\t\t// Check that we are dealing with an int.\n\t\tif (isArray(value)) {\n\t\t\tfor (let i = 0; i < (value as number[]).length; i++) {\n\t\t\t\tif (!isInteger((value as number[])[i])) {\n\t\t\t\t\tthrow new Error(`Invalid value ${JSON.stringify(value)} for uniform \"${uniformName}\" in program \"${programName}\", expected int or int[] of length 1-4.`);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (!isInteger(value)) {\n\t\t\t\tthrow new Error(`Invalid value ${JSON.stringify(value)} for uniform \"${uniformName}\" in program \"${programName}\", expected int or int[] of length 1-4.`);\n\t\t\t}\n\t\t}\n\t\tif (!isArray(value) || (value as number[]).length === 1) {\n\t\t\treturn INT_1D_UNIFORM;\n\t\t}\n\t\tif ((value as number[]).length === 2) {\n\t\t\treturn INT_2D_UNIFORM;\n\t\t}\n\t\tif ((value as number[]).length === 3) {\n\t\t\treturn INT_3D_UNIFORM;\n\t\t}\n\t\tif ((value as number[]).length === 4) {\n\t\t\treturn INT_4D_UNIFORM;\n\t\t}\n\t\tthrow new Error(`Invalid value ${JSON.stringify(value)} for uniform \"${uniformName}\" in program \"${programName}\", expected int or int[] of length 1-4.`);\n\t} else if (type === UINT) {\n\t\t// Check that we are dealing with a uint.\n\t\tif (isArray(value)) {\n\t\t\tfor (let i = 0; i < (value as number[]).length; i++) {\n\t\t\t\tif (!isNonNegativeInteger((value as number[])[i])) {\n\t\t\t\t\tthrow new Error(`Invalid value ${JSON.stringify(value)} for uniform \"${uniformName}\" in program \"${programName}\", expected uint or uint[] of length 1-4.`);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (!isNonNegativeInteger(value)) {\n\t\t\t\tthrow new Error(`Invalid value ${JSON.stringify(value)} for uniform \"${uniformName}\" in program \"${programName}\", expected uint or uint[] of length 1-4.`);\n\t\t\t}\n\t\t}\n\t\tif (!isArray(value) || (value as number[]).length === 1) {\n\t\t\treturn UINT_1D_UNIFORM;\n\t\t}\n\t\tif ((value as number[]).length === 2) {\n\t\t\treturn UINT_2D_UNIFORM;\n\t\t}\n\t\tif ((value as number[]).length === 3) {\n\t\t\treturn UINT_3D_UNIFORM;\n\t\t}\n\t\tif ((value as number[]).length === 4) {\n\t\t\treturn UINT_4D_UNIFORM;\n\t\t}\n\t\tthrow new Error(`Invalid value ${JSON.stringify(value)} for uniform \"${uniformName}\" in program \"${programName}\", expected uint or uint[] of length 1-4.`);\n\t} else if (type === BOOL) {\n\t\t// Check that we are dealing with a boolean.\n\t\tif (isArray(value)) {\n\t\t\tfor (let i = 0; i < (value as boolean[]).length; i++) {\n\t\t\t\tif (!isBoolean((value as boolean[])[i])) {\n\t\t\t\t\tthrow new Error(`Invalid value ${JSON.stringify(value)} for uniform \"${uniformName}\" in program \"${programName}\", expected bool or bool[] of length 1-4.`);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (!isBoolean(value)) {\n\t\t\t\tthrow new Error(`Invalid value ${JSON.stringify(value)} for uniform \"${uniformName}\" in program \"${programName}\", expected bool or bool[] of length 1-4.`);\n\t\t\t}\n\t\t}\n\t\tif (!isArray(value) || (value as number[]).length === 1) {\n\t\t\treturn BOOL_1D_UNIFORM;\n\t\t}\n\t\tif ((value as number[]).length === 2) {\n\t\t\treturn BOOL_2D_UNIFORM;\n\t\t}\n\t\tif ((value as number[]).length === 3) {\n\t\t\treturn BOOL_3D_UNIFORM;\n\t\t}\n\t\tif ((value as number[]).length === 4) {\n\t\t\treturn BOOL_4D_UNIFORM;\n\t\t}\n\t\tthrow new Error(`Invalid value ${JSON.stringify(value)} for uniform \"${uniformName}\" in program \"${programName}\", expected boolean.`);\n\t} else {\n\t\tthrow new Error(`Invalid type \"${type}\" for uniform \"${uniformName}\" in program \"${programName}\", expected ${FLOAT} or ${INT} or ${BOOL}.`);\n\t}\n}\n\n/**\n * Get index of GPULayer in array of inputs.\n * Used by GPUComposer.\n * @private\n */\nexport function indexOfLayerInArray(layer: GPULayer, array: (GPULayer | GPULayerState)[]) {\n\treturn array.findIndex(item => item === layer || (item as GPULayerState).layer === layer);\n}\n\nfunction clientWaitAsync(\n\tgl: WebGL2RenderingContext,\n\tsync: WebGLSync,\n\tflags: number,\n\tinterval_ms: number,\n) {\n\treturn new Promise<void>((resolve, reject) => {\n\t  function test() {\n\t\tconst res = gl.clientWaitSync(sync, flags, 0);\n\t\tif (res === gl.WAIT_FAILED) {\n\t\t  reject();\n\t\t  return;\n\t\t}\n\t\tif (res === gl.TIMEOUT_EXPIRED) {\n\t\t  setTimeout(test, interval_ms);\n\t\t  return;\n\t\t}\n\t\tresolve();\n\t  }\n\t  test();\n\t});\n  }\n  \n async function getBufferSubDataAsync(\n\tgl: WebGL2RenderingContext,\n\ttarget: number,\n\tbuffer: WebGLBuffer,\n\tsrcByteOffset: number,\n\tdstBuffer: ArrayBufferView,\n) {\n\tconst sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0)!;\n\tgl.flush();\n  \n\tawait clientWaitAsync(gl, sync, 0, 10);\n\tgl.deleteSync(sync);\n  \n\tgl.bindBuffer(target, buffer);\n\tgl.getBufferSubData(target, srcByteOffset, dstBuffer);\n\tgl.bindBuffer(target, null);\n}\n\n/**\n * Non-blocking version of gl.readPixels for WebGL2 only.\n * https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#use_non-blocking_async_data_readback\n * @param gl - WebGL2 Rendering Context\n * @param x - The first horizontal pixel that is read from the lower left corner of a rectangular block of pixels.\n * @param y - The first vertical pixel that is read from the lower left corner of a rectangular block of pixels.\n * @param w - The width of the rectangle.\n * @param h - The height of the rectangle.\n * @param format - The GLenum format of the pixel data.\n * @param type - The GLenum data type of the pixel data.\n * @param dstBuffer - An object to read data into. The array type must match the type of the type parameter.\n * @returns \n */\nexport async function readPixelsAsync(\n\tgl: WebGL2RenderingContext,\n\tx: number, y: number,\n\tw: number, h: number,\n\tformat: number,\n\ttype: number,\n\tdstBuffer: ArrayBufferView,\n) {\n\tconst buf = gl.createBuffer()!;\n\tgl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf);\n\tgl.bufferData(gl.PIXEL_PACK_BUFFER, dstBuffer.byteLength, gl.STREAM_READ);\n\tgl.readPixels(x, y, w, h, format, type, 0);\n\tgl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\n  \n\tawait getBufferSubDataAsync(gl, gl.PIXEL_PACK_BUFFER, buf, 0, dstBuffer);\n  \n\tgl.deleteBuffer(buf);\n\treturn dstBuffer;\n  }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFloat16 = getFloat16;\nexports.setFloat16 = setFloat16;\n\nvar _arrayIterator = require(\"./_util/arrayIterator.cjs\");\n\nvar _converter = require(\"./_util/converter.cjs\");\n\nvar _primordials = require(\"./_util/primordials.cjs\");\n\nfunction getFloat16(dataView, byteOffset, ...opts) {\n  return (0, _converter.convertToNumber)((0, _primordials.DataViewPrototypeGetUint16)(dataView, byteOffset, ...(0, _arrayIterator.safeIfNeeded)(opts)));\n}\n\nfunction setFloat16(dataView, byteOffset, value, ...opts) {\n  return (0, _primordials.DataViewPrototypeSetUint16)(dataView, byteOffset, (0, _converter.roundToFloat16Bits)(value), ...(0, _arrayIterator.safeIfNeeded)(opts));\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isFloat16Array = isFloat16Array;\n\nvar _arrayIterator = require(\"./_util/arrayIterator.cjs\");\n\nvar _brand = require(\"./_util/brand.cjs\");\n\nvar _converter = require(\"./_util/converter.cjs\");\n\nvar _is = require(\"./_util/is.cjs\");\n\nvar _messages = require(\"./_util/messages.cjs\");\n\nvar _primordials = require(\"./_util/primordials.cjs\");\n\nvar _spec = require(\"./_util/spec.cjs\");\n\nconst BYTES_PER_ELEMENT = 2;\nconst float16bitsArrays = new _primordials.NativeWeakMap();\n\nfunction isFloat16Array(target) {\n  return (0, _primordials.WeakMapPrototypeHas)(float16bitsArrays, target) || !(0, _primordials.ArrayBufferIsView)(target) && (0, _brand.hasFloat16ArrayBrand)(target);\n}\n\nfunction assertFloat16Array(target) {\n  if (!isFloat16Array(target)) {\n    throw (0, _primordials.NativeTypeError)(_messages.THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT);\n  }\n}\n\nfunction assertSpeciesTypedArray(target, count) {\n  const isTargetFloat16Array = isFloat16Array(target);\n  const isTargetTypedArray = (0, _is.isNativeTypedArray)(target);\n\n  if (!isTargetFloat16Array && !isTargetTypedArray) {\n    throw (0, _primordials.NativeTypeError)(_messages.SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT);\n  }\n\n  if (typeof count === \"number\") {\n    let length;\n\n    if (isTargetFloat16Array) {\n      const float16bitsArray = getFloat16BitsArray(target);\n      length = (0, _primordials.TypedArrayPrototypeGetLength)(float16bitsArray);\n    } else {\n      length = (0, _primordials.TypedArrayPrototypeGetLength)(target);\n    }\n\n    if (length < count) {\n      throw (0, _primordials.NativeTypeError)(_messages.DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH);\n    }\n  }\n\n  if ((0, _is.isNativeBigIntTypedArray)(target)) {\n    throw (0, _primordials.NativeTypeError)(_messages.CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n  }\n}\n\nfunction getFloat16BitsArray(float16) {\n  const float16bitsArray = (0, _primordials.WeakMapPrototypeGet)(float16bitsArrays, float16);\n\n  if (float16bitsArray !== undefined) {\n    const buffer = (0, _primordials.TypedArrayPrototypeGetBuffer)(float16bitsArray);\n\n    if ((0, _spec.IsDetachedBuffer)(buffer)) {\n      throw (0, _primordials.NativeTypeError)(_messages.ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n    }\n\n    return float16bitsArray;\n  }\n\n  const buffer = float16.buffer;\n\n  if ((0, _spec.IsDetachedBuffer)(buffer)) {\n    throw (0, _primordials.NativeTypeError)(_messages.ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n  }\n\n  const cloned = (0, _primordials.ReflectConstruct)(Float16Array, [buffer, float16.byteOffset, float16.length], float16.constructor);\n  return (0, _primordials.WeakMapPrototypeGet)(float16bitsArrays, cloned);\n}\n\nfunction copyToArray(float16bitsArray) {\n  const length = (0, _primordials.TypedArrayPrototypeGetLength)(float16bitsArray);\n  const array = [];\n\n  for (let i = 0; i < length; ++i) {\n    array[i] = (0, _converter.convertToNumber)(float16bitsArray[i]);\n  }\n\n  return array;\n}\n\nconst TypedArrayPrototypeGetters = new _primordials.NativeWeakSet();\n\nfor (const key of (0, _primordials.ReflectOwnKeys)(_primordials.TypedArrayPrototype)) {\n  if (key === _primordials.SymbolToStringTag) {\n    continue;\n  }\n\n  const descriptor = (0, _primordials.ReflectGetOwnPropertyDescriptor)(_primordials.TypedArrayPrototype, key);\n\n  if ((0, _primordials.ObjectHasOwn)(descriptor, \"get\") && typeof descriptor.get === \"function\") {\n    (0, _primordials.WeakSetPrototypeAdd)(TypedArrayPrototypeGetters, descriptor.get);\n  }\n}\n\nconst handler = (0, _primordials.ObjectFreeze)({\n  get(target, key, receiver) {\n    if ((0, _is.isCanonicalIntegerIndexString)(key) && (0, _primordials.ObjectHasOwn)(target, key)) {\n      return (0, _converter.convertToNumber)((0, _primordials.ReflectGet)(target, key));\n    }\n\n    if ((0, _primordials.WeakSetPrototypeHas)(TypedArrayPrototypeGetters, (0, _primordials.ObjectPrototype__lookupGetter__)(target, key))) {\n      return (0, _primordials.ReflectGet)(target, key);\n    }\n\n    return (0, _primordials.ReflectGet)(target, key, receiver);\n  },\n\n  set(target, key, value, receiver) {\n    if ((0, _is.isCanonicalIntegerIndexString)(key) && (0, _primordials.ObjectHasOwn)(target, key)) {\n      return (0, _primordials.ReflectSet)(target, key, (0, _converter.roundToFloat16Bits)(value));\n    }\n\n    return (0, _primordials.ReflectSet)(target, key, value, receiver);\n  },\n\n  getOwnPropertyDescriptor(target, key) {\n    if ((0, _is.isCanonicalIntegerIndexString)(key) && (0, _primordials.ObjectHasOwn)(target, key)) {\n      const descriptor = (0, _primordials.ReflectGetOwnPropertyDescriptor)(target, key);\n      descriptor.value = (0, _converter.convertToNumber)(descriptor.value);\n      return descriptor;\n    }\n\n    return (0, _primordials.ReflectGetOwnPropertyDescriptor)(target, key);\n  },\n\n  defineProperty(target, key, descriptor) {\n    if ((0, _is.isCanonicalIntegerIndexString)(key) && (0, _primordials.ObjectHasOwn)(target, key) && (0, _primordials.ObjectHasOwn)(descriptor, \"value\")) {\n      descriptor.value = (0, _converter.roundToFloat16Bits)(descriptor.value);\n      return (0, _primordials.ReflectDefineProperty)(target, key, descriptor);\n    }\n\n    return (0, _primordials.ReflectDefineProperty)(target, key, descriptor);\n  }\n\n});\n\nclass Float16Array {\n  constructor(input, _byteOffset, _length) {\n    let float16bitsArray;\n\n    if (isFloat16Array(input)) {\n      float16bitsArray = (0, _primordials.ReflectConstruct)(_primordials.NativeUint16Array, [getFloat16BitsArray(input)], new.target);\n    } else if ((0, _is.isObject)(input) && !(0, _is.isArrayBuffer)(input)) {\n      let list;\n      let length;\n\n      if ((0, _is.isNativeTypedArray)(input)) {\n        list = input;\n        length = (0, _primordials.TypedArrayPrototypeGetLength)(input);\n        const buffer = (0, _primordials.TypedArrayPrototypeGetBuffer)(input);\n        const BufferConstructor = !(0, _is.isSharedArrayBuffer)(buffer) ? (0, _spec.SpeciesConstructor)(buffer, _primordials.NativeArrayBuffer) : _primordials.NativeArrayBuffer;\n\n        if ((0, _spec.IsDetachedBuffer)(buffer)) {\n          throw (0, _primordials.NativeTypeError)(_messages.ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n        }\n\n        if ((0, _is.isNativeBigIntTypedArray)(input)) {\n          throw (0, _primordials.NativeTypeError)(_messages.CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n        }\n\n        const data = new BufferConstructor(length * BYTES_PER_ELEMENT);\n        float16bitsArray = (0, _primordials.ReflectConstruct)(_primordials.NativeUint16Array, [data], new.target);\n      } else {\n        const iterator = input[_primordials.SymbolIterator];\n\n        if (iterator != null && typeof iterator !== \"function\") {\n          throw (0, _primordials.NativeTypeError)(_messages.ITERATOR_PROPERTY_IS_NOT_CALLABLE);\n        }\n\n        if (iterator != null) {\n          if ((0, _is.isOrdinaryArray)(input)) {\n            list = input;\n            length = input.length;\n          } else {\n            list = [...input];\n            length = list.length;\n          }\n        } else {\n          list = input;\n          length = (0, _spec.ToLength)(list.length);\n        }\n\n        float16bitsArray = (0, _primordials.ReflectConstruct)(_primordials.NativeUint16Array, [length], new.target);\n      }\n\n      for (let i = 0; i < length; ++i) {\n        float16bitsArray[i] = (0, _converter.roundToFloat16Bits)(list[i]);\n      }\n    } else {\n      float16bitsArray = (0, _primordials.ReflectConstruct)(_primordials.NativeUint16Array, arguments, new.target);\n    }\n\n    const proxy = new _primordials.NativeProxy(float16bitsArray, handler);\n    (0, _primordials.WeakMapPrototypeSet)(float16bitsArrays, proxy, float16bitsArray);\n    return proxy;\n  }\n\n  static from(src, ...opts) {\n    const Constructor = this;\n\n    if (!(0, _primordials.ReflectHas)(Constructor, _brand.brand)) {\n      throw (0, _primordials.NativeTypeError)(_messages.THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY);\n    }\n\n    if (Constructor === Float16Array) {\n      if (isFloat16Array(src) && opts.length === 0) {\n        const float16bitsArray = getFloat16BitsArray(src);\n        const uint16 = new _primordials.NativeUint16Array((0, _primordials.TypedArrayPrototypeGetBuffer)(float16bitsArray), (0, _primordials.TypedArrayPrototypeGetByteOffset)(float16bitsArray), (0, _primordials.TypedArrayPrototypeGetLength)(float16bitsArray));\n        return new Float16Array((0, _primordials.TypedArrayPrototypeGetBuffer)((0, _primordials.TypedArrayPrototypeSlice)(uint16)));\n      }\n\n      if (opts.length === 0) {\n        return new Float16Array((0, _primordials.TypedArrayPrototypeGetBuffer)((0, _primordials.Uint16ArrayFrom)(src, _converter.roundToFloat16Bits)));\n      }\n\n      const mapFunc = opts[0];\n      const thisArg = opts[1];\n      return new Float16Array((0, _primordials.TypedArrayPrototypeGetBuffer)((0, _primordials.Uint16ArrayFrom)(src, function (val, ...args) {\n        return (0, _converter.roundToFloat16Bits)((0, _primordials.ReflectApply)(mapFunc, this, [val, ...(0, _arrayIterator.safeIfNeeded)(args)]));\n      }, thisArg)));\n    }\n\n    let list;\n    let length;\n    const iterator = src[_primordials.SymbolIterator];\n\n    if (iterator != null && typeof iterator !== \"function\") {\n      throw (0, _primordials.NativeTypeError)(_messages.ITERATOR_PROPERTY_IS_NOT_CALLABLE);\n    }\n\n    if (iterator != null) {\n      if ((0, _is.isOrdinaryArray)(src)) {\n        list = src;\n        length = src.length;\n      } else if ((0, _is.isOrdinaryNativeTypedArray)(src)) {\n        list = src;\n        length = (0, _primordials.TypedArrayPrototypeGetLength)(src);\n      } else {\n        list = [...src];\n        length = list.length;\n      }\n    } else {\n      if (src == null) {\n        throw (0, _primordials.NativeTypeError)(_messages.CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT);\n      }\n\n      list = (0, _primordials.NativeObject)(src);\n      length = (0, _spec.ToLength)(list.length);\n    }\n\n    const array = new Constructor(length);\n\n    if (opts.length === 0) {\n      for (let i = 0; i < length; ++i) {\n        array[i] = list[i];\n      }\n    } else {\n      const mapFunc = opts[0];\n      const thisArg = opts[1];\n\n      for (let i = 0; i < length; ++i) {\n        array[i] = (0, _primordials.ReflectApply)(mapFunc, thisArg, [list[i], i]);\n      }\n    }\n\n    return array;\n  }\n\n  static of(...items) {\n    const Constructor = this;\n\n    if (!(0, _primordials.ReflectHas)(Constructor, _brand.brand)) {\n      throw (0, _primordials.NativeTypeError)(_messages.THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY);\n    }\n\n    const length = items.length;\n\n    if (Constructor === Float16Array) {\n      const proxy = new Float16Array(length);\n      const float16bitsArray = getFloat16BitsArray(proxy);\n\n      for (let i = 0; i < length; ++i) {\n        float16bitsArray[i] = (0, _converter.roundToFloat16Bits)(items[i]);\n      }\n\n      return proxy;\n    }\n\n    const array = new Constructor(length);\n\n    for (let i = 0; i < length; ++i) {\n      array[i] = items[i];\n    }\n\n    return array;\n  }\n\n  keys() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    return (0, _primordials.TypedArrayPrototypeKeys)(float16bitsArray);\n  }\n\n  values() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    return (0, _arrayIterator.wrap)(function* () {\n      for (const val of (0, _primordials.TypedArrayPrototypeValues)(float16bitsArray)) {\n        yield (0, _converter.convertToNumber)(val);\n      }\n    }());\n  }\n\n  entries() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    return (0, _arrayIterator.wrap)(function* () {\n      for (const [i, val] of (0, _primordials.TypedArrayPrototypeEntries)(float16bitsArray)) {\n        yield [i, (0, _converter.convertToNumber)(val)];\n      }\n    }());\n  }\n\n  at(index) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = (0, _primordials.TypedArrayPrototypeGetLength)(float16bitsArray);\n    const relativeIndex = (0, _spec.ToIntegerOrInfinity)(index);\n    const k = relativeIndex >= 0 ? relativeIndex : length + relativeIndex;\n\n    if (k < 0 || k >= length) {\n      return;\n    }\n\n    return (0, _converter.convertToNumber)(float16bitsArray[k]);\n  }\n\n  map(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = (0, _primordials.TypedArrayPrototypeGetLength)(float16bitsArray);\n    const thisArg = opts[0];\n    const Constructor = (0, _spec.SpeciesConstructor)(float16bitsArray, Float16Array);\n\n    if (Constructor === Float16Array) {\n      const proxy = new Float16Array(length);\n      const array = getFloat16BitsArray(proxy);\n\n      for (let i = 0; i < length; ++i) {\n        const val = (0, _converter.convertToNumber)(float16bitsArray[i]);\n        array[i] = (0, _converter.roundToFloat16Bits)((0, _primordials.ReflectApply)(callback, thisArg, [val, i, this]));\n      }\n\n      return proxy;\n    }\n\n    const array = new Constructor(length);\n    assertSpeciesTypedArray(array, length);\n\n    for (let i = 0; i < length; ++i) {\n      const val = (0, _converter.convertToNumber)(float16bitsArray[i]);\n      array[i] = (0, _primordials.ReflectApply)(callback, thisArg, [val, i, this]);\n    }\n\n    return array;\n  }\n\n  filter(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = (0, _primordials.TypedArrayPrototypeGetLength)(float16bitsArray);\n    const thisArg = opts[0];\n    const kept = [];\n\n    for (let i = 0; i < length; ++i) {\n      const val = (0, _converter.convertToNumber)(float16bitsArray[i]);\n\n      if ((0, _primordials.ReflectApply)(callback, thisArg, [val, i, this])) {\n        (0, _primordials.ArrayPrototypePush)(kept, val);\n      }\n    }\n\n    const Constructor = (0, _spec.SpeciesConstructor)(float16bitsArray, Float16Array);\n    const array = new Constructor(kept);\n    assertSpeciesTypedArray(array);\n    return array;\n  }\n\n  reduce(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = (0, _primordials.TypedArrayPrototypeGetLength)(float16bitsArray);\n\n    if (length === 0 && opts.length === 0) {\n      throw (0, _primordials.NativeTypeError)(_messages.REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);\n    }\n\n    let accumulator, start;\n\n    if (opts.length === 0) {\n      accumulator = (0, _converter.convertToNumber)(float16bitsArray[0]);\n      start = 1;\n    } else {\n      accumulator = opts[0];\n      start = 0;\n    }\n\n    for (let i = start; i < length; ++i) {\n      accumulator = callback(accumulator, (0, _converter.convertToNumber)(float16bitsArray[i]), i, this);\n    }\n\n    return accumulator;\n  }\n\n  reduceRight(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = (0, _primordials.TypedArrayPrototypeGetLength)(float16bitsArray);\n\n    if (length === 0 && opts.length === 0) {\n      throw (0, _primordials.NativeTypeError)(_messages.REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);\n    }\n\n    let accumulator, start;\n\n    if (opts.length === 0) {\n      accumulator = (0, _converter.convertToNumber)(float16bitsArray[length - 1]);\n      start = length - 2;\n    } else {\n      accumulator = opts[0];\n      start = length - 1;\n    }\n\n    for (let i = start; i >= 0; --i) {\n      accumulator = callback(accumulator, (0, _converter.convertToNumber)(float16bitsArray[i]), i, this);\n    }\n\n    return accumulator;\n  }\n\n  forEach(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = (0, _primordials.TypedArrayPrototypeGetLength)(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      (0, _primordials.ReflectApply)(callback, thisArg, [(0, _converter.convertToNumber)(float16bitsArray[i]), i, this]);\n    }\n  }\n\n  find(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = (0, _primordials.TypedArrayPrototypeGetLength)(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      const value = (0, _converter.convertToNumber)(float16bitsArray[i]);\n\n      if ((0, _primordials.ReflectApply)(callback, thisArg, [value, i, this])) {\n        return value;\n      }\n    }\n  }\n\n  findIndex(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = (0, _primordials.TypedArrayPrototypeGetLength)(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      const value = (0, _converter.convertToNumber)(float16bitsArray[i]);\n\n      if ((0, _primordials.ReflectApply)(callback, thisArg, [value, i, this])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  findLast(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = (0, _primordials.TypedArrayPrototypeGetLength)(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = length - 1; i >= 0; --i) {\n      const value = (0, _converter.convertToNumber)(float16bitsArray[i]);\n\n      if ((0, _primordials.ReflectApply)(callback, thisArg, [value, i, this])) {\n        return value;\n      }\n    }\n  }\n\n  findLastIndex(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = (0, _primordials.TypedArrayPrototypeGetLength)(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = length - 1; i >= 0; --i) {\n      const value = (0, _converter.convertToNumber)(float16bitsArray[i]);\n\n      if ((0, _primordials.ReflectApply)(callback, thisArg, [value, i, this])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  every(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = (0, _primordials.TypedArrayPrototypeGetLength)(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      if (!(0, _primordials.ReflectApply)(callback, thisArg, [(0, _converter.convertToNumber)(float16bitsArray[i]), i, this])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  some(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = (0, _primordials.TypedArrayPrototypeGetLength)(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      if ((0, _primordials.ReflectApply)(callback, thisArg, [(0, _converter.convertToNumber)(float16bitsArray[i]), i, this])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  set(input, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const targetOffset = (0, _spec.ToIntegerOrInfinity)(opts[0]);\n\n    if (targetOffset < 0) {\n      throw (0, _primordials.NativeRangeError)(_messages.OFFSET_IS_OUT_OF_BOUNDS);\n    }\n\n    if (input == null) {\n      throw (0, _primordials.NativeTypeError)(_messages.CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT);\n    }\n\n    if ((0, _is.isNativeBigIntTypedArray)(input)) {\n      throw (0, _primordials.NativeTypeError)(_messages.CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n    }\n\n    if (isFloat16Array(input)) {\n      return (0, _primordials.TypedArrayPrototypeSet)(getFloat16BitsArray(this), getFloat16BitsArray(input), targetOffset);\n    }\n\n    if ((0, _is.isNativeTypedArray)(input)) {\n      const buffer = (0, _primordials.TypedArrayPrototypeGetBuffer)(input);\n\n      if ((0, _spec.IsDetachedBuffer)(buffer)) {\n        throw (0, _primordials.NativeTypeError)(_messages.ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n      }\n    }\n\n    const targetLength = (0, _primordials.TypedArrayPrototypeGetLength)(float16bitsArray);\n    const src = (0, _primordials.NativeObject)(input);\n    const srcLength = (0, _spec.ToLength)(src.length);\n\n    if (targetOffset === Infinity || srcLength + targetOffset > targetLength) {\n      throw (0, _primordials.NativeRangeError)(_messages.OFFSET_IS_OUT_OF_BOUNDS);\n    }\n\n    for (let i = 0; i < srcLength; ++i) {\n      float16bitsArray[i + targetOffset] = (0, _converter.roundToFloat16Bits)(src[i]);\n    }\n  }\n\n  reverse() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    (0, _primordials.TypedArrayPrototypeReverse)(float16bitsArray);\n    return this;\n  }\n\n  fill(value, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    (0, _primordials.TypedArrayPrototypeFill)(float16bitsArray, (0, _converter.roundToFloat16Bits)(value), ...(0, _arrayIterator.safeIfNeeded)(opts));\n    return this;\n  }\n\n  copyWithin(target, start, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    (0, _primordials.TypedArrayPrototypeCopyWithin)(float16bitsArray, target, start, ...(0, _arrayIterator.safeIfNeeded)(opts));\n    return this;\n  }\n\n  sort(compareFn) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const sortCompare = compareFn !== undefined ? compareFn : _spec.defaultCompare;\n    (0, _primordials.TypedArrayPrototypeSort)(float16bitsArray, (x, y) => {\n      return sortCompare((0, _converter.convertToNumber)(x), (0, _converter.convertToNumber)(y));\n    });\n    return this;\n  }\n\n  slice(start, end) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const Constructor = (0, _spec.SpeciesConstructor)(float16bitsArray, Float16Array);\n\n    if (Constructor === Float16Array) {\n      const uint16 = new _primordials.NativeUint16Array((0, _primordials.TypedArrayPrototypeGetBuffer)(float16bitsArray), (0, _primordials.TypedArrayPrototypeGetByteOffset)(float16bitsArray), (0, _primordials.TypedArrayPrototypeGetLength)(float16bitsArray));\n      return new Float16Array((0, _primordials.TypedArrayPrototypeGetBuffer)((0, _primordials.TypedArrayPrototypeSlice)(uint16, start, end)));\n    }\n\n    const length = (0, _primordials.TypedArrayPrototypeGetLength)(float16bitsArray);\n    const relativeStart = (0, _spec.ToIntegerOrInfinity)(start);\n    const relativeEnd = end === undefined ? length : (0, _spec.ToIntegerOrInfinity)(end);\n    let k;\n\n    if (relativeStart === -Infinity) {\n      k = 0;\n    } else if (relativeStart < 0) {\n      k = length + relativeStart > 0 ? length + relativeStart : 0;\n    } else {\n      k = length < relativeStart ? length : relativeStart;\n    }\n\n    let final;\n\n    if (relativeEnd === -Infinity) {\n      final = 0;\n    } else if (relativeEnd < 0) {\n      final = length + relativeEnd > 0 ? length + relativeEnd : 0;\n    } else {\n      final = length < relativeEnd ? length : relativeEnd;\n    }\n\n    const count = final - k > 0 ? final - k : 0;\n    const array = new Constructor(count);\n    assertSpeciesTypedArray(array, count);\n\n    if (count === 0) {\n      return array;\n    }\n\n    const buffer = (0, _primordials.TypedArrayPrototypeGetBuffer)(float16bitsArray);\n\n    if ((0, _spec.IsDetachedBuffer)(buffer)) {\n      throw (0, _primordials.NativeTypeError)(_messages.ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n    }\n\n    let n = 0;\n\n    while (k < final) {\n      array[n] = (0, _converter.convertToNumber)(float16bitsArray[k]);\n      ++k;\n      ++n;\n    }\n\n    return array;\n  }\n\n  subarray(begin, end) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const Constructor = (0, _spec.SpeciesConstructor)(float16bitsArray, Float16Array);\n    const uint16 = new _primordials.NativeUint16Array((0, _primordials.TypedArrayPrototypeGetBuffer)(float16bitsArray), (0, _primordials.TypedArrayPrototypeGetByteOffset)(float16bitsArray), (0, _primordials.TypedArrayPrototypeGetLength)(float16bitsArray));\n    const uint16Subarray = (0, _primordials.TypedArrayPrototypeSubarray)(uint16, begin, end);\n    const array = new Constructor((0, _primordials.TypedArrayPrototypeGetBuffer)(uint16Subarray), (0, _primordials.TypedArrayPrototypeGetByteOffset)(uint16Subarray), (0, _primordials.TypedArrayPrototypeGetLength)(uint16Subarray));\n    assertSpeciesTypedArray(array);\n    return array;\n  }\n\n  indexOf(element, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = (0, _primordials.TypedArrayPrototypeGetLength)(float16bitsArray);\n    let from = (0, _spec.ToIntegerOrInfinity)(opts[0]);\n\n    if (from === Infinity) {\n      return -1;\n    }\n\n    if (from < 0) {\n      from += length;\n\n      if (from < 0) {\n        from = 0;\n      }\n    }\n\n    for (let i = from; i < length; ++i) {\n      if ((0, _primordials.ObjectHasOwn)(float16bitsArray, i) && (0, _converter.convertToNumber)(float16bitsArray[i]) === element) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  lastIndexOf(element, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = (0, _primordials.TypedArrayPrototypeGetLength)(float16bitsArray);\n    let from = opts.length >= 1 ? (0, _spec.ToIntegerOrInfinity)(opts[0]) : length - 1;\n\n    if (from === -Infinity) {\n      return -1;\n    }\n\n    if (from >= 0) {\n      from = from < length - 1 ? from : length - 1;\n    } else {\n      from += length;\n    }\n\n    for (let i = from; i >= 0; --i) {\n      if ((0, _primordials.ObjectHasOwn)(float16bitsArray, i) && (0, _converter.convertToNumber)(float16bitsArray[i]) === element) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  includes(element, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = (0, _primordials.TypedArrayPrototypeGetLength)(float16bitsArray);\n    let from = (0, _spec.ToIntegerOrInfinity)(opts[0]);\n\n    if (from === Infinity) {\n      return false;\n    }\n\n    if (from < 0) {\n      from += length;\n\n      if (from < 0) {\n        from = 0;\n      }\n    }\n\n    const isNaN = (0, _primordials.NumberIsNaN)(element);\n\n    for (let i = from; i < length; ++i) {\n      const value = (0, _converter.convertToNumber)(float16bitsArray[i]);\n\n      if (isNaN && (0, _primordials.NumberIsNaN)(value)) {\n        return true;\n      }\n\n      if (value === element) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  join(separator) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const array = copyToArray(float16bitsArray);\n    return (0, _primordials.ArrayPrototypeJoin)(array, separator);\n  }\n\n  toLocaleString(...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const array = copyToArray(float16bitsArray);\n    return (0, _primordials.ArrayPrototypeToLocaleString)(array, ...(0, _arrayIterator.safeIfNeeded)(opts));\n  }\n\n  get [_primordials.SymbolToStringTag]() {\n    if (isFloat16Array(this)) {\n      return \"Float16Array\";\n    }\n  }\n\n}\n\nexports.Float16Array = Float16Array;\n(0, _primordials.ObjectDefineProperty)(Float16Array, \"BYTES_PER_ELEMENT\", {\n  value: BYTES_PER_ELEMENT\n});\n(0, _primordials.ObjectDefineProperty)(Float16Array, _brand.brand, {});\n(0, _primordials.ReflectSetPrototypeOf)(Float16Array, _primordials.TypedArray);\nconst Float16ArrayPrototype = Float16Array.prototype;\n(0, _primordials.ObjectDefineProperty)(Float16ArrayPrototype, \"BYTES_PER_ELEMENT\", {\n  value: BYTES_PER_ELEMENT\n});\n(0, _primordials.ObjectDefineProperty)(Float16ArrayPrototype, _primordials.SymbolIterator, {\n  value: Float16ArrayPrototype.values,\n  writable: true,\n  configurable: true\n});\n(0, _primordials.ReflectSetPrototypeOf)(Float16ArrayPrototype, _primordials.TypedArrayPrototype);","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.safeIfNeeded = safeIfNeeded;\nexports.wrap = wrap;\n\nvar _primordials = require(\"./primordials.cjs\");\n\nconst arrayIterators = new _primordials.NativeWeakMap();\nconst SafeIteratorPrototype = (0, _primordials.ObjectCreate)(null, {\n  next: {\n    value: function next() {\n      const arrayIterator = (0, _primordials.WeakMapPrototypeGet)(arrayIterators, this);\n      return (0, _primordials.ArrayIteratorPrototypeNext)(arrayIterator);\n    }\n  },\n  [_primordials.SymbolIterator]: {\n    value: function values() {\n      return this;\n    }\n  }\n});\n\nfunction safeIfNeeded(array) {\n  if (array[_primordials.SymbolIterator] === _primordials.NativeArrayPrototypeSymbolIterator) {\n    return array;\n  }\n\n  const safe = (0, _primordials.ObjectCreate)(SafeIteratorPrototype);\n  (0, _primordials.WeakMapPrototypeSet)(arrayIterators, safe, (0, _primordials.ArrayPrototypeSymbolIterator)(array));\n  return safe;\n}\n\nconst generators = new _primordials.NativeWeakMap();\nconst DummyArrayIteratorPrototype = (0, _primordials.ObjectCreate)(_primordials.IteratorPrototype, {\n  next: {\n    value: function next() {\n      const generator = (0, _primordials.WeakMapPrototypeGet)(generators, this);\n      return (0, _primordials.GeneratorPrototypeNext)(generator);\n    },\n    writable: true,\n    configurable: true\n  }\n});\n\nfor (const key of (0, _primordials.ReflectOwnKeys)(_primordials.ArrayIteratorPrototype)) {\n  if (key === \"next\") {\n    continue;\n  }\n\n  (0, _primordials.ObjectDefineProperty)(DummyArrayIteratorPrototype, key, (0, _primordials.ReflectGetOwnPropertyDescriptor)(_primordials.ArrayIteratorPrototype, key));\n}\n\nfunction wrap(generator) {\n  const dummy = (0, _primordials.ObjectCreate)(DummyArrayIteratorPrototype);\n  (0, _primordials.WeakMapPrototypeSet)(generators, dummy, generator);\n  return dummy;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hasFloat16ArrayBrand = hasFloat16ArrayBrand;\n\nvar _is = require(\"./is.cjs\");\n\nvar _messages = require(\"./messages.cjs\");\n\nvar _primordials = require(\"./primordials.cjs\");\n\nconst brand = (0, _primordials.SymbolFor)(\"__Float16Array__\");\nexports.brand = brand;\n\nfunction hasFloat16ArrayBrand(target) {\n  if (!(0, _is.isObjectLike)(target)) {\n    return false;\n  }\n\n  const prototype = (0, _primordials.ReflectGetPrototypeOf)(target);\n\n  if (!(0, _is.isObjectLike)(prototype)) {\n    return false;\n  }\n\n  const constructor = prototype.constructor;\n\n  if (constructor === undefined) {\n    return false;\n  }\n\n  if (!(0, _is.isObject)(constructor)) {\n    throw (0, _primordials.NativeTypeError)(_messages.THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT);\n  }\n\n  return (0, _primordials.ReflectHas)(constructor, brand);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertToNumber = convertToNumber;\nexports.roundToFloat16Bits = roundToFloat16Bits;\n\nvar _primordials = require(\"./primordials.cjs\");\n\nconst buffer = new _primordials.NativeArrayBuffer(4);\nconst floatView = new _primordials.NativeFloat32Array(buffer);\nconst uint32View = new _primordials.NativeUint32Array(buffer);\nconst baseTable = new _primordials.NativeUint32Array(512);\nconst shiftTable = new _primordials.NativeUint32Array(512);\n\nfor (let i = 0; i < 256; ++i) {\n  const e = i - 127;\n\n  if (e < -27) {\n    baseTable[i] = 0x0000;\n    baseTable[i | 0x100] = 0x8000;\n    shiftTable[i] = 24;\n    shiftTable[i | 0x100] = 24;\n  } else if (e < -14) {\n    baseTable[i] = 0x0400 >> -e - 14;\n    baseTable[i | 0x100] = 0x0400 >> -e - 14 | 0x8000;\n    shiftTable[i] = -e - 1;\n    shiftTable[i | 0x100] = -e - 1;\n  } else if (e <= 15) {\n    baseTable[i] = e + 15 << 10;\n    baseTable[i | 0x100] = e + 15 << 10 | 0x8000;\n    shiftTable[i] = 13;\n    shiftTable[i | 0x100] = 13;\n  } else if (e < 128) {\n    baseTable[i] = 0x7c00;\n    baseTable[i | 0x100] = 0xfc00;\n    shiftTable[i] = 24;\n    shiftTable[i | 0x100] = 24;\n  } else {\n    baseTable[i] = 0x7c00;\n    baseTable[i | 0x100] = 0xfc00;\n    shiftTable[i] = 13;\n    shiftTable[i | 0x100] = 13;\n  }\n}\n\nfunction roundToFloat16Bits(num) {\n  floatView[0] = num;\n  const f = uint32View[0];\n  const e = f >> 23 & 0x1ff;\n  return baseTable[e] + ((f & 0x007fffff) >> shiftTable[e]);\n}\n\nconst mantissaTable = new _primordials.NativeUint32Array(2048);\nconst exponentTable = new _primordials.NativeUint32Array(64);\nconst offsetTable = new _primordials.NativeUint32Array(64);\n\nfor (let i = 1; i < 1024; ++i) {\n  let m = i << 13;\n  let e = 0;\n\n  while ((m & 0x00800000) === 0) {\n    m <<= 1;\n    e -= 0x00800000;\n  }\n\n  m &= ~0x00800000;\n  e += 0x38800000;\n  mantissaTable[i] = m | e;\n}\n\nfor (let i = 1024; i < 2048; ++i) {\n  mantissaTable[i] = 0x38000000 + (i - 1024 << 13);\n}\n\nfor (let i = 1; i < 31; ++i) {\n  exponentTable[i] = i << 23;\n}\n\nexponentTable[31] = 0x47800000;\nexponentTable[32] = 0x80000000;\n\nfor (let i = 33; i < 63; ++i) {\n  exponentTable[i] = 0x80000000 + (i - 32 << 23);\n}\n\nexponentTable[63] = 0xc7800000;\n\nfor (let i = 1; i < 64; ++i) {\n  if (i !== 32) {\n    offsetTable[i] = 1024;\n  }\n}\n\nfunction convertToNumber(float16bits) {\n  const m = float16bits >> 10;\n  uint32View[0] = mantissaTable[offsetTable[m] + (float16bits & 0x3ff)] + exponentTable[m];\n  return floatView[0];\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isArrayBuffer = isArrayBuffer;\nexports.isCanonicalIntegerIndexString = isCanonicalIntegerIndexString;\nexports.isNativeBigIntTypedArray = isNativeBigIntTypedArray;\nexports.isNativeTypedArray = isNativeTypedArray;\nexports.isObject = isObject;\nexports.isObjectLike = isObjectLike;\nexports.isOrdinaryArray = isOrdinaryArray;\nexports.isOrdinaryNativeTypedArray = isOrdinaryNativeTypedArray;\nexports.isSharedArrayBuffer = isSharedArrayBuffer;\n\nvar _primordials = require(\"./primordials.cjs\");\n\nfunction isObject(value) {\n  return value !== null && typeof value === \"object\" || typeof value === \"function\";\n}\n\nfunction isObjectLike(value) {\n  return value !== null && typeof value === \"object\";\n}\n\nfunction isNativeTypedArray(value) {\n  return (0, _primordials.TypedArrayPrototypeGetSymbolToStringTag)(value) !== undefined;\n}\n\nfunction isNativeBigIntTypedArray(value) {\n  const typedArrayName = (0, _primordials.TypedArrayPrototypeGetSymbolToStringTag)(value);\n  return typedArrayName === \"BigInt64Array\" || typedArrayName === \"BigUint64Array\";\n}\n\nfunction isArrayBuffer(value) {\n  try {\n    (0, _primordials.ArrayBufferPrototypeGetByteLength)(value);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isSharedArrayBuffer(value) {\n  if (_primordials.NativeSharedArrayBuffer === null) {\n    return false;\n  }\n\n  try {\n    (0, _primordials.SharedArrayBufferPrototypeGetByteLength)(value);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isOrdinaryArray(value) {\n  if (!(0, _primordials.ArrayIsArray)(value)) {\n    return false;\n  }\n\n  if (value[_primordials.SymbolIterator] === _primordials.NativeArrayPrototypeSymbolIterator) {\n    return true;\n  }\n\n  const iterator = value[_primordials.SymbolIterator]();\n\n  return iterator[_primordials.SymbolToStringTag] === \"Array Iterator\";\n}\n\nfunction isOrdinaryNativeTypedArray(value) {\n  if (!isNativeTypedArray(value)) {\n    return false;\n  }\n\n  if (value[_primordials.SymbolIterator] === _primordials.NativeTypedArrayPrototypeSymbolIterator) {\n    return true;\n  }\n\n  const iterator = value[_primordials.SymbolIterator]();\n\n  return iterator[_primordials.SymbolToStringTag] === \"Array Iterator\";\n}\n\nfunction isCanonicalIntegerIndexString(value) {\n  if (typeof value !== \"string\") {\n    return false;\n  }\n\n  const number = +value;\n\n  if (value !== number + \"\") {\n    return false;\n  }\n\n  if (!(0, _primordials.NumberIsFinite)(number)) {\n    return false;\n  }\n\n  return number === (0, _primordials.MathTrunc)(number);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst THIS_IS_NOT_AN_OBJECT = \"This is not an object\";\nexports.THIS_IS_NOT_AN_OBJECT = THIS_IS_NOT_AN_OBJECT;\nconst THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT = \"This is not a Float16Array object\";\nexports.THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT = THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT;\nconst THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY = \"This constructor is not a subclass of Float16Array\";\nexports.THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY = THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY;\nconst THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT = \"The constructor property value is not an object\";\nexports.THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT = THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT;\nconst SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT = \"Species constructor didn't return TypedArray object\";\nexports.SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT = SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT;\nconst DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH = \"Derived constructor created TypedArray object which was too small length\";\nexports.DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH = DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH;\nconst ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER = \"Attempting to access detached ArrayBuffer\";\nexports.ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER = ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER;\nconst CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT = \"Cannot convert undefined or null to object\";\nexports.CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT = CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT;\nconst CANNOT_MIX_BIGINT_AND_OTHER_TYPES = \"Cannot mix BigInt and other types, use explicit conversions\";\nexports.CANNOT_MIX_BIGINT_AND_OTHER_TYPES = CANNOT_MIX_BIGINT_AND_OTHER_TYPES;\nconst ITERATOR_PROPERTY_IS_NOT_CALLABLE = \"@@iterator property is not callable\";\nexports.ITERATOR_PROPERTY_IS_NOT_CALLABLE = ITERATOR_PROPERTY_IS_NOT_CALLABLE;\nconst REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE = \"Reduce of empty array with no initial value\";\nexports.REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE = REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE;\nconst OFFSET_IS_OUT_OF_BOUNDS = \"Offset is out of bounds\";\nexports.OFFSET_IS_OUT_OF_BOUNDS = OFFSET_IS_OUT_OF_BOUNDS;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _messages = require(\"./messages.cjs\");\n\nfunction uncurryThis(target) {\n  return (thisArg, ...args) => {\n    return ReflectApply(target, thisArg, args);\n  };\n}\n\nfunction uncurryThisGetter(target, key) {\n  return uncurryThis(ReflectGetOwnPropertyDescriptor(target, key).get);\n}\n\nconst {\n  apply: ReflectApply,\n  construct: ReflectConstruct,\n  defineProperty: ReflectDefineProperty,\n  get: ReflectGet,\n  getOwnPropertyDescriptor: ReflectGetOwnPropertyDescriptor,\n  getPrototypeOf: ReflectGetPrototypeOf,\n  has: ReflectHas,\n  ownKeys: ReflectOwnKeys,\n  set: ReflectSet,\n  setPrototypeOf: ReflectSetPrototypeOf\n} = Reflect;\nexports.ReflectSetPrototypeOf = ReflectSetPrototypeOf;\nexports.ReflectSet = ReflectSet;\nexports.ReflectOwnKeys = ReflectOwnKeys;\nexports.ReflectHas = ReflectHas;\nexports.ReflectGetPrototypeOf = ReflectGetPrototypeOf;\nexports.ReflectGetOwnPropertyDescriptor = ReflectGetOwnPropertyDescriptor;\nexports.ReflectGet = ReflectGet;\nexports.ReflectDefineProperty = ReflectDefineProperty;\nexports.ReflectConstruct = ReflectConstruct;\nexports.ReflectApply = ReflectApply;\nconst NativeProxy = Proxy;\nexports.NativeProxy = NativeProxy;\nconst {\n  MAX_SAFE_INTEGER: MAX_SAFE_INTEGER,\n  isFinite: NumberIsFinite,\n  isNaN: NumberIsNaN\n} = Number;\nexports.NumberIsNaN = NumberIsNaN;\nexports.NumberIsFinite = NumberIsFinite;\nexports.MAX_SAFE_INTEGER = MAX_SAFE_INTEGER;\nconst {\n  iterator: SymbolIterator,\n  species: SymbolSpecies,\n  toStringTag: SymbolToStringTag,\n  for: SymbolFor\n} = Symbol;\nexports.SymbolFor = SymbolFor;\nexports.SymbolToStringTag = SymbolToStringTag;\nexports.SymbolSpecies = SymbolSpecies;\nexports.SymbolIterator = SymbolIterator;\nconst NativeObject = Object;\nexports.NativeObject = NativeObject;\nconst {\n  create: ObjectCreate,\n  defineProperty: ObjectDefineProperty,\n  freeze: ObjectFreeze,\n  is: ObjectIs\n} = NativeObject;\nexports.ObjectIs = ObjectIs;\nexports.ObjectFreeze = ObjectFreeze;\nexports.ObjectDefineProperty = ObjectDefineProperty;\nexports.ObjectCreate = ObjectCreate;\nconst ObjectPrototype = NativeObject.prototype;\nconst ObjectPrototype__lookupGetter__ = ObjectPrototype.__lookupGetter__ ? uncurryThis(ObjectPrototype.__lookupGetter__) : (object, key) => {\n  if (object == null) {\n    throw NativeTypeError(_messages.CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT);\n  }\n\n  let target = NativeObject(object);\n\n  do {\n    const descriptor = ReflectGetOwnPropertyDescriptor(target, key);\n\n    if (descriptor !== undefined) {\n      if (ObjectHasOwn(descriptor, \"get\")) {\n        return descriptor.get;\n      }\n\n      return;\n    }\n  } while ((target = ReflectGetPrototypeOf(target)) !== null);\n};\nexports.ObjectPrototype__lookupGetter__ = ObjectPrototype__lookupGetter__;\nconst ObjectHasOwn = NativeObject.hasOwn || uncurryThis(ObjectPrototype.hasOwnProperty);\nexports.ObjectHasOwn = ObjectHasOwn;\nconst NativeArray = Array;\nconst ArrayIsArray = NativeArray.isArray;\nexports.ArrayIsArray = ArrayIsArray;\nconst ArrayPrototype = NativeArray.prototype;\nconst ArrayPrototypeJoin = uncurryThis(ArrayPrototype.join);\nexports.ArrayPrototypeJoin = ArrayPrototypeJoin;\nconst ArrayPrototypePush = uncurryThis(ArrayPrototype.push);\nexports.ArrayPrototypePush = ArrayPrototypePush;\nconst ArrayPrototypeToLocaleString = uncurryThis(ArrayPrototype.toLocaleString);\nexports.ArrayPrototypeToLocaleString = ArrayPrototypeToLocaleString;\nconst NativeArrayPrototypeSymbolIterator = ArrayPrototype[SymbolIterator];\nexports.NativeArrayPrototypeSymbolIterator = NativeArrayPrototypeSymbolIterator;\nconst ArrayPrototypeSymbolIterator = uncurryThis(NativeArrayPrototypeSymbolIterator);\nexports.ArrayPrototypeSymbolIterator = ArrayPrototypeSymbolIterator;\nconst MathTrunc = Math.trunc;\nexports.MathTrunc = MathTrunc;\nconst NativeArrayBuffer = ArrayBuffer;\nexports.NativeArrayBuffer = NativeArrayBuffer;\nconst ArrayBufferIsView = NativeArrayBuffer.isView;\nexports.ArrayBufferIsView = ArrayBufferIsView;\nconst ArrayBufferPrototype = NativeArrayBuffer.prototype;\nconst ArrayBufferPrototypeSlice = uncurryThis(ArrayBufferPrototype.slice);\nexports.ArrayBufferPrototypeSlice = ArrayBufferPrototypeSlice;\nconst ArrayBufferPrototypeGetByteLength = uncurryThisGetter(ArrayBufferPrototype, \"byteLength\");\nexports.ArrayBufferPrototypeGetByteLength = ArrayBufferPrototypeGetByteLength;\nconst NativeSharedArrayBuffer = typeof SharedArrayBuffer !== \"undefined\" ? SharedArrayBuffer : null;\nexports.NativeSharedArrayBuffer = NativeSharedArrayBuffer;\nconst SharedArrayBufferPrototypeGetByteLength = NativeSharedArrayBuffer && uncurryThisGetter(NativeSharedArrayBuffer.prototype, \"byteLength\");\nexports.SharedArrayBufferPrototypeGetByteLength = SharedArrayBufferPrototypeGetByteLength;\nconst TypedArray = ReflectGetPrototypeOf(Uint8Array);\nexports.TypedArray = TypedArray;\nconst TypedArrayFrom = TypedArray.from;\nconst TypedArrayPrototype = TypedArray.prototype;\nexports.TypedArrayPrototype = TypedArrayPrototype;\nconst NativeTypedArrayPrototypeSymbolIterator = TypedArrayPrototype[SymbolIterator];\nexports.NativeTypedArrayPrototypeSymbolIterator = NativeTypedArrayPrototypeSymbolIterator;\nconst TypedArrayPrototypeKeys = uncurryThis(TypedArrayPrototype.keys);\nexports.TypedArrayPrototypeKeys = TypedArrayPrototypeKeys;\nconst TypedArrayPrototypeValues = uncurryThis(TypedArrayPrototype.values);\nexports.TypedArrayPrototypeValues = TypedArrayPrototypeValues;\nconst TypedArrayPrototypeEntries = uncurryThis(TypedArrayPrototype.entries);\nexports.TypedArrayPrototypeEntries = TypedArrayPrototypeEntries;\nconst TypedArrayPrototypeSet = uncurryThis(TypedArrayPrototype.set);\nexports.TypedArrayPrototypeSet = TypedArrayPrototypeSet;\nconst TypedArrayPrototypeReverse = uncurryThis(TypedArrayPrototype.reverse);\nexports.TypedArrayPrototypeReverse = TypedArrayPrototypeReverse;\nconst TypedArrayPrototypeFill = uncurryThis(TypedArrayPrototype.fill);\nexports.TypedArrayPrototypeFill = TypedArrayPrototypeFill;\nconst TypedArrayPrototypeCopyWithin = uncurryThis(TypedArrayPrototype.copyWithin);\nexports.TypedArrayPrototypeCopyWithin = TypedArrayPrototypeCopyWithin;\nconst TypedArrayPrototypeSort = uncurryThis(TypedArrayPrototype.sort);\nexports.TypedArrayPrototypeSort = TypedArrayPrototypeSort;\nconst TypedArrayPrototypeSlice = uncurryThis(TypedArrayPrototype.slice);\nexports.TypedArrayPrototypeSlice = TypedArrayPrototypeSlice;\nconst TypedArrayPrototypeSubarray = uncurryThis(TypedArrayPrototype.subarray);\nexports.TypedArrayPrototypeSubarray = TypedArrayPrototypeSubarray;\nconst TypedArrayPrototypeGetBuffer = uncurryThisGetter(TypedArrayPrototype, \"buffer\");\nexports.TypedArrayPrototypeGetBuffer = TypedArrayPrototypeGetBuffer;\nconst TypedArrayPrototypeGetByteOffset = uncurryThisGetter(TypedArrayPrototype, \"byteOffset\");\nexports.TypedArrayPrototypeGetByteOffset = TypedArrayPrototypeGetByteOffset;\nconst TypedArrayPrototypeGetLength = uncurryThisGetter(TypedArrayPrototype, \"length\");\nexports.TypedArrayPrototypeGetLength = TypedArrayPrototypeGetLength;\nconst TypedArrayPrototypeGetSymbolToStringTag = uncurryThisGetter(TypedArrayPrototype, SymbolToStringTag);\nexports.TypedArrayPrototypeGetSymbolToStringTag = TypedArrayPrototypeGetSymbolToStringTag;\nconst NativeUint16Array = Uint16Array;\nexports.NativeUint16Array = NativeUint16Array;\n\nconst Uint16ArrayFrom = (...args) => {\n  return ReflectApply(TypedArrayFrom, NativeUint16Array, args);\n};\n\nexports.Uint16ArrayFrom = Uint16ArrayFrom;\nconst NativeUint32Array = Uint32Array;\nexports.NativeUint32Array = NativeUint32Array;\nconst NativeFloat32Array = Float32Array;\nexports.NativeFloat32Array = NativeFloat32Array;\nconst ArrayIteratorPrototype = ReflectGetPrototypeOf([][SymbolIterator]());\nexports.ArrayIteratorPrototype = ArrayIteratorPrototype;\nconst ArrayIteratorPrototypeNext = uncurryThis(ArrayIteratorPrototype.next);\nexports.ArrayIteratorPrototypeNext = ArrayIteratorPrototypeNext;\nconst GeneratorPrototypeNext = uncurryThis(function* () {}().next);\nexports.GeneratorPrototypeNext = GeneratorPrototypeNext;\nconst IteratorPrototype = ReflectGetPrototypeOf(ArrayIteratorPrototype);\nexports.IteratorPrototype = IteratorPrototype;\nconst DataViewPrototype = DataView.prototype;\nconst DataViewPrototypeGetUint16 = uncurryThis(DataViewPrototype.getUint16);\nexports.DataViewPrototypeGetUint16 = DataViewPrototypeGetUint16;\nconst DataViewPrototypeSetUint16 = uncurryThis(DataViewPrototype.setUint16);\nexports.DataViewPrototypeSetUint16 = DataViewPrototypeSetUint16;\nconst NativeTypeError = TypeError;\nexports.NativeTypeError = NativeTypeError;\nconst NativeRangeError = RangeError;\nexports.NativeRangeError = NativeRangeError;\nconst NativeWeakSet = WeakSet;\nexports.NativeWeakSet = NativeWeakSet;\nconst WeakSetPrototype = NativeWeakSet.prototype;\nconst WeakSetPrototypeAdd = uncurryThis(WeakSetPrototype.add);\nexports.WeakSetPrototypeAdd = WeakSetPrototypeAdd;\nconst WeakSetPrototypeHas = uncurryThis(WeakSetPrototype.has);\nexports.WeakSetPrototypeHas = WeakSetPrototypeHas;\nconst NativeWeakMap = WeakMap;\nexports.NativeWeakMap = NativeWeakMap;\nconst WeakMapPrototype = NativeWeakMap.prototype;\nconst WeakMapPrototypeGet = uncurryThis(WeakMapPrototype.get);\nexports.WeakMapPrototypeGet = WeakMapPrototypeGet;\nconst WeakMapPrototypeHas = uncurryThis(WeakMapPrototype.has);\nexports.WeakMapPrototypeHas = WeakMapPrototypeHas;\nconst WeakMapPrototypeSet = uncurryThis(WeakMapPrototype.set);\nexports.WeakMapPrototypeSet = WeakMapPrototypeSet;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IsDetachedBuffer = IsDetachedBuffer;\nexports.SpeciesConstructor = SpeciesConstructor;\nexports.ToIntegerOrInfinity = ToIntegerOrInfinity;\nexports.ToLength = ToLength;\nexports.defaultCompare = defaultCompare;\n\nvar _is = require(\"./is.cjs\");\n\nvar _messages = require(\"./messages.cjs\");\n\nvar _primordials = require(\"./primordials.cjs\");\n\nfunction ToIntegerOrInfinity(target) {\n  const number = +target;\n\n  if ((0, _primordials.NumberIsNaN)(number) || number === 0) {\n    return 0;\n  }\n\n  return (0, _primordials.MathTrunc)(number);\n}\n\nfunction ToLength(target) {\n  const length = ToIntegerOrInfinity(target);\n\n  if (length < 0) {\n    return 0;\n  }\n\n  return length < _primordials.MAX_SAFE_INTEGER ? length : _primordials.MAX_SAFE_INTEGER;\n}\n\nfunction SpeciesConstructor(target, defaultConstructor) {\n  if (!(0, _is.isObject)(target)) {\n    throw (0, _primordials.NativeTypeError)(_messages.THIS_IS_NOT_AN_OBJECT);\n  }\n\n  const constructor = target.constructor;\n\n  if (constructor === undefined) {\n    return defaultConstructor;\n  }\n\n  if (!(0, _is.isObject)(constructor)) {\n    throw (0, _primordials.NativeTypeError)(_messages.THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT);\n  }\n\n  const species = constructor[_primordials.SymbolSpecies];\n\n  if (species == null) {\n    return defaultConstructor;\n  }\n\n  return species;\n}\n\nfunction IsDetachedBuffer(buffer) {\n  if ((0, _is.isSharedArrayBuffer)(buffer)) {\n    return false;\n  }\n\n  try {\n    (0, _primordials.ArrayBufferPrototypeSlice)(buffer, 0, 0);\n    return false;\n  } catch (e) {}\n\n  return true;\n}\n\nfunction defaultCompare(x, y) {\n  const isXNaN = (0, _primordials.NumberIsNaN)(x);\n  const isYNaN = (0, _primordials.NumberIsNaN)(y);\n\n  if (isXNaN && isYNaN) {\n    return 0;\n  }\n\n  if (isXNaN) {\n    return 1;\n  }\n\n  if (isYNaN) {\n    return -1;\n  }\n\n  if (x < y) {\n    return -1;\n  }\n\n  if (x > y) {\n    return 1;\n  }\n\n  if (x === 0 && y === 0) {\n    const isXPlusZero = (0, _primordials.ObjectIs)(x, 0);\n    const isYPlusZero = (0, _primordials.ObjectIs)(y, 0);\n\n    if (!isXPlusZero && isYPlusZero) {\n      return -1;\n    }\n\n    if (isXPlusZero && !isYPlusZero) {\n      return 1;\n    }\n  }\n\n  return 0;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hfround = hfround;\n\nvar _converter = require(\"./_util/converter.cjs\");\n\nvar _primordials = require(\"./_util/primordials.cjs\");\n\nfunction hfround(x) {\n  const number = +x;\n\n  if (!(0, _primordials.NumberIsFinite)(number) || number === 0) {\n    return number;\n  }\n\n  const x16 = (0, _converter.roundToFloat16Bits)(number);\n  return (0, _converter.convertToNumber)(x16);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Float16Array = require(\"./Float16Array.cjs\");\n\nexports.Float16Array = _Float16Array.Float16Array;\nexports.isFloat16Array = _Float16Array.isFloat16Array;\n\nvar _isTypedArray = require(\"./isTypedArray.cjs\");\n\nexports.isTypedArray = _isTypedArray.isTypedArray;\n\nvar _DataView = require(\"./DataView.cjs\");\n\nexports.getFloat16 = _DataView.getFloat16;\nexports.setFloat16 = _DataView.setFloat16;\n\nvar _hfround = require(\"./hfround.cjs\");\n\nexports.hfround = _hfround.hfround;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTypedArray = isTypedArray;\n\nvar _Float16Array = require(\"./Float16Array.cjs\");\n\nvar _is = require(\"./_util/is.cjs\");\n\nfunction isTypedArray(target) {\n  return (0, _is.isNativeTypedArray)(target) || (0, _Float16Array.isFloat16Array)(target);\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(607);\n"],"names":["root","factory","exports","module","define","amd","self","isNumber","value","Number","isNaN","isFiniteNumber","isFinite","isInteger","isPositiveNumber","isPositiveInteger","isNegativeNumber","isNegativeInteger","isNonNegativeNumber","isNonNegativeInteger","isNonPositiveNumber","isNonPositiveInteger","isNumberInRange","min","max","isIntegerInRange","isString","isTypedArray","ArrayBuffer","isView","DataView","isArray","Array","isObject","isBoolean","Object","defineProperty","calcCrc","buf","c","pngDataTable","crcTable","Int32Array","n","k","createPngDataTable","length","changeDpiBlob","blob","dpi","headerChunk","slice","Promise","resolve","reject","fileReader","FileReader","onload","dataArray","Uint8Array","result","tail","changedArray","changeDpiOnArray","type","Blob","readAsArrayBuffer","changeDpiDataUrl","base64Image","dataSplitted","split","format","body","headerLength","overwritepHYs","indexOf","PNG","b64Index","data","b64index","b64PhysSignature1","b64PhysSignature2","b64PhysSignature3","detectPhysChunkFromDataUrl","Math","ceil","JPEG","stringHeader","substring","restOfData","headerBytes","atob","i","charCodeAt","finalArray","base64Header","btoa","String","fromCharCode","apply","arr","arr2","from","_toConsumableArray","join","_P","_H","_Y","_S","physChunk","crc","crcChunk","startingIndex","searchStartOfPhys","set","chunkLength","finalHeader","b","a","autoBom","console","warn","test","d","XMLHttpRequest","open","responseType","g","response","onerror","error","send","status","e","dispatchEvent","MouseEvent","document","createEvent","initMouseEvent","window","f","global","navigator","userAgent","saveAs","HTMLAnchorElement","prototype","h","URL","webkitURL","j","createElement","name","download","rel","href","origin","location","target","createObjectURL","setTimeout","revokeObjectURL","msSaveOrOpenBlob","title","innerText","HTMLElement","safari","onloadend","replace","readAsDataURL","l","m","params","_errorState","_circlePositionsBuffer","_vertexAttributeLocations","_enabledVertexAttributes","_extensions","_copyPrograms","_setValuePrograms","_vertexShaders","DEFAULT_PROGRAM_NAME","src","DEFAULT_VERT_SHADER_SOURCE","compiledShaders","SEGMENT_PROGRAM_NAME","SEGMENT_VERTEX_SHADER_SOURCE","LAYER_POINTS_PROGRAM_NAME","LAYER_POINTS_VERTEX_SHADER_SOURCE","LAYER_VECTOR_FIELD_PROGRAM_NAME","LAYER_VECTOR_FIELD_VERTEX_SHADER_SOURCE","LAYER_LINES_PROGRAM_NAME","LAYER_LINES_VERTEX_SHADER_SOURCE","verboseLogging","_numTicks","keys","checkValidKeys","checkRequiredKeys","undefined","this","_errorCallback","message","errorCallback","DEFAULT_ERROR_CALLBACK","canvas","gl","context","_gl","contextID","getContext","contextAttributes","WEBGL2","WEBGL1","EXPERIMENTAL_WEBGL2","EXPERIMENTAL_WEBGL","isWebGL2","log","glslVersion","GLSL3","GLSL1","intPrecision","PRECISION_HIGH_P","floatPrecision","disable","DEPTH_TEST","pixelStorei","UNPACK_ALIGNMENT","bindVertexArray","getExtension","OES_VERTEX_ARRAY_OBJECT","bindVertexArrayOES","bindBuffer","ARRAY_BUFFER","resize","clientWidth","clientHeight","getParameter","MAX_TEXTURE_IMAGE_UNITS","initWithThreeRenderer","renderer","composer","GPUComposer","capabilities","precision","domElement","_threeRenderer","_setValueProgramForType","key","uniformTypeForType","setValueProgram","_copyProgramForType","copyProgram","_initVertexBuffer","buffer","createBuffer","bufferData","STATIC_DRAW","_getQuadPositionsBuffer","_quadPositionsBuffer","fsQuadPositions","Float32Array","_getBoundaryPositionsBuffer","_boundaryPositionsBuffer","boundaryPositions","_getCirclePositionsBuffer","numSegments","unitCirclePoints","push","cos","PI","sin","circlePositions","_cloneGPULayer","gpuLayer","dimensions","is1D","width","height","clone","GPULayer","numComponents","filter","wrapX","wrapY","numBuffers","clearValue","incrementBufferIndex","step","program","input","getStateAtIndex","output","bufferIndex","_getVertexShader","vertexID","vertexCompileConstants","programName","Error","preprocessedSrc","preprocessVertexShader","shader","compileShader","VERTEX_SHADER","_width","_height","_drawSetup","gpuProgram","fullscreenRender","inputTextures","layer","constructor","currentState","_getProgramWithName","_setOutputLayer","useProgram","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","texture","_setInternalFragmentUniforms","_setBlendMode","blendAlpha","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","_addLayerToInputs","indexOfLayerInArray","_passThroughLayerDataFromInputToOutput","state","_internalType","outputArray","numOutputs","outputLayer","_prepareForWrite","_usingTextureOverrideForCurrentBuffer","layer0","additionalTextures","drawBuffers","COLOR_ATTACHMENT0","_currentTexture","bindFrameBuffer","_widthHeightForOutput","viewport","bindFramebuffer","FRAMEBUFFER","_setVertexAttribute","size","locations","WeakMap","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","_disableVertexAttributes","numAttributes","disableVertexAttribArray","_setPositionAttribute","_setIndexAttribute","_setUVAttribute","firstOutput","nextOutput","_iterateOverOutputsIfNeeded","methodName","_childPrograms","_drawFinish","glProgram","_setVertexUniform","drawArrays","TRIANGLE_STRIP","stepBoundary","onePx","edges","numEdges","edge","BOUNDARY_LEFT","LINES","BOUNDARY_RIGHT","BOUNDARY_TOP","BOUNDARY_BOTTOM","LINE_LOOP","stepNonBoundary","stepCircle","position","diameter","useOutputScale","DEFAULT_CIRCLE_NUM_SEGMENTS","TRIANGLE_FAN","stepSegment","position1","position2","thickness","diffX","diffY","angle","atan2","centerX","centerY","sqrt","numCapSegments","endCaps","stepRect","drawLayerAsPoints","_pointIndexArray","MAX_FLOAT_INT","count","color","JSON","stringify","setUniform","vertexShaderOptions","GPUIO_VS_POSITION_W_ACCUM","GPUIO_VS_WRAP_X","GPUIO_VS_WRAP_Y","INT","pointSize","positionLayerDimensions","_pointIndexBuffer","indices","initSequentialFloatArray","POINTS","drawLayerAsVectorField","_vectorFieldIndexArray","vectorScale","vectorSpacing","spacedDimensions","floor","_vectorFieldIndexBuffer","resetThreeState","getViewport","ThreejsUtils","Vector4","x","y","resetState","savePNG","filename","callback","toBlob","then","tick","_lastTickTime","_lastTickFPS","currentTime","performance","now","fps","numTicks","currentFPS","parseFloat","toFixed","dispose","deleteBuffer","forEach","_indexedLinesIndexBuffer","values","deleteShader","_wrappedLineColorProgram","_clearValue","_bufferIndex","_buffers","_composer","calcGPULayerSize","_length","defaultFilter","HALF_FLOAT","NEAREST","LINEAR","isValidFilter","validFilters","CLAMP_TO_EDGE","isValidWrap","validWraps","isValidDataType","validDataTypes","internalType","getGPULayerInternalType","getGLTextureParameters","glFormat","glInternalFormat","glType","glNumChannels","_glInternalFormat","_glFormat","_glType","_glNumChannels","internalFilter","getGPULayerInternalFilter","_internalFilter","_glFilter","_internalWrapX","getGPULayerInternalWrap","wrap","_glWrapS","_internalWrapY","_glWrapT","_initBuffers","array","initFromImageURL","url","isValidImageType","validImageTypes","isValidImageFormat","validImageFormats","image","Image","is2D","_textureOverrides","arrayOrImage","validatedArrayOrImage","validateGPULayerArray","HTMLImageElement","createTexture","getError","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","texImage2D","decrementBufferIndex","index","abs","setFromArray","validatedArray","_destroyBuffers","isValidClearValue","clear","applyToAllBuffers","endIndex","_getValuesSetup","_valuesRaw","RGBA","Uint16Array","UNSIGNED_BYTE","UNSIGNED_SHORT","RGBA_INTEGER","UNSIGNED_INT","Uint32Array","BYTE","SHORT","readyToRead","checkFramebufferStatus","_getValuesPost","OUTPUT_LENGTH","handleFloat16Conversion","_valuesBufferView","arrayConstructorForType","_values","initArrayForType","index1","index2","getFloat16","getValues","readPixels","getValuesAsync","readPixelsAsync","multiplier","imageData","getImageData","indexFlipped","putImageData","attachToThreeTexture","offsetTextureProperties","properties","get","deleteTexture","__webglTexture","__webglInit","disposeFramebuffers","results","writeSupport","filterWrapSupport","shouldCastIntTypeAsFloat","testWriteSupport","framebuffer","createFramebuffer","framebufferTexture2D","validStatus","FRAMEBUFFER_COMPLETE","deleteFramebuffer","testFilterWrap","glWrap","glFilter","valuesTyped","valuesTyped16","float16View","setFloat16","offset","fragmentShaderSource","convertFragmentShaderToGLSL1","fragmentShader","FRAGMENT_SHADER","isUnsignedIntType","isIntType","wrapValue","val","vertexShader","initGLProgram","uniform2fv","getUniformLocation","filtered","supported","tol","expected","_x","deleteProgram","minMaxValuesForType","Infinity","MIN_UNSIGNED_BYTE","MAX_UNSIGNED_BYTE","MIN_BYTE","MAX_BYTE","MIN_UNSIGNED_SHORT","MAX_UNSIGNED_SHORT","MIN_SHORT","MAX_SHORT","MIN_UNSIGNED_INT","MAX_UNSIGNED_INT","MIN_INT","MAX_INT","halfFloatsAsFloats","OES_TEXTURE_HAlF_FLOAT_LINEAR","OES_TEXTURE_FLOAT_LINEAR","RED","RG","RED_INTEGER","RG_INTEGER","R16F","RG16F","RGBA16F","R32F","RG32F","RGBA32F","R8UI","RG8UI","RGBA8UI","R8I","RG8I","RGBA8I","R16I","RG16I","RGBA16I","R16UI","RG16UI","RGBA16UI","R32I","RG32I","RGBA32I","R32UI","RG32UI","RGBA32UI","OES_TEXTURE_HALF_FLOAT","HALF_FLOAT_OES","missingParams","EXT_COLOR_BUFFER_FLOAT","EXT_COLOR_BUFFER_HALF_FLOAT","OES_TEXTURE_FLOAT","shouldTypeCast","Int8Array","Int16Array","validArrayTypes","map","arrayLength","shouldResize","view","_len","origValue","clipped","_fragmentShaders","_compileTimeConstants","_uniforms","_programs","_programsKeyLookup","_samplerUniformsIndices","uniforms","compileTimeConstants","preprocessFragmentShader","shaderSource","samplerUniforms","additionalSources","_fragmentShaderSource","inputIndex","shaderIndex","GPUProgram","numChildren","GPUProgramChild","recompile","needsRecompile","programKeys","numPrograms","delete","fragmentShaderKeys","numFragmentShaders","numUniforms","_getFragmentShader","fragmentId","internalCompileTimeConstants","fragmentID","fragmentCompileConstants","wrapXVal","REPEAT","wrapYVal","filterVal","SAMPLER2D_WRAP_X","SAMPLER2D_WRAP_Y","SAMPLER2D_FILTER","SAMPLER2D_CAST_INT","uniformNames","uniformName","uniform","_setProgramUniform","isGLSL3","_location","getUniform","badType","BOOL_1D_UNIFORM","BOOL_2D_UNIFORM","BOOL_3D_UNIFORM","BOOL_4D_UNIFORM","FLOAT_1D_UNIFORM","FLOAT_2D_UNIFORM","FLOAT_3D_UNIFORM","FLOAT_4D_UNIFORM","INT_1D_UNIFORM","INT_2D_UNIFORM","INT_3D_UNIFORM","INT_4D_UNIFORM","UINT_1D_UNIFORM","UINT_2D_UNIFORM","UINT_3D_UNIFORM","UINT_4D_UNIFORM","uniform1i","uniform2i","uniform3i","uniform4i","uniform1f","uniform3fv","uniform4fv","uniform2iv","uniform3iv","uniform4iv","uniform1ui","uniform2uiv","uniform3uiv","uniform4uiv","_cacheUniformValue","oldValue","currentType","uniformInternalTypeForValue","samplerUniform","find","programNames","indexLookup","fill","filterMismatch","halfPxSize","halfPxUniform","SAMPLER2D_HALF_PX_UNIFORM","dimensionsUniform","SAMPLER2D_DIMENSIONS_UNIFORM","_gpuio_child_params","valueLength","valueType","glslTypeForType","outputType","glslType","glslPrefixForType","numInputs","components","arrayOfLengthNumInputs","el","componentSelection","glslComponentSelectionForNumComponents","opacity","glslFloatType","glslPrefix","shouldCast","scale","colorZero","castFloat","component","bias","colorNegative","colorPositive","z","w","copy","v","isNumberOfType","validKeys","requiredKeys","BOOL","UINT","RGB","PRECISION_LOW_P","PRECISION_MEDIUM_P","GPUIO_VS_INDEXED_POSITIONS","GPUIO_VS_UV_ATTRIBUTE","GPUIO_VS_NORMAL_ATTRIBUTE","MIN_HALF_FLOAT_INT","MAX_HALF_FLOAT_INT","MIN_FLOAT_INT","GPUIO_INT_PRECISION","GPUIO_FLOAT_PRECISION","WEBGL_DEPTH_TEXTURE","extensionName","optional","extension","framebufferMap","allTextureFramebuffersMap","texture0","numTextures","initFrameBuffer","allFramebuffers","numFramebuffers","PRECISION_SOURCE","intForPrecision","VERTEX_SHADER_HELPERS_SOURCE","_testing","isFloatType","utils","isSignedIntType","makeShaderHeader","isPowerOf2","extensions","regex","checks","GPULayerHelpers","polyfills","conversions","isWebGL2Supported","isHighpSupportedInVertexShader","isHighpSupportedInFragmentShader","getVertexShaderMediumpPrecision","getFragmentShaderMediumpPrecision","Programs","addLayersProgram","addValueProgram","multiplyValueProgram","renderAmplitudeProgram","renderSignedAmplitudeProgram","setColorProgram","GLSL1_POLYFILLS","FRAGMENT_SHADER_POLYFILLS","floatTypeForIntType","textureCalls","match","getSampler2DsInProgram","RegExp","remainingTextureCalls","polyfillUniforms","make_GPUIO_TEXTURE_POLYFILL","prefix","castOpening","castEnding","make_GPUIO_TEXTURE_WRAP","lookupFunction","wrapType","extraParams","sign","trunc","round","roundEven","type1","type2","clamp","mix","floatTypeForBoolType","det2","det3","E","modi","stepi","bitshiftLeft","bitshiftRight","bitwiseOr","numBits","bitwiseXOR","bitwiseAnd","bitwiseNot","suffix","escapeRegExp","string","typecastVariable","variableName","regexMatch","assignmentExpressions","regexValueMatch","regexReplace","_castVaryingToFloat","regexString","castToFloatExpressions","regexVariableMatch","variable","castVaryingToFloat","getFragmentOuts","outs","maxLocation","variableNames","numVariables","outsSorted","parseInt","shaderSources","numOuts","outRegex","outShaderSource","assignmentFound","filler","gl_FragColor","containsGLFragColor","origLength","samplersNoDuplicates","samplers","uniformMatch","sampler","supportsWebGL2","supportsHighpVertex","supportsHighpFragment","mediumpVertexPrecision","mediumpFragmentPrecision","convertCompileTimeConstantsToString","CTCSource","versionSource","compileTimeConstantsSource","precisionConstantsSource","shaderType","checkCompileStatus","createShader","shaderHeader","fullShaderSource","getShaderParameter","COMPILE_STATUS","line","getShaderInfoLog","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","WebGL2RenderingContext","WebGL2ComputeRenderingContext","isHighpSupported","vsSource","fsSource","vs","fs","vertexSupport","fragmentSupport","test1PxCalc","addUniforms","positionLocation","pixel","preprocessShader","stripVersion","stripPrecision","stripComments","convertShaderToGLSL1","glsl1Sampler2D","glsl1Uint","glsl1Texture","glsl1FragmentIn","glsl1FragmentOut","clientWaitAsync","sync","flags","interval_ms","res","clientWaitSync","WAIT_FAILED","TIMEOUT_EXPIRED","getBufferSubDataAsync","srcByteOffset","dstBuffer","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","deleteSync","getBufferSubData","vLocation","uniform3f","mediumpPrecision","highpToMediump","glsl1VertexIn","glsl1VertexOut","convertVertexShaderToGLSL1","checkFragmentShaderForFragColor","fragmentShaderPolyfills","texturePolyfill","sources","numSources","GLSL1Polyfills","shift","findIndex","item","PIXEL_PACK_BUFFER","byteLength","STREAM_READ","dataView","byteOffset","opts","_converter","convertToNumber","_primordials","DataViewPrototypeGetUint16","_arrayIterator","safeIfNeeded","DataViewPrototypeSetUint16","roundToFloat16Bits","isFloat16Array","_brand","_is","_messages","_spec","float16bitsArrays","NativeWeakMap","WeakMapPrototypeHas","ArrayBufferIsView","hasFloat16ArrayBrand","assertFloat16Array","NativeTypeError","THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT","assertSpeciesTypedArray","isTargetFloat16Array","isTargetTypedArray","isNativeTypedArray","SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT","float16bitsArray","getFloat16BitsArray","TypedArrayPrototypeGetLength","DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH","isNativeBigIntTypedArray","CANNOT_MIX_BIGINT_AND_OTHER_TYPES","float16","WeakMapPrototypeGet","TypedArrayPrototypeGetBuffer","IsDetachedBuffer","ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER","cloned","ReflectConstruct","Float16Array","copyToArray","TypedArrayPrototypeGetters","NativeWeakSet","ReflectOwnKeys","TypedArrayPrototype","SymbolToStringTag","descriptor","ReflectGetOwnPropertyDescriptor","ObjectHasOwn","WeakSetPrototypeAdd","handler","ObjectFreeze","receiver","isCanonicalIntegerIndexString","ReflectGet","WeakSetPrototypeHas","ObjectPrototype__lookupGetter__","ReflectSet","getOwnPropertyDescriptor","ReflectDefineProperty","_byteOffset","NativeUint16Array","isArrayBuffer","list","BufferConstructor","isSharedArrayBuffer","NativeArrayBuffer","SpeciesConstructor","iterator","SymbolIterator","ITERATOR_PROPERTY_IS_NOT_CALLABLE","isOrdinaryArray","ToLength","arguments","proxy","NativeProxy","WeakMapPrototypeSet","static","Constructor","ReflectHas","brand","THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY","uint16","TypedArrayPrototypeGetByteOffset","TypedArrayPrototypeSlice","Uint16ArrayFrom","mapFunc","thisArg","args","ReflectApply","isOrdinaryNativeTypedArray","CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT","NativeObject","items","TypedArrayPrototypeKeys","TypedArrayPrototypeValues","entries","TypedArrayPrototypeEntries","at","relativeIndex","ToIntegerOrInfinity","kept","ArrayPrototypePush","reduce","REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE","accumulator","start","reduceRight","findLast","findLastIndex","every","some","targetOffset","NativeRangeError","OFFSET_IS_OUT_OF_BOUNDS","TypedArrayPrototypeSet","targetLength","srcLength","reverse","TypedArrayPrototypeReverse","TypedArrayPrototypeFill","copyWithin","TypedArrayPrototypeCopyWithin","sort","compareFn","sortCompare","defaultCompare","TypedArrayPrototypeSort","end","relativeStart","relativeEnd","final","subarray","begin","uint16Subarray","TypedArrayPrototypeSubarray","element","lastIndexOf","includes","NumberIsNaN","separator","ArrayPrototypeJoin","toLocaleString","ArrayPrototypeToLocaleString","ObjectDefineProperty","ReflectSetPrototypeOf","TypedArray","Float16ArrayPrototype","writable","configurable","NativeArrayPrototypeSymbolIterator","safe","ObjectCreate","SafeIteratorPrototype","arrayIterators","ArrayPrototypeSymbolIterator","generator","dummy","DummyArrayIteratorPrototype","generators","next","arrayIterator","ArrayIteratorPrototypeNext","IteratorPrototype","GeneratorPrototypeNext","ArrayIteratorPrototype","isObjectLike","ReflectGetPrototypeOf","THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT","SymbolFor","float16bits","uint32View","mantissaTable","offsetTable","exponentTable","floatView","num","baseTable","shiftTable","NativeFloat32Array","NativeUint32Array","ArrayBufferPrototypeGetByteLength","number","NumberIsFinite","MathTrunc","typedArrayName","TypedArrayPrototypeGetSymbolToStringTag","ArrayIsArray","NativeTypedArrayPrototypeSymbolIterator","NativeSharedArrayBuffer","SharedArrayBufferPrototypeGetByteLength","THIS_IS_NOT_AN_OBJECT","uncurryThis","uncurryThisGetter","construct","getPrototypeOf","has","ownKeys","setPrototypeOf","Reflect","Proxy","MAX_SAFE_INTEGER","species","SymbolSpecies","toStringTag","for","Symbol","create","freeze","is","ObjectIs","ObjectPrototype","__lookupGetter__","object","hasOwn","hasOwnProperty","NativeArray","ArrayPrototype","ArrayBufferPrototype","ArrayBufferPrototypeSlice","SharedArrayBuffer","TypedArrayFrom","DataViewPrototype","getUint16","setUint16","TypeError","RangeError","WeakSet","WeakSetPrototype","add","WeakMapPrototype","defaultConstructor","isXNaN","isYNaN","isXPlusZero","isYPlusZero","hfround","x16","_Float16Array","_isTypedArray","_DataView","_hfround","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","globalThis","Function"],"sourceRoot":""}